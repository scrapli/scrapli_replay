{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"scrapli replay \u00b6 Scrapli replay is a set of tools to help you easily test scrapli programs. Scrapli replay contains a pytest plugin which can \"wrap\" your tests that contain scrapli interactions and record and play them back -- this allows you to store \"cached\" test sessions. These cached test sessions can be stored in version control and give you the ability to ensure scrapli is behaving as it should even without devices available (such as in your CI setup). scrapli replay also contains a \"collector\" and a \"server\" which allow you to \"collect\" interactions from live devices, and then build mock ssh server(s) that look and feel pretty close to the real deal! Check out the docs for more info!","title":"Scrapli Replay"},{"location":"#scrapli-replay","text":"Scrapli replay is a set of tools to help you easily test scrapli programs. Scrapli replay contains a pytest plugin which can \"wrap\" your tests that contain scrapli interactions and record and play them back -- this allows you to store \"cached\" test sessions. These cached test sessions can be stored in version control and give you the ability to ensure scrapli is behaving as it should even without devices available (such as in your CI setup). scrapli replay also contains a \"collector\" and a \"server\" which allow you to \"collect\" interactions from live devices, and then build mock ssh server(s) that look and feel pretty close to the real deal! Check out the docs for more info!","title":"scrapli replay"},{"location":"changelog/","text":"Changelog \u00b6 2022.01.30 \u00b6 Dropped Python3.6 support as it is now EOL! Of course, scrapli probably still works just fine with 3.6 (if you install the old 3.6 requirements), but we won't test/support it anymore. Some typing cleanup based on updated asyncssh typing additions. Fixed poorly used private attribute (on my end) causing scrapli-replay to break with asyncssh 2.9 strictly due to a typing issue. 2021.02.28 \u00b6 Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#20220130","text":"Dropped Python3.6 support as it is now EOL! Of course, scrapli probably still works just fine with 3.6 (if you install the old 3.6 requirements), but we won't test/support it anymore. Some typing cleanup based on updated asyncssh typing additions. Fixed poorly used private attribute (on my end) causing scrapli-replay to break with asyncssh 2.9 strictly due to a typing issue.","title":"2022.01.30"},{"location":"changelog/#20210228","text":"Initial release","title":"2021.02.28"},{"location":"about/code_of_conduct/","text":"Code of Conduct \u00b6 Be excellent to each other!","title":"Code of Conduct"},{"location":"about/code_of_conduct/#code-of-conduct","text":"Be excellent to each other!","title":"Code of Conduct"},{"location":"about/contributing/","text":"Contributing \u00b6 Thanks for thinking about contributing! Contributions are not expected, but are quite welcome. Contributions of all kinds are welcomed -- typos, doc updates, adding examples, bug fixes, and feature adds. Some notes on contributing: Please open a GitHub discussion topic for any potential feature adds/changes to discuss them prior to opening a PR, this way everyone has a chance to chime in and make sure we're all on the same page! Please open an issue to discuss any bugs/bug fixes prior to opening a PR. Once we all have discussed any adds/changes, pull requests are very much welcome and appreciated! All PRs should pass tests/CI linting -- checkout the Makefile for some shortcuts for linting and testing. Please include tests! Even simple/basic tests are better than nothing -- it helps make sure changes in the future don't break functionality or make things act in unexpected ways!","title":"Contributing"},{"location":"about/contributing/#contributing","text":"Thanks for thinking about contributing! Contributions are not expected, but are quite welcome. Contributions of all kinds are welcomed -- typos, doc updates, adding examples, bug fixes, and feature adds. Some notes on contributing: Please open a GitHub discussion topic for any potential feature adds/changes to discuss them prior to opening a PR, this way everyone has a chance to chime in and make sure we're all on the same page! Please open an issue to discuss any bugs/bug fixes prior to opening a PR. Once we all have discussed any adds/changes, pull requests are very much welcome and appreciated! All PRs should pass tests/CI linting -- checkout the Makefile for some shortcuts for linting and testing. Please include tests! Even simple/basic tests are better than nothing -- it helps make sure changes in the future don't break functionality or make things act in unexpected ways!","title":"Contributing"},{"location":"more_scrapli/nornir_scrapli/","text":"Nornir scrapli \u00b6 If you want to use scrapli, but don't want to deal with handling concurrency yourself, there is great news! The nornir_scrapli plugin allows you to use scrapli (and scrapli netconf and scrapli cfg) within the Nornir framework!","title":"Nornir Scrapli"},{"location":"more_scrapli/nornir_scrapli/#nornir-scrapli","text":"If you want to use scrapli, but don't want to deal with handling concurrency yourself, there is great news! The nornir_scrapli plugin allows you to use scrapli (and scrapli netconf and scrapli cfg) within the Nornir framework!","title":"Nornir scrapli"},{"location":"more_scrapli/scrapli/","text":"Scrapli \u00b6 scrapli ( docs ) is the \"parent\" scrapli library. Check it out if you need to connect to devices with telnet or ssh!","title":"Scrapli"},{"location":"more_scrapli/scrapli/#scrapli","text":"scrapli ( docs ) is the \"parent\" scrapli library. Check it out if you need to connect to devices with telnet or ssh!","title":"Scrapli"},{"location":"more_scrapli/scrapli_cfg/","text":"Scrapli Cfg \u00b6 scrapli_cfg ( docs ) is utility that accepts a scrapli Telnet or SSH connection and provides configuration management capabilities. scrapli_cfg allows you to load candidate configurations for merge or replace operations, generate diffs of the current vs candidate, and of course commit or abort the candidate configuration.","title":"Scrapli Cfg"},{"location":"more_scrapli/scrapli_cfg/#scrapli-cfg","text":"scrapli_cfg ( docs ) is utility that accepts a scrapli Telnet or SSH connection and provides configuration management capabilities. scrapli_cfg allows you to load candidate configurations for merge or replace operations, generate diffs of the current vs candidate, and of course commit or abort the candidate configuration.","title":"Scrapli Cfg"},{"location":"more_scrapli/scrapli_community/","text":"Scrapli Community \u00b6 If you would like to use scrapli, but the platform(s) that you work with are not supported in the \"core\" scrapli platforms, you should check out scrapli_community ! This is the place for users to share \"non-core\" scrapli platforms.","title":"Scrapli Community"},{"location":"more_scrapli/scrapli_community/#scrapli-community","text":"If you would like to use scrapli, but the platform(s) that you work with are not supported in the \"core\" scrapli platforms, you should check out scrapli_community ! This is the place for users to share \"non-core\" scrapli platforms.","title":"Scrapli Community"},{"location":"more_scrapli/scrapli_netconf/","text":"Scrapli Netconf \u00b6 scrapli_netconf ( docs ) is a netconf driver built on top of scrapli. The purpose of scrapli_netconf is to provide a fast, flexible, thoroughly tested, well typed, well documented, simple API that supports both synchronous and asynchronous usage. Working together scrapli and scrapli_netconf aim to provide a consistent (as is practical) look and feel when automating devices over telnet, SSH, or netconf (over SSH).","title":"Scrapli Netconf"},{"location":"more_scrapli/scrapli_netconf/#scrapli-netconf","text":"scrapli_netconf ( docs ) is a netconf driver built on top of scrapli. The purpose of scrapli_netconf is to provide a fast, flexible, thoroughly tested, well typed, well documented, simple API that supports both synchronous and asynchronous usage. Working together scrapli and scrapli_netconf aim to provide a consistent (as is practical) look and feel when automating devices over telnet, SSH, or netconf (over SSH).","title":"Scrapli Netconf"},{"location":"reference/SUMMARY/","text":"exceptions logging replay pytest_scrapli_replay replay server collector server","title":"SUMMARY"},{"location":"reference/exceptions/","text":"scrapli_replay.exceptions ScrapliReplayConnectionProfileError \u00b6 Bases: ScrapliReplayException Exception for connection profile errors Source code in scrapli_replay/exceptions.py 14 15 class ScrapliReplayConnectionProfileError ( ScrapliReplayException ): \"\"\"Exception for connection profile errors\"\"\" ScrapliReplayException \u00b6 Bases: Exception Base class for scrapli_replay exceptions Does not inherit from scrapli base exception so that these exceptions are very clearly not from \"normal\" scrapli! Source code in scrapli_replay/exceptions.py 4 5 6 7 8 9 10 11 class ScrapliReplayException ( Exception ): \"\"\" Base class for scrapli_replay exceptions Does not inherit from scrapli base exception so that these exceptions are very clearly not from \"normal\" scrapli! \"\"\" ScrapliReplayExpectedInputError \u00b6 Bases: ScrapliReplayException Exception for errors where expected inputs do not match reality Source code in scrapli_replay/exceptions.py 18 19 class ScrapliReplayExpectedInputError ( ScrapliReplayException ): \"\"\"Exception for errors where expected inputs do not match reality\"\"\" ScrapliReplayServerError \u00b6 Bases: ScrapliReplayException Base exception for scrapli_replay server related errors Source code in scrapli_replay/exceptions.py 22 23 class ScrapliReplayServerError ( ScrapliReplayException ): \"\"\"Base exception for scrapli_replay server related errors\"\"\"","title":"Exceptions"},{"location":"reference/exceptions/#exceptions.ScrapliReplayConnectionProfileError","text":"Bases: ScrapliReplayException Exception for connection profile errors Source code in scrapli_replay/exceptions.py 14 15 class ScrapliReplayConnectionProfileError ( ScrapliReplayException ): \"\"\"Exception for connection profile errors\"\"\"","title":"ScrapliReplayConnectionProfileError"},{"location":"reference/exceptions/#exceptions.ScrapliReplayException","text":"Bases: Exception Base class for scrapli_replay exceptions Does not inherit from scrapli base exception so that these exceptions are very clearly not from \"normal\" scrapli! Source code in scrapli_replay/exceptions.py 4 5 6 7 8 9 10 11 class ScrapliReplayException ( Exception ): \"\"\" Base class for scrapli_replay exceptions Does not inherit from scrapli base exception so that these exceptions are very clearly not from \"normal\" scrapli! \"\"\"","title":"ScrapliReplayException"},{"location":"reference/exceptions/#exceptions.ScrapliReplayExpectedInputError","text":"Bases: ScrapliReplayException Exception for errors where expected inputs do not match reality Source code in scrapli_replay/exceptions.py 18 19 class ScrapliReplayExpectedInputError ( ScrapliReplayException ): \"\"\"Exception for errors where expected inputs do not match reality\"\"\"","title":"ScrapliReplayExpectedInputError"},{"location":"reference/exceptions/#exceptions.ScrapliReplayServerError","text":"Bases: ScrapliReplayException Base exception for scrapli_replay server related errors Source code in scrapli_replay/exceptions.py 22 23 class ScrapliReplayServerError ( ScrapliReplayException ): \"\"\"Base exception for scrapli_replay server related errors\"\"\"","title":"ScrapliReplayServerError"},{"location":"reference/logging/","text":"scrapli_replay.logging ScrapliReplayFormatter \u00b6 Bases: Formatter_ Source code in scrapli_replay/logging.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 class ScrapliReplayFormatter ( Formatter_ ): def __init__ ( self , log_header : bool = True , caller_info : bool = False ) -> None : \"\"\" Scrapli Replay Formatter Emit nicely formatted log messages Args: log_header: print log header or not caller_info: print caller info or not (like module/function/lineno) Returns: None Raises: N/A \"\"\" log_format = \" {message_id:<5} | {asctime} | {levelname:<8} | {message} \" if caller_info : log_format = ( \" {message_id:<5} | {asctime} | {levelname:<8} | \" \" {module:<20} | {funcName:<20} | {lineno:<5} | {message} \" ) super () . __init__ ( fmt = log_format , style = \"{\" ) self . log_header = log_header self . caller_info = caller_info self . message_id = 1 self . header_record = LogRecord_ ( name = \"header\" , level = 0 , pathname = \"\" , lineno = 0 , msg = \"MESSAGE\" , args = (), exc_info = None , ) self . header_record . message_id = 0 self . header_record . asctime = \"TIMESTAMP\" . ljust ( 23 , \" \" ) self . header_record . levelname = \"LEVEL\" self . header_record . module = \"MODULE\" self . header_record . funcName = \"FUNCNAME\" self . header_record . lineno = 0 self . header_record . message = \"MESSAGE\" def formatMessage ( self , record : LogRecord ) -> str : \"\"\" Override standard library logging Formatter.formatMessage Args: record: LogRecord to format Returns: str: log string to emit Raises: N/A \"\"\" record . message_id = self . message_id if self . caller_info : record . module = ( record . module [: 20 ] if len ( record . module ) <= 20 else f \" { record . module [: 17 ] } ...\" ) record . funcName = ( record . funcName [: 20 ] if len ( record . funcName ) <= 20 else f \" { record . funcName [: 17 ] } ...\" ) message = self . _style . format ( record ) if self . message_id == 1 and self . log_header : # ignoring type for these fields so we can put \"pretty\" data into the log \"header\" row self . header_record . message_id = \"ID\" self . header_record . lineno = \"LINE\" # type: ignore header_message = self . _style . format ( self . header_record ) message = header_message + \" \\n \" + message self . message_id += 1 return message __init__ ( log_header : bool = True , caller_info : bool = False ) -> None \u00b6 Scrapli Replay Formatter Emit nicely formatted log messages Parameters: Name Type Description Default log_header bool print log header or not True caller_info bool print caller info or not (like module/function/lineno) False Returns: Type Description None None Source code in scrapli_replay/logging.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def __init__ ( self , log_header : bool = True , caller_info : bool = False ) -> None : \"\"\" Scrapli Replay Formatter Emit nicely formatted log messages Args: log_header: print log header or not caller_info: print caller info or not (like module/function/lineno) Returns: None Raises: N/A \"\"\" log_format = \" {message_id:<5} | {asctime} | {levelname:<8} | {message} \" if caller_info : log_format = ( \" {message_id:<5} | {asctime} | {levelname:<8} | \" \" {module:<20} | {funcName:<20} | {lineno:<5} | {message} \" ) super () . __init__ ( fmt = log_format , style = \"{\" ) self . log_header = log_header self . caller_info = caller_info self . message_id = 1 self . header_record = LogRecord_ ( name = \"header\" , level = 0 , pathname = \"\" , lineno = 0 , msg = \"MESSAGE\" , args = (), exc_info = None , ) self . header_record . message_id = 0 self . header_record . asctime = \"TIMESTAMP\" . ljust ( 23 , \" \" ) self . header_record . levelname = \"LEVEL\" self . header_record . module = \"MODULE\" self . header_record . funcName = \"FUNCNAME\" self . header_record . lineno = 0 self . header_record . message = \"MESSAGE\" formatMessage ( record : LogRecord ) -> str \u00b6 Override standard library logging Formatter.formatMessage Parameters: Name Type Description Default record LogRecord LogRecord to format required Returns: Name Type Description str str log string to emit Source code in scrapli_replay/logging.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def formatMessage ( self , record : LogRecord ) -> str : \"\"\" Override standard library logging Formatter.formatMessage Args: record: LogRecord to format Returns: str: log string to emit Raises: N/A \"\"\" record . message_id = self . message_id if self . caller_info : record . module = ( record . module [: 20 ] if len ( record . module ) <= 20 else f \" { record . module [: 17 ] } ...\" ) record . funcName = ( record . funcName [: 20 ] if len ( record . funcName ) <= 20 else f \" { record . funcName [: 17 ] } ...\" ) message = self . _style . format ( record ) if self . message_id == 1 and self . log_header : # ignoring type for these fields so we can put \"pretty\" data into the log \"header\" row self . header_record . message_id = \"ID\" self . header_record . lineno = \"LINE\" # type: ignore header_message = self . _style . format ( self . header_record ) message = header_message + \" \\n \" + message self . message_id += 1 return message","title":"Logging"},{"location":"reference/logging/#logging.ScrapliReplayFormatter","text":"Bases: Formatter_ Source code in scrapli_replay/logging.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 class ScrapliReplayFormatter ( Formatter_ ): def __init__ ( self , log_header : bool = True , caller_info : bool = False ) -> None : \"\"\" Scrapli Replay Formatter Emit nicely formatted log messages Args: log_header: print log header or not caller_info: print caller info or not (like module/function/lineno) Returns: None Raises: N/A \"\"\" log_format = \" {message_id:<5} | {asctime} | {levelname:<8} | {message} \" if caller_info : log_format = ( \" {message_id:<5} | {asctime} | {levelname:<8} | \" \" {module:<20} | {funcName:<20} | {lineno:<5} | {message} \" ) super () . __init__ ( fmt = log_format , style = \"{\" ) self . log_header = log_header self . caller_info = caller_info self . message_id = 1 self . header_record = LogRecord_ ( name = \"header\" , level = 0 , pathname = \"\" , lineno = 0 , msg = \"MESSAGE\" , args = (), exc_info = None , ) self . header_record . message_id = 0 self . header_record . asctime = \"TIMESTAMP\" . ljust ( 23 , \" \" ) self . header_record . levelname = \"LEVEL\" self . header_record . module = \"MODULE\" self . header_record . funcName = \"FUNCNAME\" self . header_record . lineno = 0 self . header_record . message = \"MESSAGE\" def formatMessage ( self , record : LogRecord ) -> str : \"\"\" Override standard library logging Formatter.formatMessage Args: record: LogRecord to format Returns: str: log string to emit Raises: N/A \"\"\" record . message_id = self . message_id if self . caller_info : record . module = ( record . module [: 20 ] if len ( record . module ) <= 20 else f \" { record . module [: 17 ] } ...\" ) record . funcName = ( record . funcName [: 20 ] if len ( record . funcName ) <= 20 else f \" { record . funcName [: 17 ] } ...\" ) message = self . _style . format ( record ) if self . message_id == 1 and self . log_header : # ignoring type for these fields so we can put \"pretty\" data into the log \"header\" row self . header_record . message_id = \"ID\" self . header_record . lineno = \"LINE\" # type: ignore header_message = self . _style . format ( self . header_record ) message = header_message + \" \\n \" + message self . message_id += 1 return message","title":"ScrapliReplayFormatter"},{"location":"reference/logging/#logging.ScrapliReplayFormatter.__init__","text":"Scrapli Replay Formatter Emit nicely formatted log messages Parameters: Name Type Description Default log_header bool print log header or not True caller_info bool print caller info or not (like module/function/lineno) False Returns: Type Description None None Source code in scrapli_replay/logging.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def __init__ ( self , log_header : bool = True , caller_info : bool = False ) -> None : \"\"\" Scrapli Replay Formatter Emit nicely formatted log messages Args: log_header: print log header or not caller_info: print caller info or not (like module/function/lineno) Returns: None Raises: N/A \"\"\" log_format = \" {message_id:<5} | {asctime} | {levelname:<8} | {message} \" if caller_info : log_format = ( \" {message_id:<5} | {asctime} | {levelname:<8} | \" \" {module:<20} | {funcName:<20} | {lineno:<5} | {message} \" ) super () . __init__ ( fmt = log_format , style = \"{\" ) self . log_header = log_header self . caller_info = caller_info self . message_id = 1 self . header_record = LogRecord_ ( name = \"header\" , level = 0 , pathname = \"\" , lineno = 0 , msg = \"MESSAGE\" , args = (), exc_info = None , ) self . header_record . message_id = 0 self . header_record . asctime = \"TIMESTAMP\" . ljust ( 23 , \" \" ) self . header_record . levelname = \"LEVEL\" self . header_record . module = \"MODULE\" self . header_record . funcName = \"FUNCNAME\" self . header_record . lineno = 0 self . header_record . message = \"MESSAGE\"","title":"__init__()"},{"location":"reference/logging/#logging.ScrapliReplayFormatter.formatMessage","text":"Override standard library logging Formatter.formatMessage Parameters: Name Type Description Default record LogRecord LogRecord to format required Returns: Name Type Description str str log string to emit Source code in scrapli_replay/logging.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def formatMessage ( self , record : LogRecord ) -> str : \"\"\" Override standard library logging Formatter.formatMessage Args: record: LogRecord to format Returns: str: log string to emit Raises: N/A \"\"\" record . message_id = self . message_id if self . caller_info : record . module = ( record . module [: 20 ] if len ( record . module ) <= 20 else f \" { record . module [: 17 ] } ...\" ) record . funcName = ( record . funcName [: 20 ] if len ( record . funcName ) <= 20 else f \" { record . funcName [: 17 ] } ...\" ) message = self . _style . format ( record ) if self . message_id == 1 and self . log_header : # ignoring type for these fields so we can put \"pretty\" data into the log \"header\" row self . header_record . message_id = \"ID\" self . header_record . lineno = \"LINE\" # type: ignore header_message = self . _style . format ( self . header_record ) message = header_message + \" \\n \" + message self . message_id += 1 return message","title":"formatMessage()"},{"location":"reference/replay/","text":"","title":"Index"},{"location":"reference/replay/pytest_scrapli_replay/","text":"scrapli_replay.pytest.scrapli_replay async_scrapli_replay ( request : SubRequest ) -> AsyncIterator [ None ] async \u00b6 Async version of Scrapli replay pytest plugin Parameters: Name Type Description Default request SubRequest pytest request object required Yields: Type Description AsyncIterator [None] None Source code in replay/pytest_scrapli_replay.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 @pytest . mark . asyncio @pytest . fixture ( scope = \"function\" ) async def async_scrapli_replay ( request : SubRequest ) -> AsyncIterator [ None ]: \"\"\" Async version of Scrapli replay pytest plugin Args: request: pytest request object Yields: None Raises: N/A \"\"\" # importing here to not break coverage for the rest of things... if/when this import is not here # it gets imported *before* coverage starts which means that the things in replay.replay dont # get proper coverage figured out from scrapli_replay.replay.replay import ScrapliReplay # pylint: disable=C0415 ( opt_replay_mode , session_directory , opt_overwrite , opt_disable , test_name , opt_block_network , ) = _finalize_fixture_args ( request = request ) if test_name in opt_overwrite : opt_replay_mode = \"overwrite\" if not opt_disable : async with ScrapliReplay ( session_directory = session_directory , session_name = test_name , replay_mode = opt_replay_mode , block_network = opt_block_network , ): yield else : yield pytest_addoption ( parser : Parser ) -> None \u00b6 Scrapli Replay Pytest options Parameters: Name Type Description Default parser Parser pytest option Parser required Returns: Type Description None None Source code in replay/pytest_scrapli_replay.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 def pytest_addoption ( parser : Parser ) -> None : \"\"\" Scrapli Replay Pytest options Args: parser: pytest option Parser Returns: None Raises: N/A \"\"\" group = parser . getgroup ( \"scrapli_replay\" ) group . addoption ( \"--scrapli-replay-mode\" , action = \"store\" , dest = \"scrapli_replay_mode\" , default = \"replay\" , choices = [ \"replay\" , \"record\" , \"overwrite\" ], help = \"Set the recording mode for scrapli_replay\" , ) group . addoption ( \"--scrapli-replay-directory\" , action = \"store\" , dest = \"scrapli_replay_directory\" , default = None , help = ( \"Set the recording output directory for scrapli_replay; if not set sessions are stored \" \"in a 'scrapli_replay' folder in the directory of the test file\" ), ) group . addoption ( \"--scrapli-replay-overwrite\" , action = \"store\" , dest = \"scrapli_replay_overwrite\" , default = \"\" , help = ( \"Comma separated list of test names, these sessions will be overwritten (re-recorded)\" ), ) group . addoption ( \"--scrapli-replay-disable\" , action = \"store_true\" , dest = \"scrapli_replay_disable\" , default = False , help = \"Disable scrapli_replay entirely\" , ) group . addoption ( \"--scrapli-replay-block-network\" , action = \"store_true\" , dest = \"scrapli_replay_block_network\" , default = False , help = ( \"Disable scrapli_replay network connections -- tests will work *if* sessions are \" \"already saved, no new sessions will be created/no connections will be made!\" ), ) pytest_load_initial_conftests ( early_config : Config , parser : Parser , args : Any ) -> None \u00b6 Register custom scrapli replay marker so scrapli replay can be used with pytest.mark This is not necessary if you just want to use scrapli_replay as a fixture, but it seems nicer to use it as a decorator (like pytest vcr). Also w/out this we get warnings and we dont want any of that silliness! Parameters: Name Type Description Default early_config Config pytest Config object required parser Parser pytest option Parser required args Any args... from something? I dunno required Returns: Type Description None None Source code in replay/pytest_scrapli_replay.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def pytest_load_initial_conftests ( early_config : Config , parser : Parser , args : Any ) -> None : \"\"\" Register custom scrapli replay marker so scrapli replay can be used with pytest.mark This is not necessary if you just want to use scrapli_replay as a fixture, but it seems nicer to use it as a decorator (like pytest vcr). Also w/out this we get warnings and we dont want any of that silliness! Args: early_config: pytest Config object parser: pytest option Parser args: args... from something? I dunno Returns: None Raises: N/A \"\"\" # parser and args aren't necessary for us here _ , _ = parser , args early_config . addinivalue_line ( \"markers\" , \"scrapli_replay: Mark the test as using scrapli_replay\" ) scrapli_replay ( request : SubRequest ) -> Iterator [ None ] \u00b6 Scrapli replay pytest plugin Parameters: Name Type Description Default request SubRequest pytest request object required Yields: Type Description Iterator [None] None Source code in replay/pytest_scrapli_replay.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 @pytest . fixture ( scope = \"function\" ) def scrapli_replay ( request : SubRequest ) -> Iterator [ None ]: \"\"\" Scrapli replay pytest plugin Args: request: pytest request object Yields: None Raises: N/A \"\"\" # importing here to not break coverage for the rest of things... if/when this import is not here # it gets imported *before* coverage starts which means that the things in replay.replay dont # get proper coverage figured out from scrapli_replay.replay.replay import ScrapliReplay # pylint: disable=C0415 ( opt_replay_mode , session_directory , opt_overwrite , opt_disable , test_name , opt_block_network , ) = _finalize_fixture_args ( request = request ) if test_name in opt_overwrite : opt_replay_mode = \"overwrite\" if not opt_disable : with ScrapliReplay ( session_directory = session_directory , session_name = test_name , replay_mode = opt_replay_mode , block_network = opt_block_network , ): yield else : yield","title":"Pytest scrapli replay"},{"location":"reference/replay/pytest_scrapli_replay/#replay.pytest_scrapli_replay.async_scrapli_replay","text":"Async version of Scrapli replay pytest plugin Parameters: Name Type Description Default request SubRequest pytest request object required Yields: Type Description AsyncIterator [None] None Source code in replay/pytest_scrapli_replay.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 @pytest . mark . asyncio @pytest . fixture ( scope = \"function\" ) async def async_scrapli_replay ( request : SubRequest ) -> AsyncIterator [ None ]: \"\"\" Async version of Scrapli replay pytest plugin Args: request: pytest request object Yields: None Raises: N/A \"\"\" # importing here to not break coverage for the rest of things... if/when this import is not here # it gets imported *before* coverage starts which means that the things in replay.replay dont # get proper coverage figured out from scrapli_replay.replay.replay import ScrapliReplay # pylint: disable=C0415 ( opt_replay_mode , session_directory , opt_overwrite , opt_disable , test_name , opt_block_network , ) = _finalize_fixture_args ( request = request ) if test_name in opt_overwrite : opt_replay_mode = \"overwrite\" if not opt_disable : async with ScrapliReplay ( session_directory = session_directory , session_name = test_name , replay_mode = opt_replay_mode , block_network = opt_block_network , ): yield else : yield","title":"async_scrapli_replay()"},{"location":"reference/replay/pytest_scrapli_replay/#replay.pytest_scrapli_replay.pytest_addoption","text":"Scrapli Replay Pytest options Parameters: Name Type Description Default parser Parser pytest option Parser required Returns: Type Description None None Source code in replay/pytest_scrapli_replay.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 def pytest_addoption ( parser : Parser ) -> None : \"\"\" Scrapli Replay Pytest options Args: parser: pytest option Parser Returns: None Raises: N/A \"\"\" group = parser . getgroup ( \"scrapli_replay\" ) group . addoption ( \"--scrapli-replay-mode\" , action = \"store\" , dest = \"scrapli_replay_mode\" , default = \"replay\" , choices = [ \"replay\" , \"record\" , \"overwrite\" ], help = \"Set the recording mode for scrapli_replay\" , ) group . addoption ( \"--scrapli-replay-directory\" , action = \"store\" , dest = \"scrapli_replay_directory\" , default = None , help = ( \"Set the recording output directory for scrapli_replay; if not set sessions are stored \" \"in a 'scrapli_replay' folder in the directory of the test file\" ), ) group . addoption ( \"--scrapli-replay-overwrite\" , action = \"store\" , dest = \"scrapli_replay_overwrite\" , default = \"\" , help = ( \"Comma separated list of test names, these sessions will be overwritten (re-recorded)\" ), ) group . addoption ( \"--scrapli-replay-disable\" , action = \"store_true\" , dest = \"scrapli_replay_disable\" , default = False , help = \"Disable scrapli_replay entirely\" , ) group . addoption ( \"--scrapli-replay-block-network\" , action = \"store_true\" , dest = \"scrapli_replay_block_network\" , default = False , help = ( \"Disable scrapli_replay network connections -- tests will work *if* sessions are \" \"already saved, no new sessions will be created/no connections will be made!\" ), )","title":"pytest_addoption()"},{"location":"reference/replay/pytest_scrapli_replay/#replay.pytest_scrapli_replay.pytest_load_initial_conftests","text":"Register custom scrapli replay marker so scrapli replay can be used with pytest.mark This is not necessary if you just want to use scrapli_replay as a fixture, but it seems nicer to use it as a decorator (like pytest vcr). Also w/out this we get warnings and we dont want any of that silliness! Parameters: Name Type Description Default early_config Config pytest Config object required parser Parser pytest option Parser required args Any args... from something? I dunno required Returns: Type Description None None Source code in replay/pytest_scrapli_replay.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 def pytest_load_initial_conftests ( early_config : Config , parser : Parser , args : Any ) -> None : \"\"\" Register custom scrapli replay marker so scrapli replay can be used with pytest.mark This is not necessary if you just want to use scrapli_replay as a fixture, but it seems nicer to use it as a decorator (like pytest vcr). Also w/out this we get warnings and we dont want any of that silliness! Args: early_config: pytest Config object parser: pytest option Parser args: args... from something? I dunno Returns: None Raises: N/A \"\"\" # parser and args aren't necessary for us here _ , _ = parser , args early_config . addinivalue_line ( \"markers\" , \"scrapli_replay: Mark the test as using scrapli_replay\" )","title":"pytest_load_initial_conftests()"},{"location":"reference/replay/pytest_scrapli_replay/#replay.pytest_scrapli_replay.scrapli_replay","text":"Scrapli replay pytest plugin Parameters: Name Type Description Default request SubRequest pytest request object required Yields: Type Description Iterator [None] None Source code in replay/pytest_scrapli_replay.py 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 @pytest . fixture ( scope = \"function\" ) def scrapli_replay ( request : SubRequest ) -> Iterator [ None ]: \"\"\" Scrapli replay pytest plugin Args: request: pytest request object Yields: None Raises: N/A \"\"\" # importing here to not break coverage for the rest of things... if/when this import is not here # it gets imported *before* coverage starts which means that the things in replay.replay dont # get proper coverage figured out from scrapli_replay.replay.replay import ScrapliReplay # pylint: disable=C0415 ( opt_replay_mode , session_directory , opt_overwrite , opt_disable , test_name , opt_block_network , ) = _finalize_fixture_args ( request = request ) if test_name in opt_overwrite : opt_replay_mode = \"overwrite\" if not opt_disable : with ScrapliReplay ( session_directory = session_directory , session_name = test_name , replay_mode = opt_replay_mode , block_network = opt_block_network , ): yield else : yield","title":"scrapli_replay()"},{"location":"reference/replay/replay/","text":"scrapli_replay.replay.replay ScrapliReplay \u00b6 Source code in replay/replay.pyclass ScrapliReplay : def __init__ ( self , * , session_directory : Optional [ str ] = None , session_name : Optional [ str ] = None , replay_mode : str = \"record\" , block_network : bool = False , ) -> None : \"\"\" Scrapli replay Args: session_directory: directory to write session data to session_name: name of session to write out replay_mode: replay mode to use block_network: if set to True, no network connections will be made, though any stored sessions will be ran normally Returns: None Raises: ScrapliReplayException: if invalid replay mode provided \"\"\" if session_directory is None or not Path ( session_directory ) . is_dir (): self . session_directory = Path . cwd () else : self . session_directory = Path ( session_directory ) # session name will generally come from pytest test name, but for ad-hoc use it can be # auto-generated w/ timestamp self . session_name = ( session_name or f \"scrapli_replay_session_ { round ( datetime . now () . timestamp ()) } \" ) if replay_mode not in ( \"record\" , \"replay\" , \"overwrite\" , ): raise ScrapliReplayException ( \"replay mode invalid\" ) if replay_mode == \"record\" and self . _session_exists (): print ( \"session exists but replay mode is not set to overwrite, using replay mode 'replay'\" ) replay_mode = \"replay\" elif not self . _session_exists (): replay_mode = \"record\" self . replay_mode = ReplayMode [ replay_mode . upper ()] self . replay_session : Dict [ str , Any ] = {} if self . replay_mode == ReplayMode . REPLAY : with open ( f \" { self . session_directory } / { self . session_name } .yaml\" , \"r\" , encoding = \"utf-8\" ) as f : self . replay_session = YAML . load ( f ) # if we open a session and there are no interactions recorded for any of the hosts then # something is not right -- we will need to re-record a session if not all ( instance_session . get ( \"interactions\" , None ) for instance_session in self . replay_session . values () ): self . replay_mode = ReplayMode . RECORD self . _block_network = block_network self . _patched_open : Optional [ mock . _patch [ Any ]] = None # noqa self . wrapped_instances : Dict [ str , ScrapliReplayInstance ] = {} def __call__ ( self , wrapped_func : Callable [ ... , Any ]) -> Callable [ ... , Any ]: \"\"\" Use ScrapliReplay as a decorator Decide if the wrapped function is sync or async and wrap that function/coroutine in context manager of self Args: wrapped_func: function being decorated Returns: decorate: decorated func Raises: N/A \"\"\" if asyncio . iscoroutinefunction ( wrapped_func ): async def decorate ( * args : Any , ** kwargs : Any ) -> Any : async with self : return await wrapped_func ( * args , ** kwargs ) else : # ignoring type error: # \"All conditional function variants must have identical signatures\" # one is sync one is async so never going to be identical here! def decorate ( * args : Any , ** kwargs : Any ) -> Any : # type: ignore with self : return wrapped_func ( * args , ** kwargs ) return decorate def __enter__ ( self ) -> None : \"\"\" Enter method for context manager Args: N/A Returns: None Raises: N/A \"\"\" def patched_open ( cls : Driver ) -> None : \"\"\" Patched Driver.open method Patched at the driver and dealing w/ the on open/auth things as this way we never have to think about which transport is being used Args: cls: scrapli Drive self Returns: None Raises: N/A \"\"\" instance_name = self . create_instance_name ( scrapli_conn = cls ) connection_profile = self . create_connection_profile ( scrapli_conn = cls ) instance_object = ScrapliReplayInstance ( replay_mode = self . replay_mode , connection_profile = connection_profile , replay_session = self . replay_session . get ( instance_name , {}), ) self . wrapped_instances [ instance_name ] = instance_object if self . replay_mode == ReplayMode . REPLAY : instance_object . setup_replay_mode ( scrapli_conn = cls ) else : if self . _block_network is True : # if block network is true and we got here then there is no session recorded, so # we need to skip this test pytest . skip ( \"scrapli-replay block-network is True, no session recorded, \" \"skipping test...\" ) # if we are not in replay mode, we are in record or overwrite (same/same) so setup # the record read/write channel methods and then do \"normal\" stuff instance_object . setup_record_mode ( scrapli_conn = cls ) cls . transport . open () cls . _pre_open_closing_log ( closing = False ) # pylint: disable=W0212 if cls . transport_name in ( \"system\" ,) and not cls . auth_bypass : cls . channel . channel_authenticate_ssh ( auth_password = cls . auth_password , auth_private_key_passphrase = cls . auth_private_key_passphrase , ) if ( cls . transport_name in ( \"telnet\" , \"asynctelnet\" , ) and not cls . auth_bypass ): cls . channel . channel_authenticate_telnet ( auth_username = cls . auth_username , auth_password = cls . auth_password ) if self . replay_mode == ReplayMode . RECORD : instance_object . telnet_patch_update_log ( auth_username = cls . auth_username ) if cls . on_open : cls . on_open ( cls ) cls . _post_open_closing_log ( closing = False ) # pylint: disable=W0212 self . _patched_open = mock . patch . object ( target = scrapli . driver . base . sync_driver . Driver , attribute = \"open\" , new = patched_open ) self . _patched_open . start () def __exit__ ( self , exception_type : Optional [ Type [ BaseException ]], exception_value : Optional [ BaseException ], traceback : Optional [ TracebackType ], ) -> None : \"\"\" Exit method to cleanup for context manager Args: exception_type: exception type being raised exception_value: message from exception being raised traceback: traceback from exception being raised Returns: None Raises: ScrapliReplayException: if patched open is none for some reason \"\"\" if not self . _patched_open : raise ScrapliReplayException ( \"patched open is None, but we are in exit... this should never happen, definitely \" \"a bug\" ) self . _patched_open . stop () if self . replay_mode in ( ReplayMode . RECORD , ReplayMode . OVERWRITE ): self . _save () async def __aenter__ ( self ) -> None : \"\"\" Enter method for context manager Args: N/A Returns: None Raises: N/A \"\"\" async def patched_open ( cls : AsyncDriver ) -> None : \"\"\" Patched AsyncDriver.open method Patched at the driver and dealing w/ the on open/auth things as this way we never have to think about which transport is being used Args: cls: scrapli Drive self Returns: None Raises: N/A \"\"\" instance_name = self . create_instance_name ( scrapli_conn = cls ) connection_profile = self . create_connection_profile ( scrapli_conn = cls ) instance_object = ScrapliReplayInstance ( replay_mode = self . replay_mode , connection_profile = connection_profile , replay_session = self . replay_session . get ( instance_name , {}), ) self . wrapped_instances [ instance_name ] = instance_object if self . replay_mode == ReplayMode . REPLAY : instance_object . setup_async_replay_mode ( scrapli_conn = cls ) else : if self . _block_network is True : # if block network is true and we got here then there is no session recorded, so # we need to skip this test pytest . skip ( \"scrapli-replay block-network is True, no session recorded, \" \"skipping test...\" ) # if we are not in replay mode, we are in record or overwrite (same/same) so setup # the record read/write channel methods and then do \"normal\" stuff instance_object . setup_async_record_mode ( scrapli_conn = cls ) await cls . transport . open () cls . _pre_open_closing_log ( closing = False ) # pylint: disable=W0212 if ( cls . transport_name in ( \"telnet\" , \"asynctelnet\" , ) and not cls . auth_bypass ): await cls . channel . channel_authenticate_telnet ( auth_username = cls . auth_username , auth_password = cls . auth_password ) if self . replay_mode == ReplayMode . RECORD : instance_object . telnet_patch_update_log ( auth_username = cls . auth_username ) if cls . on_open : await cls . on_open ( cls ) cls . _post_open_closing_log ( closing = False ) # pylint: disable=W0212 self . _patched_open = mock . patch . object ( scrapli . driver . base . async_driver . AsyncDriver , \"open\" , new = patched_open ) self . _patched_open . start () async def __aexit__ ( self , exception_type : Optional [ Type [ BaseException ]], exception_value : Optional [ BaseException ], traceback : Optional [ TracebackType ], ) -> None : \"\"\" Exit method to cleanup for async context manager Args: exception_type: exception type being raised exception_value: message from exception being raised traceback: traceback from exception being raised Returns: None Raises: ScrapliReplayException: if patched open is none for some reason \"\"\" if not self . _patched_open : raise ScrapliReplayException ( \"patched open is None, but we are in exit... this should never happen, definitely \" \"a bug\" ) self . _patched_open . stop () if self . replay_mode in ( ReplayMode . RECORD , ReplayMode . OVERWRITE ): self . _save () def create_instance_name ( self , scrapli_conn : Union [ AsyncDriver , Driver ]) -> str : \"\"\" Create as unique as possible instance name for a given connection Since hash cant be relied on to between python executions we need to have some way to have a decent idea about what connection is what... using the host and port is maybe not enough as a user may have multiple connections to the same device in a test session. Adding in the transport *might* help (maybe one is ssh one is netconf or telnet), but still not 100%... Adding in the logging uid is handy, but only if the user set one, so we also will tack on an extra field basically counting how many of the same connections we've seen. We *may* not support multiple connections because it may be too troublesome (but users could add an arbitrary logging uid to differentiate), but we'll put it there anyway for now... Args: scrapli_conn: scrapli connection to fetch data from Returns: str: instance name to use for the connection Raises: N/A \"\"\" instance_name = ( f \" { scrapli_conn . host } : { scrapli_conn . port } :\" f \" { scrapli_conn . transport . __class__ . __name__ } :\" f \" { scrapli_conn . logger . extra . get ( 'uid' , '' ) } \" # type:ignore ) similar_instance_names = [ inst_name for inst_name in self . wrapped_instances if inst_name . startswith ( instance_name ) ] instance_name = f \" { instance_name } : { len ( similar_instance_names ) } \" return instance_name @staticmethod def create_connection_profile ( scrapli_conn : Union [ AsyncDriver , Driver ]) -> ConnectionProfile : \"\"\" Record connection information Args: scrapli_conn: scrapli connection to fetch data from Returns: ConnectionProfile: recorded connection profile Raises: N/A \"\"\" recorded_connection_profile = ConnectionProfile ( host = scrapli_conn . host , port = scrapli_conn . port , auth_username = scrapli_conn . auth_username , auth_password = bool ( scrapli_conn . auth_password ), auth_private_key = scrapli_conn . auth_private_key , auth_private_key_passphrase = bool ( scrapli_conn . auth_private_key_passphrase ), auth_bypass = scrapli_conn . auth_bypass , transport = scrapli_conn . transport_name , ) if isinstance ( scrapli_conn , NetworkDriver ): recorded_connection_profile . auth_secondary = bool ( scrapli_conn . auth_secondary ) return recorded_connection_profile def _session_exists ( self ) -> bool : \"\"\" Check if a session file already exists Args: N/A Returns: bool: Raises: N/A \"\"\" if Path ( f \" { self . session_directory } / { self . session_name } .yaml\" ) . is_file (): return True return False def _serialize ( self ) -> Dict [ str , Any ]: \"\"\" Serialize in memory session data into a yaml-friendly output Args: N/A Returns: None Raises: N/A \"\"\" instance_replay_sessions = {} for instance_name , replay_instance in self . wrapped_instances . items (): instance_read_log = replay_instance . read_log instance_write_log = replay_instance . write_log read_log_len = instance_read_log . tell () instance_read_log . seek ( 0 ) instance_replay_session : Dict [ str , Any ] = {} instance_replay_sessions [ instance_name ] = instance_replay_session try : instance_replay_session [ \"connection_profile\" ] = asdict ( replay_instance . connection_profile ) except TypeError : # connection was already open so we couldn't patch it instance_replay_session [ \"connection_profile\" ] = {} instance_replay_session [ \"interactions\" ] = [] # all things after the \"initial output\" is an \"interaction\" previous_read_to_position = 0 for write_data in instance_write_log : write_input , redacted , read_to_position = write_data channel_bytes_output = instance_read_log . read ( read_to_position - previous_read_to_position ) try : channel_output = channel_bytes_output . decode () except UnicodeDecodeError : # unclear if this will ever be a problem... leaving it in this try/except for # posterity... channel_output = channel_bytes_output . decode ( errors = \"ignore\" ) # replace any output w/ the scrapli cfg replace pattern channel_output = re . sub ( pattern = SCRAPLI_CFG_SESSION_PATTERN , repl = \"__SCRAPLI_CFG_SESSION_NAME__\" , string = channel_output , ) instance_replay_session [ \"interactions\" ] . append ( { \"channel_output\" : channel_output , \"expected_channel_input\" : write_input if not redacted else \"REDACTED\" , \"expected_channel_input_redacted\" : redacted , } ) previous_read_to_position = read_to_position if previous_read_to_position != read_log_len : # we can end up w/ \"extra\" data if we dont close the connection -- as in scrapli # will have read one more thing than it wrote -- so we check to see if there is # remaining read log data, and if so add one final interaction instance_replay_session [ \"interactions\" ] . append ( { \"channel_output\" : instance_read_log . read () . decode (), \"expected_channel_input\" : None , \"expected_channel_input_redacted\" : False , } ) return instance_replay_sessions def _save ( self ) -> None : \"\"\" Save the contents of a session Args: N/A Returns: None Raises: N/A \"\"\" with open ( f \" { self . session_directory } / { self . session_name } .yaml\" , \"w\" , encoding = \"utf-8\" ) as f : YAML . indent ( mapping = 2 , sequence = 4 , offset = 2 ) YAML . dump ( self . _serialize (), f ) __aenter__ () -> None async \u00b6 Enter method for context manager Returns: Type Description None None Source code in replay/replay.py 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 async def __aenter__ ( self ) -> None : \"\"\" Enter method for context manager Args: N/A Returns: None Raises: N/A \"\"\" async def patched_open ( cls : AsyncDriver ) -> None : \"\"\" Patched AsyncDriver.open method Patched at the driver and dealing w/ the on open/auth things as this way we never have to think about which transport is being used Args: cls: scrapli Drive self Returns: None Raises: N/A \"\"\" instance_name = self . create_instance_name ( scrapli_conn = cls ) connection_profile = self . create_connection_profile ( scrapli_conn = cls ) instance_object = ScrapliReplayInstance ( replay_mode = self . replay_mode , connection_profile = connection_profile , replay_session = self . replay_session . get ( instance_name , {}), ) self . wrapped_instances [ instance_name ] = instance_object if self . replay_mode == ReplayMode . REPLAY : instance_object . setup_async_replay_mode ( scrapli_conn = cls ) else : if self . _block_network is True : # if block network is true and we got here then there is no session recorded, so # we need to skip this test pytest . skip ( \"scrapli-replay block-network is True, no session recorded, \" \"skipping test...\" ) # if we are not in replay mode, we are in record or overwrite (same/same) so setup # the record read/write channel methods and then do \"normal\" stuff instance_object . setup_async_record_mode ( scrapli_conn = cls ) await cls . transport . open () cls . _pre_open_closing_log ( closing = False ) # pylint: disable=W0212 if ( cls . transport_name in ( \"telnet\" , \"asynctelnet\" , ) and not cls . auth_bypass ): await cls . channel . channel_authenticate_telnet ( auth_username = cls . auth_username , auth_password = cls . auth_password ) if self . replay_mode == ReplayMode . RECORD : instance_object . telnet_patch_update_log ( auth_username = cls . auth_username ) if cls . on_open : await cls . on_open ( cls ) cls . _post_open_closing_log ( closing = False ) # pylint: disable=W0212 self . _patched_open = mock . patch . object ( scrapli . driver . base . async_driver . AsyncDriver , \"open\" , new = patched_open ) self . _patched_open . start () __aexit__ ( exception_type : Optional [ Type [ BaseException ]], exception_value : Optional [ BaseException ], traceback : Optional [ TracebackType ]) -> None async \u00b6 Exit method to cleanup for async context manager Parameters: Name Type Description Default exception_type Optional [ Type [ BaseException ]] exception type being raised required exception_value Optional [ BaseException ] message from exception being raised required traceback Optional [ TracebackType ] traceback from exception being raised required Returns: Type Description None None Raises: Type Description ScrapliReplayException if patched open is none for some reason Source code in replay/replay.py 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 async def __aexit__ ( self , exception_type : Optional [ Type [ BaseException ]], exception_value : Optional [ BaseException ], traceback : Optional [ TracebackType ], ) -> None : \"\"\" Exit method to cleanup for async context manager Args: exception_type: exception type being raised exception_value: message from exception being raised traceback: traceback from exception being raised Returns: None Raises: ScrapliReplayException: if patched open is none for some reason \"\"\" if not self . _patched_open : raise ScrapliReplayException ( \"patched open is None, but we are in exit... this should never happen, definitely \" \"a bug\" ) self . _patched_open . stop () if self . replay_mode in ( ReplayMode . RECORD , ReplayMode . OVERWRITE ): self . _save () __call__ ( wrapped_func : Callable [ ... , Any ]) -> Callable [ ... , Any ] \u00b6 Use ScrapliReplay as a decorator Decide if the wrapped function is sync or async and wrap that function/coroutine in context manager of self Parameters: Name Type Description Default wrapped_func Callable [..., Any ] function being decorated required Returns: Name Type Description decorate Callable [..., Any ] decorated func Source code in replay/replay.py 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 def __call__ ( self , wrapped_func : Callable [ ... , Any ]) -> Callable [ ... , Any ]: \"\"\" Use ScrapliReplay as a decorator Decide if the wrapped function is sync or async and wrap that function/coroutine in context manager of self Args: wrapped_func: function being decorated Returns: decorate: decorated func Raises: N/A \"\"\" if asyncio . iscoroutinefunction ( wrapped_func ): async def decorate ( * args : Any , ** kwargs : Any ) -> Any : async with self : return await wrapped_func ( * args , ** kwargs ) else : # ignoring type error: # \"All conditional function variants must have identical signatures\" # one is sync one is async so never going to be identical here! def decorate ( * args : Any , ** kwargs : Any ) -> Any : # type: ignore with self : return wrapped_func ( * args , ** kwargs ) return decorate __enter__ () -> None \u00b6 Enter method for context manager Returns: Type Description None None Source code in replay/replay.py 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 def __enter__ ( self ) -> None : \"\"\" Enter method for context manager Args: N/A Returns: None Raises: N/A \"\"\" def patched_open ( cls : Driver ) -> None : \"\"\" Patched Driver.open method Patched at the driver and dealing w/ the on open/auth things as this way we never have to think about which transport is being used Args: cls: scrapli Drive self Returns: None Raises: N/A \"\"\" instance_name = self . create_instance_name ( scrapli_conn = cls ) connection_profile = self . create_connection_profile ( scrapli_conn = cls ) instance_object = ScrapliReplayInstance ( replay_mode = self . replay_mode , connection_profile = connection_profile , replay_session = self . replay_session . get ( instance_name , {}), ) self . wrapped_instances [ instance_name ] = instance_object if self . replay_mode == ReplayMode . REPLAY : instance_object . setup_replay_mode ( scrapli_conn = cls ) else : if self . _block_network is True : # if block network is true and we got here then there is no session recorded, so # we need to skip this test pytest . skip ( \"scrapli-replay block-network is True, no session recorded, \" \"skipping test...\" ) # if we are not in replay mode, we are in record or overwrite (same/same) so setup # the record read/write channel methods and then do \"normal\" stuff instance_object . setup_record_mode ( scrapli_conn = cls ) cls . transport . open () cls . _pre_open_closing_log ( closing = False ) # pylint: disable=W0212 if cls . transport_name in ( \"system\" ,) and not cls . auth_bypass : cls . channel . channel_authenticate_ssh ( auth_password = cls . auth_password , auth_private_key_passphrase = cls . auth_private_key_passphrase , ) if ( cls . transport_name in ( \"telnet\" , \"asynctelnet\" , ) and not cls . auth_bypass ): cls . channel . channel_authenticate_telnet ( auth_username = cls . auth_username , auth_password = cls . auth_password ) if self . replay_mode == ReplayMode . RECORD : instance_object . telnet_patch_update_log ( auth_username = cls . auth_username ) if cls . on_open : cls . on_open ( cls ) cls . _post_open_closing_log ( closing = False ) # pylint: disable=W0212 self . _patched_open = mock . patch . object ( target = scrapli . driver . base . sync_driver . Driver , attribute = \"open\" , new = patched_open ) self . _patched_open . start () __exit__ ( exception_type : Optional [ Type [ BaseException ]], exception_value : Optional [ BaseException ], traceback : Optional [ TracebackType ]) -> None \u00b6 Exit method to cleanup for context manager Parameters: Name Type Description Default exception_type Optional [ Type [ BaseException ]] exception type being raised required exception_value Optional [ BaseException ] message from exception being raised required traceback Optional [ TracebackType ] traceback from exception being raised required Returns: Type Description None None Raises: Type Description ScrapliReplayException if patched open is none for some reason Source code in replay/replay.py 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 def __exit__ ( self , exception_type : Optional [ Type [ BaseException ]], exception_value : Optional [ BaseException ], traceback : Optional [ TracebackType ], ) -> None : \"\"\" Exit method to cleanup for context manager Args: exception_type: exception type being raised exception_value: message from exception being raised traceback: traceback from exception being raised Returns: None Raises: ScrapliReplayException: if patched open is none for some reason \"\"\" if not self . _patched_open : raise ScrapliReplayException ( \"patched open is None, but we are in exit... this should never happen, definitely \" \"a bug\" ) self . _patched_open . stop () if self . replay_mode in ( ReplayMode . RECORD , ReplayMode . OVERWRITE ): self . _save () __init__ ( * , session_directory : Optional [ str ] = None , session_name : Optional [ str ] = None , replay_mode : str = 'record' , block_network : bool = False ) -> None \u00b6 Scrapli replay Parameters: Name Type Description Default session_directory Optional [ str ] directory to write session data to None session_name Optional [ str ] name of session to write out None replay_mode str replay mode to use 'record' block_network bool if set to True, no network connections will be made, though any stored sessions will be ran normally False Returns: Type Description None None Raises: Type Description ScrapliReplayException if invalid replay mode provided Source code in replay/replay.py 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 def __init__ ( self , * , session_directory : Optional [ str ] = None , session_name : Optional [ str ] = None , replay_mode : str = \"record\" , block_network : bool = False , ) -> None : \"\"\" Scrapli replay Args: session_directory: directory to write session data to session_name: name of session to write out replay_mode: replay mode to use block_network: if set to True, no network connections will be made, though any stored sessions will be ran normally Returns: None Raises: ScrapliReplayException: if invalid replay mode provided \"\"\" if session_directory is None or not Path ( session_directory ) . is_dir (): self . session_directory = Path . cwd () else : self . session_directory = Path ( session_directory ) # session name will generally come from pytest test name, but for ad-hoc use it can be # auto-generated w/ timestamp self . session_name = ( session_name or f \"scrapli_replay_session_ { round ( datetime . now () . timestamp ()) } \" ) if replay_mode not in ( \"record\" , \"replay\" , \"overwrite\" , ): raise ScrapliReplayException ( \"replay mode invalid\" ) if replay_mode == \"record\" and self . _session_exists (): print ( \"session exists but replay mode is not set to overwrite, using replay mode 'replay'\" ) replay_mode = \"replay\" elif not self . _session_exists (): replay_mode = \"record\" self . replay_mode = ReplayMode [ replay_mode . upper ()] self . replay_session : Dict [ str , Any ] = {} if self . replay_mode == ReplayMode . REPLAY : with open ( f \" { self . session_directory } / { self . session_name } .yaml\" , \"r\" , encoding = \"utf-8\" ) as f : self . replay_session = YAML . load ( f ) # if we open a session and there are no interactions recorded for any of the hosts then # something is not right -- we will need to re-record a session if not all ( instance_session . get ( \"interactions\" , None ) for instance_session in self . replay_session . values () ): self . replay_mode = ReplayMode . RECORD self . _block_network = block_network self . _patched_open : Optional [ mock . _patch [ Any ]] = None # noqa self . wrapped_instances : Dict [ str , ScrapliReplayInstance ] = {} create_connection_profile ( scrapli_conn : Union [ AsyncDriver , Driver ]) -> ConnectionProfile staticmethod \u00b6 Record connection information Parameters: Name Type Description Default scrapli_conn Union [ AsyncDriver , Driver ] scrapli connection to fetch data from required Returns: Name Type Description ConnectionProfile ConnectionProfile recorded connection profile Source code in replay/replay.py 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 @staticmethod def create_connection_profile ( scrapli_conn : Union [ AsyncDriver , Driver ]) -> ConnectionProfile : \"\"\" Record connection information Args: scrapli_conn: scrapli connection to fetch data from Returns: ConnectionProfile: recorded connection profile Raises: N/A \"\"\" recorded_connection_profile = ConnectionProfile ( host = scrapli_conn . host , port = scrapli_conn . port , auth_username = scrapli_conn . auth_username , auth_password = bool ( scrapli_conn . auth_password ), auth_private_key = scrapli_conn . auth_private_key , auth_private_key_passphrase = bool ( scrapli_conn . auth_private_key_passphrase ), auth_bypass = scrapli_conn . auth_bypass , transport = scrapli_conn . transport_name , ) if isinstance ( scrapli_conn , NetworkDriver ): recorded_connection_profile . auth_secondary = bool ( scrapli_conn . auth_secondary ) return recorded_connection_profile create_instance_name ( scrapli_conn : Union [ AsyncDriver , Driver ]) -> str \u00b6 Create as unique as possible instance name for a given connection Since hash cant be relied on to between python executions we need to have some way to have a decent idea about what connection is what... using the host and port is maybe not enough as a user may have multiple connections to the same device in a test session. Adding in the transport might help (maybe one is ssh one is netconf or telnet), but still not 100%... Adding in the logging uid is handy, but only if the user set one, so we also will tack on an extra field basically counting how many of the same connections we've seen. We may not support multiple connections because it may be too troublesome (but users could add an arbitrary logging uid to differentiate), but we'll put it there anyway for now... Parameters: Name Type Description Default scrapli_conn Union [ AsyncDriver , Driver ] scrapli connection to fetch data from required Returns: Name Type Description str str instance name to use for the connection Source code in replay/replay.py 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 def create_instance_name ( self , scrapli_conn : Union [ AsyncDriver , Driver ]) -> str : \"\"\" Create as unique as possible instance name for a given connection Since hash cant be relied on to between python executions we need to have some way to have a decent idea about what connection is what... using the host and port is maybe not enough as a user may have multiple connections to the same device in a test session. Adding in the transport *might* help (maybe one is ssh one is netconf or telnet), but still not 100%... Adding in the logging uid is handy, but only if the user set one, so we also will tack on an extra field basically counting how many of the same connections we've seen. We *may* not support multiple connections because it may be too troublesome (but users could add an arbitrary logging uid to differentiate), but we'll put it there anyway for now... Args: scrapli_conn: scrapli connection to fetch data from Returns: str: instance name to use for the connection Raises: N/A \"\"\" instance_name = ( f \" { scrapli_conn . host } : { scrapli_conn . port } :\" f \" { scrapli_conn . transport . __class__ . __name__ } :\" f \" { scrapli_conn . logger . extra . get ( 'uid' , '' ) } \" # type:ignore ) similar_instance_names = [ inst_name for inst_name in self . wrapped_instances if inst_name . startswith ( instance_name ) ] instance_name = f \" { instance_name } : { len ( similar_instance_names ) } \" return instance_name ScrapliReplayInstance \u00b6 Source code in replay/replay.pyclass ScrapliReplayInstance : def __init__ ( self , * , replay_mode : ReplayMode , connection_profile : ConnectionProfile , replay_session : Optional [ Dict [ str , Any ]] = None , ) -> None : \"\"\" Scrapli replay Args: replay_mode: replay mode to use connection_profile: connection profile object replay_session: dict of replay session (used in replay mode, ignored in record mode) Returns: None Raises: N/A \"\"\" self . replay_mode = replay_mode self . connection_profile = connection_profile self . replay_session = replay_session or {} self . read_log = BytesIO () self . write_log : List [ Tuple [ str , bool , int ]] = [] self . _scrapli_cfg_session = \"\" def _common_replay_mode ( self ) -> Tuple [ Iterator [ str ], Iterator [ Tuple [ str , bool ]]]: \"\"\" Handle common replay mode parsing of saved session data (common between sync/async) Args: N/A Returns: Tuple[Iterator[str], Iterator[Tuple[str, bool]]]: returns the device_outputs and scrapli_inputs iterators to use in the replay read/write methods Raises: ScrapliReplayConnectionProfileError: if recorded connection profile does not match the actual connection profile \"\"\" actual_connection_profile = ConnectionProfile ( ** self . replay_session [ \"connection_profile\" ]) if actual_connection_profile != self . connection_profile : msg = \"recorded connection profile does not match current connection profile\" raise ScrapliReplayConnectionProfileError ( msg ) device_outputs = iter ( [ interaction [ \"channel_output\" ] for interaction in self . replay_session [ \"interactions\" ]] ) scrapli_inputs = iter ( [ ( interaction [ \"expected_channel_input\" ], interaction [ \"expected_channel_input_redacted\" ], ) for interaction in self . replay_session [ \"interactions\" ] ] ) return device_outputs , scrapli_inputs def setup_async_replay_mode ( self , scrapli_conn : AsyncDriver ) -> None : \"\"\" Patch scrapli Channel read/write methods in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" device_outputs , scrapli_inputs = self . _common_replay_mode () self . _patch_async_read_replay ( scrapli_conn = scrapli_conn , device_outputs = device_outputs ) self . _patch_write_replay ( scrapli_conn = scrapli_conn , scrapli_inputs = scrapli_inputs ) def setup_replay_mode ( self , scrapli_conn : Driver ) -> None : \"\"\" Patch scrapli Channel read/write methods in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/Ah \"\"\" device_outputs , scrapli_inputs = self . _common_replay_mode () self . _patch_read_replay ( scrapli_conn = scrapli_conn , device_outputs = device_outputs ) self . _patch_write_replay ( scrapli_conn = scrapli_conn , scrapli_inputs = scrapli_inputs ) def _patch_async_read_replay ( self , scrapli_conn : AsyncDriver , device_outputs : Iterator [ str ] ) -> None : \"\"\" Patch scrapli AsyncChannel read method in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from device_outputs: iterator of inputs that the read method should return for the \"fake\" connection Returns: None Raises: N/A \"\"\" async def patched_read ( cls : AsyncChannel ) -> bytes : \"\"\" Patched AsyncChannel.read method Args: cls: scrapli Channel self Returns: bytes: bytes read from teh channel Raises: ScrapliReplayException: if there are no more outputs from the session to replay \"\"\" try : buf = next ( device_outputs ) . encode () # if we see this string we know we actually need to ship out the current scrapli cfg # session name that we capture during the replay write method if b \"__SCRAPLI_CFG_SESSION_NAME__\" in buf and self . _scrapli_cfg_session : buf = self . _scrapli_cfg_session . encode () self . _scrapli_cfg_session = \"\" except StopIteration as exc : msg = \"No more device outputs to replay\" raise ScrapliReplayException ( msg ) from exc cls . logger . debug ( f \"read: { repr ( buf ) } \" ) if cls . channel_log : cls . channel_log . write ( buf ) if b \" \\x1b \" in buf . lower (): buf = cls . _strip_ansi ( buf = buf ) # pylint: disable=W0212 return buf scrapli_conn . channel . read = types . MethodType ( # type: ignore patched_read , scrapli_conn . channel ) def _patch_read_replay ( self , scrapli_conn : Driver , device_outputs : Iterator [ str ]) -> None : \"\"\" Patch scrapli Channel read method in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from device_outputs: iterator of inputs that the read method should return for the \"fake\" connection Returns: None Raises: N/A \"\"\" def patched_read ( cls : Channel ) -> bytes : \"\"\" Patched Channel.read method Args: cls: scrapli Channel self Returns: bytes: bytes read form the channel Raises: ScrapliReplayException: if there are no more outputs from the session to replay \"\"\" try : buf = next ( device_outputs ) . encode () # if we see this string we know we actually need to ship out the current scrapli cfg # session name that we capture during the replay write method if b \"__SCRAPLI_CFG_SESSION_NAME__\" in buf and self . _scrapli_cfg_session : buf = self . _scrapli_cfg_session . encode () self . _scrapli_cfg_session = \"\" except StopIteration as exc : msg = \"No more device outputs to replay\" raise ScrapliReplayException ( msg ) from exc cls . logger . debug ( f \"read: { repr ( buf ) } \" ) if cls . channel_log : cls . channel_log . write ( buf ) if b \" \\x1b \" in buf . lower (): buf = cls . _strip_ansi ( buf = buf ) # pylint: disable=W0212 return buf scrapli_conn . channel . read = types . MethodType ( # type: ignore patched_read , scrapli_conn . channel ) def _patch_write_replay ( self , scrapli_conn : Union [ AsyncDriver , Driver ], scrapli_inputs : Iterator [ Tuple [ str , bool ]] ) -> None : \"\"\" Patch scrapli Channel write method in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from scrapli_inputs: inputs to assert are true that scrapli should be sending Returns: None Raises: N/A \"\"\" def patched_write ( cls : BaseChannel , channel_input : str , redacted : bool = False ) -> None : \"\"\" Patched Channel.write method Args: cls: scrapli Channel self channel_input: input to send to the channel redacted: if input should be redacted from log Returns: None Raises: ScrapliReplayExpectedInputError: if actual input does not match expected input \"\"\" expected_input , expected_redacted = next ( scrapli_inputs ) if redacted is True : _channel_input = \"REDACTED\" elif re . search ( pattern = SCRAPLI_CFG_SESSION_PATTERN , string = channel_input ): _channel_input = re . sub ( pattern = SCRAPLI_CFG_SESSION_PATTERN , string = channel_input , repl = \"__SCRAPLI_CFG_SESSION_NAME__\" , ) # if we see a scrapli cfg session in the replay we have to store it as it has a # timestamp -- we need to replay this back so scrapli doesnt break self . _scrapli_cfg_session = channel_input else : _channel_input = channel_input if not all (( expected_input == _channel_input , expected_redacted == redacted )): msg = \"expected channel input does not match actual channel input\" raise ScrapliReplayExpectedInputError ( msg ) log_output = \"REDACTED\" if redacted else repr ( channel_input ) cls . logger . debug ( f \"write: { log_output } \" ) scrapli_conn . channel . write = types . MethodType ( # type: ignore patched_write , scrapli_conn . channel ) def setup_async_record_mode ( self , scrapli_conn : AsyncDriver ) -> None : \"\"\" Patch scrapli AsyncChannel read and write methods in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" self . _patch_async_read_record ( scrapli_conn = scrapli_conn ) self . _patch_write_record ( scrapli_conn = scrapli_conn ) def setup_record_mode ( self , scrapli_conn : Driver ) -> None : \"\"\" Patch scrapli Channel read and write methods in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" self . _patch_read_record ( scrapli_conn = scrapli_conn ) self . _patch_write_record ( scrapli_conn = scrapli_conn ) def _patch_async_read_record ( self , scrapli_conn : AsyncDriver ) -> None : \"\"\" Patch scrapli AsyncChannel read method in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" async def patched_read ( cls : AsyncChannel ) -> bytes : \"\"\" Patched Channel.read method Args: cls: scrapli Channel self Returns: bytes: bytes read Raises: N/A \"\"\" buf : bytes = await cls . transport . read () buf = buf . replace ( b \" \\r \" , b \"\" ) cls . logger . debug ( f \"read: { repr ( buf ) } \" ) if cls . channel_log : cls . channel_log . write ( buf ) if b \" \\x1b \" in buf . lower (): buf = cls . _strip_ansi ( buf = buf ) # pylint: disable=W0212 self . read_log . write ( buf ) return buf scrapli_conn . channel . read = types . MethodType ( # type: ignore patched_read , scrapli_conn . channel ) def _patch_read_record ( self , scrapli_conn : Driver ) -> None : \"\"\" Patch scrapli Channel read method in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" def patched_read ( cls : Channel ) -> bytes : \"\"\" Patched Channel.read method Args: cls: scrapli Channel self Returns: bytes: bytes read Raises: N/A \"\"\" buf : bytes = cls . transport . read () buf = buf . replace ( b \" \\r \" , b \"\" ) cls . logger . debug ( f \"read: { repr ( buf ) } \" ) if cls . channel_log : cls . channel_log . write ( buf ) if b \" \\x1b \" in buf . lower (): buf = cls . _strip_ansi ( buf = buf ) # pylint: disable=W0212 self . read_log . write ( buf ) return buf scrapli_conn . channel . read = types . MethodType ( # type: ignore patched_read , scrapli_conn . channel ) def _patch_write_record ( self , scrapli_conn : Union [ AsyncDriver , Driver ], ) -> None : \"\"\" Patch scrapli Channel write method in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" def patched_write ( cls : BaseChannel , channel_input : str , redacted : bool = False ) -> None : \"\"\" Patched Channel.write method Args: cls: scrapli Channel self channel_input: input to send to the channel redacted: if input should be redacted from log Returns: None Raises: N/A \"\"\" _channel_input = re . sub ( pattern = SCRAPLI_CFG_SESSION_PATTERN , repl = \"__SCRAPLI_CFG_SESSION_NAME__\" , string = channel_input , ) self . write_log . append (( _channel_input , redacted , self . read_log . tell ())) log_output = \"REDACTED\" if redacted else repr ( channel_input ) cls . logger . debug ( f \"write: { log_output } \" ) cls . transport . write ( channel_input = channel_input . encode ()) scrapli_conn . channel . write = types . MethodType ( # type: ignore patched_write , scrapli_conn . channel ) def telnet_patch_update_log ( self , auth_username : str ) -> None : \"\"\" Patch the read log for telnet connections This method removes \"leading dead space\" and any extra returns/dead space between user and password and the first prompt/banner showing up. This only is necessary for telnet conns. Args: auth_username: username from the patched scrapli object Returns: None Raises: N/A \"\"\" updatedwrite_log = [] for write_log_entry in self . write_log : updatedwrite_log . append ( write_log_entry ) if write_log_entry [ 1 ] is True : break # append the *last* entry in the write log back to the updated list -- this will # get us reading up through the banner/initial prompt updatedwrite_log . append ( self . write_log [ - 1 ]) # for telnet connections we may have some \"dead space\" (empty reads) at the # beginning of the interactions, get rid of that as it is not needed here index = 0 for index , write_log_entry in enumerate ( updatedwrite_log ): if write_log_entry [ 0 ] == auth_username : # we've got the index of the updated write log starting at the username # we know we can slice everything off before this now break updatedwrite_log = updatedwrite_log [ index :] # finally update the replay class write log w/ our modified version self . write_log = updatedwrite_log __init__ ( * , replay_mode : ReplayMode , connection_profile : ConnectionProfile , replay_session : Optional [ Dict [ str , Any ]] = None ) -> None \u00b6 Scrapli replay Parameters: Name Type Description Default replay_mode ReplayMode replay mode to use required connection_profile ConnectionProfile connection profile object required replay_session Optional [ Dict [ str , Any ]] dict of replay session (used in replay mode, ignored in record mode) None Returns: Type Description None None Source code in replay/replay.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def __init__ ( self , * , replay_mode : ReplayMode , connection_profile : ConnectionProfile , replay_session : Optional [ Dict [ str , Any ]] = None , ) -> None : \"\"\" Scrapli replay Args: replay_mode: replay mode to use connection_profile: connection profile object replay_session: dict of replay session (used in replay mode, ignored in record mode) Returns: None Raises: N/A \"\"\" self . replay_mode = replay_mode self . connection_profile = connection_profile self . replay_session = replay_session or {} self . read_log = BytesIO () self . write_log : List [ Tuple [ str , bool , int ]] = [] self . _scrapli_cfg_session = \"\" setup_async_record_mode ( scrapli_conn : AsyncDriver ) -> None \u00b6 Patch scrapli AsyncChannel read and write methods in \"record\" mode Parameters: Name Type Description Default scrapli_conn AsyncDriver scrapli connection to fetch data from required Returns: Type Description None None Source code in replay/replay.py 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 def setup_async_record_mode ( self , scrapli_conn : AsyncDriver ) -> None : \"\"\" Patch scrapli AsyncChannel read and write methods in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" self . _patch_async_read_record ( scrapli_conn = scrapli_conn ) self . _patch_write_record ( scrapli_conn = scrapli_conn ) setup_async_replay_mode ( scrapli_conn : AsyncDriver ) -> None \u00b6 Patch scrapli Channel read/write methods in \"replay\" mode Parameters: Name Type Description Default scrapli_conn AsyncDriver scrapli connection to fetch data from required Returns: Type Description None None Source code in replay/replay.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def setup_async_replay_mode ( self , scrapli_conn : AsyncDriver ) -> None : \"\"\" Patch scrapli Channel read/write methods in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" device_outputs , scrapli_inputs = self . _common_replay_mode () self . _patch_async_read_replay ( scrapli_conn = scrapli_conn , device_outputs = device_outputs ) self . _patch_write_replay ( scrapli_conn = scrapli_conn , scrapli_inputs = scrapli_inputs ) setup_record_mode ( scrapli_conn : Driver ) -> None \u00b6 Patch scrapli Channel read and write methods in \"record\" mode Parameters: Name Type Description Default scrapli_conn Driver scrapli connection to fetch data from required Returns: Type Description None None Source code in replay/replay.py 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 def setup_record_mode ( self , scrapli_conn : Driver ) -> None : \"\"\" Patch scrapli Channel read and write methods in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" self . _patch_read_record ( scrapli_conn = scrapli_conn ) self . _patch_write_record ( scrapli_conn = scrapli_conn ) setup_replay_mode ( scrapli_conn : Driver ) -> None \u00b6 Patch scrapli Channel read/write methods in \"replay\" mode Parameters: Name Type Description Default scrapli_conn Driver scrapli connection to fetch data from required Returns: Type Description None None Source code in replay/replay.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def setup_replay_mode ( self , scrapli_conn : Driver ) -> None : \"\"\" Patch scrapli Channel read/write methods in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/Ah \"\"\" device_outputs , scrapli_inputs = self . _common_replay_mode () self . _patch_read_replay ( scrapli_conn = scrapli_conn , device_outputs = device_outputs ) self . _patch_write_replay ( scrapli_conn = scrapli_conn , scrapli_inputs = scrapli_inputs ) telnet_patch_update_log ( auth_username : str ) -> None \u00b6 Patch the read log for telnet connections This method removes \"leading dead space\" and any extra returns/dead space between user and password and the first prompt/banner showing up. This only is necessary for telnet conns. Parameters: Name Type Description Default auth_username str username from the patched scrapli object required Returns: Type Description None None Source code in replay/replay.py 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 def telnet_patch_update_log ( self , auth_username : str ) -> None : \"\"\" Patch the read log for telnet connections This method removes \"leading dead space\" and any extra returns/dead space between user and password and the first prompt/banner showing up. This only is necessary for telnet conns. Args: auth_username: username from the patched scrapli object Returns: None Raises: N/A \"\"\" updatedwrite_log = [] for write_log_entry in self . write_log : updatedwrite_log . append ( write_log_entry ) if write_log_entry [ 1 ] is True : break # append the *last* entry in the write log back to the updated list -- this will # get us reading up through the banner/initial prompt updatedwrite_log . append ( self . write_log [ - 1 ]) # for telnet connections we may have some \"dead space\" (empty reads) at the # beginning of the interactions, get rid of that as it is not needed here index = 0 for index , write_log_entry in enumerate ( updatedwrite_log ): if write_log_entry [ 0 ] == auth_username : # we've got the index of the updated write log starting at the username # we know we can slice everything off before this now break updatedwrite_log = updatedwrite_log [ index :] # finally update the replay class write log w/ our modified version self . write_log = updatedwrite_log","title":"Replay"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplay","text":"Source code in replay/replay.pyclass ScrapliReplay : def __init__ ( self , * , session_directory : Optional [ str ] = None , session_name : Optional [ str ] = None , replay_mode : str = \"record\" , block_network : bool = False , ) -> None : \"\"\" Scrapli replay Args: session_directory: directory to write session data to session_name: name of session to write out replay_mode: replay mode to use block_network: if set to True, no network connections will be made, though any stored sessions will be ran normally Returns: None Raises: ScrapliReplayException: if invalid replay mode provided \"\"\" if session_directory is None or not Path ( session_directory ) . is_dir (): self . session_directory = Path . cwd () else : self . session_directory = Path ( session_directory ) # session name will generally come from pytest test name, but for ad-hoc use it can be # auto-generated w/ timestamp self . session_name = ( session_name or f \"scrapli_replay_session_ { round ( datetime . now () . timestamp ()) } \" ) if replay_mode not in ( \"record\" , \"replay\" , \"overwrite\" , ): raise ScrapliReplayException ( \"replay mode invalid\" ) if replay_mode == \"record\" and self . _session_exists (): print ( \"session exists but replay mode is not set to overwrite, using replay mode 'replay'\" ) replay_mode = \"replay\" elif not self . _session_exists (): replay_mode = \"record\" self . replay_mode = ReplayMode [ replay_mode . upper ()] self . replay_session : Dict [ str , Any ] = {} if self . replay_mode == ReplayMode . REPLAY : with open ( f \" { self . session_directory } / { self . session_name } .yaml\" , \"r\" , encoding = \"utf-8\" ) as f : self . replay_session = YAML . load ( f ) # if we open a session and there are no interactions recorded for any of the hosts then # something is not right -- we will need to re-record a session if not all ( instance_session . get ( \"interactions\" , None ) for instance_session in self . replay_session . values () ): self . replay_mode = ReplayMode . RECORD self . _block_network = block_network self . _patched_open : Optional [ mock . _patch [ Any ]] = None # noqa self . wrapped_instances : Dict [ str , ScrapliReplayInstance ] = {} def __call__ ( self , wrapped_func : Callable [ ... , Any ]) -> Callable [ ... , Any ]: \"\"\" Use ScrapliReplay as a decorator Decide if the wrapped function is sync or async and wrap that function/coroutine in context manager of self Args: wrapped_func: function being decorated Returns: decorate: decorated func Raises: N/A \"\"\" if asyncio . iscoroutinefunction ( wrapped_func ): async def decorate ( * args : Any , ** kwargs : Any ) -> Any : async with self : return await wrapped_func ( * args , ** kwargs ) else : # ignoring type error: # \"All conditional function variants must have identical signatures\" # one is sync one is async so never going to be identical here! def decorate ( * args : Any , ** kwargs : Any ) -> Any : # type: ignore with self : return wrapped_func ( * args , ** kwargs ) return decorate def __enter__ ( self ) -> None : \"\"\" Enter method for context manager Args: N/A Returns: None Raises: N/A \"\"\" def patched_open ( cls : Driver ) -> None : \"\"\" Patched Driver.open method Patched at the driver and dealing w/ the on open/auth things as this way we never have to think about which transport is being used Args: cls: scrapli Drive self Returns: None Raises: N/A \"\"\" instance_name = self . create_instance_name ( scrapli_conn = cls ) connection_profile = self . create_connection_profile ( scrapli_conn = cls ) instance_object = ScrapliReplayInstance ( replay_mode = self . replay_mode , connection_profile = connection_profile , replay_session = self . replay_session . get ( instance_name , {}), ) self . wrapped_instances [ instance_name ] = instance_object if self . replay_mode == ReplayMode . REPLAY : instance_object . setup_replay_mode ( scrapli_conn = cls ) else : if self . _block_network is True : # if block network is true and we got here then there is no session recorded, so # we need to skip this test pytest . skip ( \"scrapli-replay block-network is True, no session recorded, \" \"skipping test...\" ) # if we are not in replay mode, we are in record or overwrite (same/same) so setup # the record read/write channel methods and then do \"normal\" stuff instance_object . setup_record_mode ( scrapli_conn = cls ) cls . transport . open () cls . _pre_open_closing_log ( closing = False ) # pylint: disable=W0212 if cls . transport_name in ( \"system\" ,) and not cls . auth_bypass : cls . channel . channel_authenticate_ssh ( auth_password = cls . auth_password , auth_private_key_passphrase = cls . auth_private_key_passphrase , ) if ( cls . transport_name in ( \"telnet\" , \"asynctelnet\" , ) and not cls . auth_bypass ): cls . channel . channel_authenticate_telnet ( auth_username = cls . auth_username , auth_password = cls . auth_password ) if self . replay_mode == ReplayMode . RECORD : instance_object . telnet_patch_update_log ( auth_username = cls . auth_username ) if cls . on_open : cls . on_open ( cls ) cls . _post_open_closing_log ( closing = False ) # pylint: disable=W0212 self . _patched_open = mock . patch . object ( target = scrapli . driver . base . sync_driver . Driver , attribute = \"open\" , new = patched_open ) self . _patched_open . start () def __exit__ ( self , exception_type : Optional [ Type [ BaseException ]], exception_value : Optional [ BaseException ], traceback : Optional [ TracebackType ], ) -> None : \"\"\" Exit method to cleanup for context manager Args: exception_type: exception type being raised exception_value: message from exception being raised traceback: traceback from exception being raised Returns: None Raises: ScrapliReplayException: if patched open is none for some reason \"\"\" if not self . _patched_open : raise ScrapliReplayException ( \"patched open is None, but we are in exit... this should never happen, definitely \" \"a bug\" ) self . _patched_open . stop () if self . replay_mode in ( ReplayMode . RECORD , ReplayMode . OVERWRITE ): self . _save () async def __aenter__ ( self ) -> None : \"\"\" Enter method for context manager Args: N/A Returns: None Raises: N/A \"\"\" async def patched_open ( cls : AsyncDriver ) -> None : \"\"\" Patched AsyncDriver.open method Patched at the driver and dealing w/ the on open/auth things as this way we never have to think about which transport is being used Args: cls: scrapli Drive self Returns: None Raises: N/A \"\"\" instance_name = self . create_instance_name ( scrapli_conn = cls ) connection_profile = self . create_connection_profile ( scrapli_conn = cls ) instance_object = ScrapliReplayInstance ( replay_mode = self . replay_mode , connection_profile = connection_profile , replay_session = self . replay_session . get ( instance_name , {}), ) self . wrapped_instances [ instance_name ] = instance_object if self . replay_mode == ReplayMode . REPLAY : instance_object . setup_async_replay_mode ( scrapli_conn = cls ) else : if self . _block_network is True : # if block network is true and we got here then there is no session recorded, so # we need to skip this test pytest . skip ( \"scrapli-replay block-network is True, no session recorded, \" \"skipping test...\" ) # if we are not in replay mode, we are in record or overwrite (same/same) so setup # the record read/write channel methods and then do \"normal\" stuff instance_object . setup_async_record_mode ( scrapli_conn = cls ) await cls . transport . open () cls . _pre_open_closing_log ( closing = False ) # pylint: disable=W0212 if ( cls . transport_name in ( \"telnet\" , \"asynctelnet\" , ) and not cls . auth_bypass ): await cls . channel . channel_authenticate_telnet ( auth_username = cls . auth_username , auth_password = cls . auth_password ) if self . replay_mode == ReplayMode . RECORD : instance_object . telnet_patch_update_log ( auth_username = cls . auth_username ) if cls . on_open : await cls . on_open ( cls ) cls . _post_open_closing_log ( closing = False ) # pylint: disable=W0212 self . _patched_open = mock . patch . object ( scrapli . driver . base . async_driver . AsyncDriver , \"open\" , new = patched_open ) self . _patched_open . start () async def __aexit__ ( self , exception_type : Optional [ Type [ BaseException ]], exception_value : Optional [ BaseException ], traceback : Optional [ TracebackType ], ) -> None : \"\"\" Exit method to cleanup for async context manager Args: exception_type: exception type being raised exception_value: message from exception being raised traceback: traceback from exception being raised Returns: None Raises: ScrapliReplayException: if patched open is none for some reason \"\"\" if not self . _patched_open : raise ScrapliReplayException ( \"patched open is None, but we are in exit... this should never happen, definitely \" \"a bug\" ) self . _patched_open . stop () if self . replay_mode in ( ReplayMode . RECORD , ReplayMode . OVERWRITE ): self . _save () def create_instance_name ( self , scrapli_conn : Union [ AsyncDriver , Driver ]) -> str : \"\"\" Create as unique as possible instance name for a given connection Since hash cant be relied on to between python executions we need to have some way to have a decent idea about what connection is what... using the host and port is maybe not enough as a user may have multiple connections to the same device in a test session. Adding in the transport *might* help (maybe one is ssh one is netconf or telnet), but still not 100%... Adding in the logging uid is handy, but only if the user set one, so we also will tack on an extra field basically counting how many of the same connections we've seen. We *may* not support multiple connections because it may be too troublesome (but users could add an arbitrary logging uid to differentiate), but we'll put it there anyway for now... Args: scrapli_conn: scrapli connection to fetch data from Returns: str: instance name to use for the connection Raises: N/A \"\"\" instance_name = ( f \" { scrapli_conn . host } : { scrapli_conn . port } :\" f \" { scrapli_conn . transport . __class__ . __name__ } :\" f \" { scrapli_conn . logger . extra . get ( 'uid' , '' ) } \" # type:ignore ) similar_instance_names = [ inst_name for inst_name in self . wrapped_instances if inst_name . startswith ( instance_name ) ] instance_name = f \" { instance_name } : { len ( similar_instance_names ) } \" return instance_name @staticmethod def create_connection_profile ( scrapli_conn : Union [ AsyncDriver , Driver ]) -> ConnectionProfile : \"\"\" Record connection information Args: scrapli_conn: scrapli connection to fetch data from Returns: ConnectionProfile: recorded connection profile Raises: N/A \"\"\" recorded_connection_profile = ConnectionProfile ( host = scrapli_conn . host , port = scrapli_conn . port , auth_username = scrapli_conn . auth_username , auth_password = bool ( scrapli_conn . auth_password ), auth_private_key = scrapli_conn . auth_private_key , auth_private_key_passphrase = bool ( scrapli_conn . auth_private_key_passphrase ), auth_bypass = scrapli_conn . auth_bypass , transport = scrapli_conn . transport_name , ) if isinstance ( scrapli_conn , NetworkDriver ): recorded_connection_profile . auth_secondary = bool ( scrapli_conn . auth_secondary ) return recorded_connection_profile def _session_exists ( self ) -> bool : \"\"\" Check if a session file already exists Args: N/A Returns: bool: Raises: N/A \"\"\" if Path ( f \" { self . session_directory } / { self . session_name } .yaml\" ) . is_file (): return True return False def _serialize ( self ) -> Dict [ str , Any ]: \"\"\" Serialize in memory session data into a yaml-friendly output Args: N/A Returns: None Raises: N/A \"\"\" instance_replay_sessions = {} for instance_name , replay_instance in self . wrapped_instances . items (): instance_read_log = replay_instance . read_log instance_write_log = replay_instance . write_log read_log_len = instance_read_log . tell () instance_read_log . seek ( 0 ) instance_replay_session : Dict [ str , Any ] = {} instance_replay_sessions [ instance_name ] = instance_replay_session try : instance_replay_session [ \"connection_profile\" ] = asdict ( replay_instance . connection_profile ) except TypeError : # connection was already open so we couldn't patch it instance_replay_session [ \"connection_profile\" ] = {} instance_replay_session [ \"interactions\" ] = [] # all things after the \"initial output\" is an \"interaction\" previous_read_to_position = 0 for write_data in instance_write_log : write_input , redacted , read_to_position = write_data channel_bytes_output = instance_read_log . read ( read_to_position - previous_read_to_position ) try : channel_output = channel_bytes_output . decode () except UnicodeDecodeError : # unclear if this will ever be a problem... leaving it in this try/except for # posterity... channel_output = channel_bytes_output . decode ( errors = \"ignore\" ) # replace any output w/ the scrapli cfg replace pattern channel_output = re . sub ( pattern = SCRAPLI_CFG_SESSION_PATTERN , repl = \"__SCRAPLI_CFG_SESSION_NAME__\" , string = channel_output , ) instance_replay_session [ \"interactions\" ] . append ( { \"channel_output\" : channel_output , \"expected_channel_input\" : write_input if not redacted else \"REDACTED\" , \"expected_channel_input_redacted\" : redacted , } ) previous_read_to_position = read_to_position if previous_read_to_position != read_log_len : # we can end up w/ \"extra\" data if we dont close the connection -- as in scrapli # will have read one more thing than it wrote -- so we check to see if there is # remaining read log data, and if so add one final interaction instance_replay_session [ \"interactions\" ] . append ( { \"channel_output\" : instance_read_log . read () . decode (), \"expected_channel_input\" : None , \"expected_channel_input_redacted\" : False , } ) return instance_replay_sessions def _save ( self ) -> None : \"\"\" Save the contents of a session Args: N/A Returns: None Raises: N/A \"\"\" with open ( f \" { self . session_directory } / { self . session_name } .yaml\" , \"w\" , encoding = \"utf-8\" ) as f : YAML . indent ( mapping = 2 , sequence = 4 , offset = 2 ) YAML . dump ( self . _serialize (), f )","title":"ScrapliReplay"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplay.__aenter__","text":"Enter method for context manager Returns: Type Description None None Source code in replay/replay.py 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 async def __aenter__ ( self ) -> None : \"\"\" Enter method for context manager Args: N/A Returns: None Raises: N/A \"\"\" async def patched_open ( cls : AsyncDriver ) -> None : \"\"\" Patched AsyncDriver.open method Patched at the driver and dealing w/ the on open/auth things as this way we never have to think about which transport is being used Args: cls: scrapli Drive self Returns: None Raises: N/A \"\"\" instance_name = self . create_instance_name ( scrapli_conn = cls ) connection_profile = self . create_connection_profile ( scrapli_conn = cls ) instance_object = ScrapliReplayInstance ( replay_mode = self . replay_mode , connection_profile = connection_profile , replay_session = self . replay_session . get ( instance_name , {}), ) self . wrapped_instances [ instance_name ] = instance_object if self . replay_mode == ReplayMode . REPLAY : instance_object . setup_async_replay_mode ( scrapli_conn = cls ) else : if self . _block_network is True : # if block network is true and we got here then there is no session recorded, so # we need to skip this test pytest . skip ( \"scrapli-replay block-network is True, no session recorded, \" \"skipping test...\" ) # if we are not in replay mode, we are in record or overwrite (same/same) so setup # the record read/write channel methods and then do \"normal\" stuff instance_object . setup_async_record_mode ( scrapli_conn = cls ) await cls . transport . open () cls . _pre_open_closing_log ( closing = False ) # pylint: disable=W0212 if ( cls . transport_name in ( \"telnet\" , \"asynctelnet\" , ) and not cls . auth_bypass ): await cls . channel . channel_authenticate_telnet ( auth_username = cls . auth_username , auth_password = cls . auth_password ) if self . replay_mode == ReplayMode . RECORD : instance_object . telnet_patch_update_log ( auth_username = cls . auth_username ) if cls . on_open : await cls . on_open ( cls ) cls . _post_open_closing_log ( closing = False ) # pylint: disable=W0212 self . _patched_open = mock . patch . object ( scrapli . driver . base . async_driver . AsyncDriver , \"open\" , new = patched_open ) self . _patched_open . start ()","title":"__aenter__()"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplay.__aexit__","text":"Exit method to cleanup for async context manager Parameters: Name Type Description Default exception_type Optional [ Type [ BaseException ]] exception type being raised required exception_value Optional [ BaseException ] message from exception being raised required traceback Optional [ TracebackType ] traceback from exception being raised required Returns: Type Description None None Raises: Type Description ScrapliReplayException if patched open is none for some reason Source code in replay/replay.py 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 async def __aexit__ ( self , exception_type : Optional [ Type [ BaseException ]], exception_value : Optional [ BaseException ], traceback : Optional [ TracebackType ], ) -> None : \"\"\" Exit method to cleanup for async context manager Args: exception_type: exception type being raised exception_value: message from exception being raised traceback: traceback from exception being raised Returns: None Raises: ScrapliReplayException: if patched open is none for some reason \"\"\" if not self . _patched_open : raise ScrapliReplayException ( \"patched open is None, but we are in exit... this should never happen, definitely \" \"a bug\" ) self . _patched_open . stop () if self . replay_mode in ( ReplayMode . RECORD , ReplayMode . OVERWRITE ): self . _save ()","title":"__aexit__()"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplay.__call__","text":"Use ScrapliReplay as a decorator Decide if the wrapped function is sync or async and wrap that function/coroutine in context manager of self Parameters: Name Type Description Default wrapped_func Callable [..., Any ] function being decorated required Returns: Name Type Description decorate Callable [..., Any ] decorated func Source code in replay/replay.py 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 def __call__ ( self , wrapped_func : Callable [ ... , Any ]) -> Callable [ ... , Any ]: \"\"\" Use ScrapliReplay as a decorator Decide if the wrapped function is sync or async and wrap that function/coroutine in context manager of self Args: wrapped_func: function being decorated Returns: decorate: decorated func Raises: N/A \"\"\" if asyncio . iscoroutinefunction ( wrapped_func ): async def decorate ( * args : Any , ** kwargs : Any ) -> Any : async with self : return await wrapped_func ( * args , ** kwargs ) else : # ignoring type error: # \"All conditional function variants must have identical signatures\" # one is sync one is async so never going to be identical here! def decorate ( * args : Any , ** kwargs : Any ) -> Any : # type: ignore with self : return wrapped_func ( * args , ** kwargs ) return decorate","title":"__call__()"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplay.__enter__","text":"Enter method for context manager Returns: Type Description None None Source code in replay/replay.py 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 def __enter__ ( self ) -> None : \"\"\" Enter method for context manager Args: N/A Returns: None Raises: N/A \"\"\" def patched_open ( cls : Driver ) -> None : \"\"\" Patched Driver.open method Patched at the driver and dealing w/ the on open/auth things as this way we never have to think about which transport is being used Args: cls: scrapli Drive self Returns: None Raises: N/A \"\"\" instance_name = self . create_instance_name ( scrapli_conn = cls ) connection_profile = self . create_connection_profile ( scrapli_conn = cls ) instance_object = ScrapliReplayInstance ( replay_mode = self . replay_mode , connection_profile = connection_profile , replay_session = self . replay_session . get ( instance_name , {}), ) self . wrapped_instances [ instance_name ] = instance_object if self . replay_mode == ReplayMode . REPLAY : instance_object . setup_replay_mode ( scrapli_conn = cls ) else : if self . _block_network is True : # if block network is true and we got here then there is no session recorded, so # we need to skip this test pytest . skip ( \"scrapli-replay block-network is True, no session recorded, \" \"skipping test...\" ) # if we are not in replay mode, we are in record or overwrite (same/same) so setup # the record read/write channel methods and then do \"normal\" stuff instance_object . setup_record_mode ( scrapli_conn = cls ) cls . transport . open () cls . _pre_open_closing_log ( closing = False ) # pylint: disable=W0212 if cls . transport_name in ( \"system\" ,) and not cls . auth_bypass : cls . channel . channel_authenticate_ssh ( auth_password = cls . auth_password , auth_private_key_passphrase = cls . auth_private_key_passphrase , ) if ( cls . transport_name in ( \"telnet\" , \"asynctelnet\" , ) and not cls . auth_bypass ): cls . channel . channel_authenticate_telnet ( auth_username = cls . auth_username , auth_password = cls . auth_password ) if self . replay_mode == ReplayMode . RECORD : instance_object . telnet_patch_update_log ( auth_username = cls . auth_username ) if cls . on_open : cls . on_open ( cls ) cls . _post_open_closing_log ( closing = False ) # pylint: disable=W0212 self . _patched_open = mock . patch . object ( target = scrapli . driver . base . sync_driver . Driver , attribute = \"open\" , new = patched_open ) self . _patched_open . start ()","title":"__enter__()"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplay.__exit__","text":"Exit method to cleanup for context manager Parameters: Name Type Description Default exception_type Optional [ Type [ BaseException ]] exception type being raised required exception_value Optional [ BaseException ] message from exception being raised required traceback Optional [ TracebackType ] traceback from exception being raised required Returns: Type Description None None Raises: Type Description ScrapliReplayException if patched open is none for some reason Source code in replay/replay.py 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 def __exit__ ( self , exception_type : Optional [ Type [ BaseException ]], exception_value : Optional [ BaseException ], traceback : Optional [ TracebackType ], ) -> None : \"\"\" Exit method to cleanup for context manager Args: exception_type: exception type being raised exception_value: message from exception being raised traceback: traceback from exception being raised Returns: None Raises: ScrapliReplayException: if patched open is none for some reason \"\"\" if not self . _patched_open : raise ScrapliReplayException ( \"patched open is None, but we are in exit... this should never happen, definitely \" \"a bug\" ) self . _patched_open . stop () if self . replay_mode in ( ReplayMode . RECORD , ReplayMode . OVERWRITE ): self . _save ()","title":"__exit__()"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplay.__init__","text":"Scrapli replay Parameters: Name Type Description Default session_directory Optional [ str ] directory to write session data to None session_name Optional [ str ] name of session to write out None replay_mode str replay mode to use 'record' block_network bool if set to True, no network connections will be made, though any stored sessions will be ran normally False Returns: Type Description None None Raises: Type Description ScrapliReplayException if invalid replay mode provided Source code in replay/replay.py 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 def __init__ ( self , * , session_directory : Optional [ str ] = None , session_name : Optional [ str ] = None , replay_mode : str = \"record\" , block_network : bool = False , ) -> None : \"\"\" Scrapli replay Args: session_directory: directory to write session data to session_name: name of session to write out replay_mode: replay mode to use block_network: if set to True, no network connections will be made, though any stored sessions will be ran normally Returns: None Raises: ScrapliReplayException: if invalid replay mode provided \"\"\" if session_directory is None or not Path ( session_directory ) . is_dir (): self . session_directory = Path . cwd () else : self . session_directory = Path ( session_directory ) # session name will generally come from pytest test name, but for ad-hoc use it can be # auto-generated w/ timestamp self . session_name = ( session_name or f \"scrapli_replay_session_ { round ( datetime . now () . timestamp ()) } \" ) if replay_mode not in ( \"record\" , \"replay\" , \"overwrite\" , ): raise ScrapliReplayException ( \"replay mode invalid\" ) if replay_mode == \"record\" and self . _session_exists (): print ( \"session exists but replay mode is not set to overwrite, using replay mode 'replay'\" ) replay_mode = \"replay\" elif not self . _session_exists (): replay_mode = \"record\" self . replay_mode = ReplayMode [ replay_mode . upper ()] self . replay_session : Dict [ str , Any ] = {} if self . replay_mode == ReplayMode . REPLAY : with open ( f \" { self . session_directory } / { self . session_name } .yaml\" , \"r\" , encoding = \"utf-8\" ) as f : self . replay_session = YAML . load ( f ) # if we open a session and there are no interactions recorded for any of the hosts then # something is not right -- we will need to re-record a session if not all ( instance_session . get ( \"interactions\" , None ) for instance_session in self . replay_session . values () ): self . replay_mode = ReplayMode . RECORD self . _block_network = block_network self . _patched_open : Optional [ mock . _patch [ Any ]] = None # noqa self . wrapped_instances : Dict [ str , ScrapliReplayInstance ] = {}","title":"__init__()"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplay.create_connection_profile","text":"Record connection information Parameters: Name Type Description Default scrapli_conn Union [ AsyncDriver , Driver ] scrapli connection to fetch data from required Returns: Name Type Description ConnectionProfile ConnectionProfile recorded connection profile Source code in replay/replay.py 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 @staticmethod def create_connection_profile ( scrapli_conn : Union [ AsyncDriver , Driver ]) -> ConnectionProfile : \"\"\" Record connection information Args: scrapli_conn: scrapli connection to fetch data from Returns: ConnectionProfile: recorded connection profile Raises: N/A \"\"\" recorded_connection_profile = ConnectionProfile ( host = scrapli_conn . host , port = scrapli_conn . port , auth_username = scrapli_conn . auth_username , auth_password = bool ( scrapli_conn . auth_password ), auth_private_key = scrapli_conn . auth_private_key , auth_private_key_passphrase = bool ( scrapli_conn . auth_private_key_passphrase ), auth_bypass = scrapli_conn . auth_bypass , transport = scrapli_conn . transport_name , ) if isinstance ( scrapli_conn , NetworkDriver ): recorded_connection_profile . auth_secondary = bool ( scrapli_conn . auth_secondary ) return recorded_connection_profile","title":"create_connection_profile()"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplay.create_instance_name","text":"Create as unique as possible instance name for a given connection Since hash cant be relied on to between python executions we need to have some way to have a decent idea about what connection is what... using the host and port is maybe not enough as a user may have multiple connections to the same device in a test session. Adding in the transport might help (maybe one is ssh one is netconf or telnet), but still not 100%... Adding in the logging uid is handy, but only if the user set one, so we also will tack on an extra field basically counting how many of the same connections we've seen. We may not support multiple connections because it may be too troublesome (but users could add an arbitrary logging uid to differentiate), but we'll put it there anyway for now... Parameters: Name Type Description Default scrapli_conn Union [ AsyncDriver , Driver ] scrapli connection to fetch data from required Returns: Name Type Description str str instance name to use for the connection Source code in replay/replay.py 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 def create_instance_name ( self , scrapli_conn : Union [ AsyncDriver , Driver ]) -> str : \"\"\" Create as unique as possible instance name for a given connection Since hash cant be relied on to between python executions we need to have some way to have a decent idea about what connection is what... using the host and port is maybe not enough as a user may have multiple connections to the same device in a test session. Adding in the transport *might* help (maybe one is ssh one is netconf or telnet), but still not 100%... Adding in the logging uid is handy, but only if the user set one, so we also will tack on an extra field basically counting how many of the same connections we've seen. We *may* not support multiple connections because it may be too troublesome (but users could add an arbitrary logging uid to differentiate), but we'll put it there anyway for now... Args: scrapli_conn: scrapli connection to fetch data from Returns: str: instance name to use for the connection Raises: N/A \"\"\" instance_name = ( f \" { scrapli_conn . host } : { scrapli_conn . port } :\" f \" { scrapli_conn . transport . __class__ . __name__ } :\" f \" { scrapli_conn . logger . extra . get ( 'uid' , '' ) } \" # type:ignore ) similar_instance_names = [ inst_name for inst_name in self . wrapped_instances if inst_name . startswith ( instance_name ) ] instance_name = f \" { instance_name } : { len ( similar_instance_names ) } \" return instance_name","title":"create_instance_name()"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplayInstance","text":"Source code in replay/replay.pyclass ScrapliReplayInstance : def __init__ ( self , * , replay_mode : ReplayMode , connection_profile : ConnectionProfile , replay_session : Optional [ Dict [ str , Any ]] = None , ) -> None : \"\"\" Scrapli replay Args: replay_mode: replay mode to use connection_profile: connection profile object replay_session: dict of replay session (used in replay mode, ignored in record mode) Returns: None Raises: N/A \"\"\" self . replay_mode = replay_mode self . connection_profile = connection_profile self . replay_session = replay_session or {} self . read_log = BytesIO () self . write_log : List [ Tuple [ str , bool , int ]] = [] self . _scrapli_cfg_session = \"\" def _common_replay_mode ( self ) -> Tuple [ Iterator [ str ], Iterator [ Tuple [ str , bool ]]]: \"\"\" Handle common replay mode parsing of saved session data (common between sync/async) Args: N/A Returns: Tuple[Iterator[str], Iterator[Tuple[str, bool]]]: returns the device_outputs and scrapli_inputs iterators to use in the replay read/write methods Raises: ScrapliReplayConnectionProfileError: if recorded connection profile does not match the actual connection profile \"\"\" actual_connection_profile = ConnectionProfile ( ** self . replay_session [ \"connection_profile\" ]) if actual_connection_profile != self . connection_profile : msg = \"recorded connection profile does not match current connection profile\" raise ScrapliReplayConnectionProfileError ( msg ) device_outputs = iter ( [ interaction [ \"channel_output\" ] for interaction in self . replay_session [ \"interactions\" ]] ) scrapli_inputs = iter ( [ ( interaction [ \"expected_channel_input\" ], interaction [ \"expected_channel_input_redacted\" ], ) for interaction in self . replay_session [ \"interactions\" ] ] ) return device_outputs , scrapli_inputs def setup_async_replay_mode ( self , scrapli_conn : AsyncDriver ) -> None : \"\"\" Patch scrapli Channel read/write methods in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" device_outputs , scrapli_inputs = self . _common_replay_mode () self . _patch_async_read_replay ( scrapli_conn = scrapli_conn , device_outputs = device_outputs ) self . _patch_write_replay ( scrapli_conn = scrapli_conn , scrapli_inputs = scrapli_inputs ) def setup_replay_mode ( self , scrapli_conn : Driver ) -> None : \"\"\" Patch scrapli Channel read/write methods in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/Ah \"\"\" device_outputs , scrapli_inputs = self . _common_replay_mode () self . _patch_read_replay ( scrapli_conn = scrapli_conn , device_outputs = device_outputs ) self . _patch_write_replay ( scrapli_conn = scrapli_conn , scrapli_inputs = scrapli_inputs ) def _patch_async_read_replay ( self , scrapli_conn : AsyncDriver , device_outputs : Iterator [ str ] ) -> None : \"\"\" Patch scrapli AsyncChannel read method in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from device_outputs: iterator of inputs that the read method should return for the \"fake\" connection Returns: None Raises: N/A \"\"\" async def patched_read ( cls : AsyncChannel ) -> bytes : \"\"\" Patched AsyncChannel.read method Args: cls: scrapli Channel self Returns: bytes: bytes read from teh channel Raises: ScrapliReplayException: if there are no more outputs from the session to replay \"\"\" try : buf = next ( device_outputs ) . encode () # if we see this string we know we actually need to ship out the current scrapli cfg # session name that we capture during the replay write method if b \"__SCRAPLI_CFG_SESSION_NAME__\" in buf and self . _scrapli_cfg_session : buf = self . _scrapli_cfg_session . encode () self . _scrapli_cfg_session = \"\" except StopIteration as exc : msg = \"No more device outputs to replay\" raise ScrapliReplayException ( msg ) from exc cls . logger . debug ( f \"read: { repr ( buf ) } \" ) if cls . channel_log : cls . channel_log . write ( buf ) if b \" \\x1b \" in buf . lower (): buf = cls . _strip_ansi ( buf = buf ) # pylint: disable=W0212 return buf scrapli_conn . channel . read = types . MethodType ( # type: ignore patched_read , scrapli_conn . channel ) def _patch_read_replay ( self , scrapli_conn : Driver , device_outputs : Iterator [ str ]) -> None : \"\"\" Patch scrapli Channel read method in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from device_outputs: iterator of inputs that the read method should return for the \"fake\" connection Returns: None Raises: N/A \"\"\" def patched_read ( cls : Channel ) -> bytes : \"\"\" Patched Channel.read method Args: cls: scrapli Channel self Returns: bytes: bytes read form the channel Raises: ScrapliReplayException: if there are no more outputs from the session to replay \"\"\" try : buf = next ( device_outputs ) . encode () # if we see this string we know we actually need to ship out the current scrapli cfg # session name that we capture during the replay write method if b \"__SCRAPLI_CFG_SESSION_NAME__\" in buf and self . _scrapli_cfg_session : buf = self . _scrapli_cfg_session . encode () self . _scrapli_cfg_session = \"\" except StopIteration as exc : msg = \"No more device outputs to replay\" raise ScrapliReplayException ( msg ) from exc cls . logger . debug ( f \"read: { repr ( buf ) } \" ) if cls . channel_log : cls . channel_log . write ( buf ) if b \" \\x1b \" in buf . lower (): buf = cls . _strip_ansi ( buf = buf ) # pylint: disable=W0212 return buf scrapli_conn . channel . read = types . MethodType ( # type: ignore patched_read , scrapli_conn . channel ) def _patch_write_replay ( self , scrapli_conn : Union [ AsyncDriver , Driver ], scrapli_inputs : Iterator [ Tuple [ str , bool ]] ) -> None : \"\"\" Patch scrapli Channel write method in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from scrapli_inputs: inputs to assert are true that scrapli should be sending Returns: None Raises: N/A \"\"\" def patched_write ( cls : BaseChannel , channel_input : str , redacted : bool = False ) -> None : \"\"\" Patched Channel.write method Args: cls: scrapli Channel self channel_input: input to send to the channel redacted: if input should be redacted from log Returns: None Raises: ScrapliReplayExpectedInputError: if actual input does not match expected input \"\"\" expected_input , expected_redacted = next ( scrapli_inputs ) if redacted is True : _channel_input = \"REDACTED\" elif re . search ( pattern = SCRAPLI_CFG_SESSION_PATTERN , string = channel_input ): _channel_input = re . sub ( pattern = SCRAPLI_CFG_SESSION_PATTERN , string = channel_input , repl = \"__SCRAPLI_CFG_SESSION_NAME__\" , ) # if we see a scrapli cfg session in the replay we have to store it as it has a # timestamp -- we need to replay this back so scrapli doesnt break self . _scrapli_cfg_session = channel_input else : _channel_input = channel_input if not all (( expected_input == _channel_input , expected_redacted == redacted )): msg = \"expected channel input does not match actual channel input\" raise ScrapliReplayExpectedInputError ( msg ) log_output = \"REDACTED\" if redacted else repr ( channel_input ) cls . logger . debug ( f \"write: { log_output } \" ) scrapli_conn . channel . write = types . MethodType ( # type: ignore patched_write , scrapli_conn . channel ) def setup_async_record_mode ( self , scrapli_conn : AsyncDriver ) -> None : \"\"\" Patch scrapli AsyncChannel read and write methods in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" self . _patch_async_read_record ( scrapli_conn = scrapli_conn ) self . _patch_write_record ( scrapli_conn = scrapli_conn ) def setup_record_mode ( self , scrapli_conn : Driver ) -> None : \"\"\" Patch scrapli Channel read and write methods in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" self . _patch_read_record ( scrapli_conn = scrapli_conn ) self . _patch_write_record ( scrapli_conn = scrapli_conn ) def _patch_async_read_record ( self , scrapli_conn : AsyncDriver ) -> None : \"\"\" Patch scrapli AsyncChannel read method in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" async def patched_read ( cls : AsyncChannel ) -> bytes : \"\"\" Patched Channel.read method Args: cls: scrapli Channel self Returns: bytes: bytes read Raises: N/A \"\"\" buf : bytes = await cls . transport . read () buf = buf . replace ( b \" \\r \" , b \"\" ) cls . logger . debug ( f \"read: { repr ( buf ) } \" ) if cls . channel_log : cls . channel_log . write ( buf ) if b \" \\x1b \" in buf . lower (): buf = cls . _strip_ansi ( buf = buf ) # pylint: disable=W0212 self . read_log . write ( buf ) return buf scrapli_conn . channel . read = types . MethodType ( # type: ignore patched_read , scrapli_conn . channel ) def _patch_read_record ( self , scrapli_conn : Driver ) -> None : \"\"\" Patch scrapli Channel read method in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" def patched_read ( cls : Channel ) -> bytes : \"\"\" Patched Channel.read method Args: cls: scrapli Channel self Returns: bytes: bytes read Raises: N/A \"\"\" buf : bytes = cls . transport . read () buf = buf . replace ( b \" \\r \" , b \"\" ) cls . logger . debug ( f \"read: { repr ( buf ) } \" ) if cls . channel_log : cls . channel_log . write ( buf ) if b \" \\x1b \" in buf . lower (): buf = cls . _strip_ansi ( buf = buf ) # pylint: disable=W0212 self . read_log . write ( buf ) return buf scrapli_conn . channel . read = types . MethodType ( # type: ignore patched_read , scrapli_conn . channel ) def _patch_write_record ( self , scrapli_conn : Union [ AsyncDriver , Driver ], ) -> None : \"\"\" Patch scrapli Channel write method in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" def patched_write ( cls : BaseChannel , channel_input : str , redacted : bool = False ) -> None : \"\"\" Patched Channel.write method Args: cls: scrapli Channel self channel_input: input to send to the channel redacted: if input should be redacted from log Returns: None Raises: N/A \"\"\" _channel_input = re . sub ( pattern = SCRAPLI_CFG_SESSION_PATTERN , repl = \"__SCRAPLI_CFG_SESSION_NAME__\" , string = channel_input , ) self . write_log . append (( _channel_input , redacted , self . read_log . tell ())) log_output = \"REDACTED\" if redacted else repr ( channel_input ) cls . logger . debug ( f \"write: { log_output } \" ) cls . transport . write ( channel_input = channel_input . encode ()) scrapli_conn . channel . write = types . MethodType ( # type: ignore patched_write , scrapli_conn . channel ) def telnet_patch_update_log ( self , auth_username : str ) -> None : \"\"\" Patch the read log for telnet connections This method removes \"leading dead space\" and any extra returns/dead space between user and password and the first prompt/banner showing up. This only is necessary for telnet conns. Args: auth_username: username from the patched scrapli object Returns: None Raises: N/A \"\"\" updatedwrite_log = [] for write_log_entry in self . write_log : updatedwrite_log . append ( write_log_entry ) if write_log_entry [ 1 ] is True : break # append the *last* entry in the write log back to the updated list -- this will # get us reading up through the banner/initial prompt updatedwrite_log . append ( self . write_log [ - 1 ]) # for telnet connections we may have some \"dead space\" (empty reads) at the # beginning of the interactions, get rid of that as it is not needed here index = 0 for index , write_log_entry in enumerate ( updatedwrite_log ): if write_log_entry [ 0 ] == auth_username : # we've got the index of the updated write log starting at the username # we know we can slice everything off before this now break updatedwrite_log = updatedwrite_log [ index :] # finally update the replay class write log w/ our modified version self . write_log = updatedwrite_log","title":"ScrapliReplayInstance"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplayInstance.__init__","text":"Scrapli replay Parameters: Name Type Description Default replay_mode ReplayMode replay mode to use required connection_profile ConnectionProfile connection profile object required replay_session Optional [ Dict [ str , Any ]] dict of replay session (used in replay mode, ignored in record mode) None Returns: Type Description None None Source code in replay/replay.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def __init__ ( self , * , replay_mode : ReplayMode , connection_profile : ConnectionProfile , replay_session : Optional [ Dict [ str , Any ]] = None , ) -> None : \"\"\" Scrapli replay Args: replay_mode: replay mode to use connection_profile: connection profile object replay_session: dict of replay session (used in replay mode, ignored in record mode) Returns: None Raises: N/A \"\"\" self . replay_mode = replay_mode self . connection_profile = connection_profile self . replay_session = replay_session or {} self . read_log = BytesIO () self . write_log : List [ Tuple [ str , bool , int ]] = [] self . _scrapli_cfg_session = \"\"","title":"__init__()"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplayInstance.setup_async_record_mode","text":"Patch scrapli AsyncChannel read and write methods in \"record\" mode Parameters: Name Type Description Default scrapli_conn AsyncDriver scrapli connection to fetch data from required Returns: Type Description None None Source code in replay/replay.py 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 def setup_async_record_mode ( self , scrapli_conn : AsyncDriver ) -> None : \"\"\" Patch scrapli AsyncChannel read and write methods in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" self . _patch_async_read_record ( scrapli_conn = scrapli_conn ) self . _patch_write_record ( scrapli_conn = scrapli_conn )","title":"setup_async_record_mode()"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplayInstance.setup_async_replay_mode","text":"Patch scrapli Channel read/write methods in \"replay\" mode Parameters: Name Type Description Default scrapli_conn AsyncDriver scrapli connection to fetch data from required Returns: Type Description None None Source code in replay/replay.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def setup_async_replay_mode ( self , scrapli_conn : AsyncDriver ) -> None : \"\"\" Patch scrapli Channel read/write methods in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" device_outputs , scrapli_inputs = self . _common_replay_mode () self . _patch_async_read_replay ( scrapli_conn = scrapli_conn , device_outputs = device_outputs ) self . _patch_write_replay ( scrapli_conn = scrapli_conn , scrapli_inputs = scrapli_inputs )","title":"setup_async_replay_mode()"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplayInstance.setup_record_mode","text":"Patch scrapli Channel read and write methods in \"record\" mode Parameters: Name Type Description Default scrapli_conn Driver scrapli connection to fetch data from required Returns: Type Description None None Source code in replay/replay.py 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 def setup_record_mode ( self , scrapli_conn : Driver ) -> None : \"\"\" Patch scrapli Channel read and write methods in \"record\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/A \"\"\" self . _patch_read_record ( scrapli_conn = scrapli_conn ) self . _patch_write_record ( scrapli_conn = scrapli_conn )","title":"setup_record_mode()"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplayInstance.setup_replay_mode","text":"Patch scrapli Channel read/write methods in \"replay\" mode Parameters: Name Type Description Default scrapli_conn Driver scrapli connection to fetch data from required Returns: Type Description None None Source code in replay/replay.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def setup_replay_mode ( self , scrapli_conn : Driver ) -> None : \"\"\" Patch scrapli Channel read/write methods in \"replay\" mode Args: scrapli_conn: scrapli connection to fetch data from Returns: None Raises: N/Ah \"\"\" device_outputs , scrapli_inputs = self . _common_replay_mode () self . _patch_read_replay ( scrapli_conn = scrapli_conn , device_outputs = device_outputs ) self . _patch_write_replay ( scrapli_conn = scrapli_conn , scrapli_inputs = scrapli_inputs )","title":"setup_replay_mode()"},{"location":"reference/replay/replay/#replay.replay.ScrapliReplayInstance.telnet_patch_update_log","text":"Patch the read log for telnet connections This method removes \"leading dead space\" and any extra returns/dead space between user and password and the first prompt/banner showing up. This only is necessary for telnet conns. Parameters: Name Type Description Default auth_username str username from the patched scrapli object required Returns: Type Description None None Source code in replay/replay.py 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 def telnet_patch_update_log ( self , auth_username : str ) -> None : \"\"\" Patch the read log for telnet connections This method removes \"leading dead space\" and any extra returns/dead space between user and password and the first prompt/banner showing up. This only is necessary for telnet conns. Args: auth_username: username from the patched scrapli object Returns: None Raises: N/A \"\"\" updatedwrite_log = [] for write_log_entry in self . write_log : updatedwrite_log . append ( write_log_entry ) if write_log_entry [ 1 ] is True : break # append the *last* entry in the write log back to the updated list -- this will # get us reading up through the banner/initial prompt updatedwrite_log . append ( self . write_log [ - 1 ]) # for telnet connections we may have some \"dead space\" (empty reads) at the # beginning of the interactions, get rid of that as it is not needed here index = 0 for index , write_log_entry in enumerate ( updatedwrite_log ): if write_log_entry [ 0 ] == auth_username : # we've got the index of the updated write log starting at the username # we know we can slice everything off before this now break updatedwrite_log = updatedwrite_log [ index :] # finally update the replay class write log w/ our modified version self . write_log = updatedwrite_log","title":"telnet_patch_update_log()"},{"location":"reference/server/","text":"scrapli_replay.server","title":"Index"},{"location":"reference/server/collector/","text":"scrapli_replay.server.collector ScrapliCollector \u00b6 Source code in server/collector.pyclass ScrapliCollector : def __init__ ( self , channel_inputs : List [ str ], interact_events : List [ List [ Tuple [ str , str , bool ]]], paging_indicator : str , paging_escape_string : str = \" \\x1b \" , scrapli_connection : Optional [ NetworkDriver ] = None , collector_session_filename : str = \"scrapli_replay_collector_session.yaml\" , ** kwargs : Dict [ str , Any ], ) -> None : \"\"\" Scrapli Collector Class Patches scrapli so that we can record the connection inputs and outputs from the channel Args: channel_inputs: list of channel inputs to record interact_events: list of interact events to record paging_indicator: string that indicates when the device is prompting for user input to continue paging the output paging_escape_string: string to use to escape the paging prompt scrapli_connection: already instantiated scrapli connection -- you can pass this or just the kwargs necessary to instantiate one for you collector_session_filename: name of file to save collector session output to kwargs: kwargs to instantiate scrapli connection, *must* include platform as this will instantiate the connection via `Scrapli` factory class! Returns: None Raises: ScrapliReplayException: if no valid scrapli connection or connection data present \"\"\" logger . debug ( \"creating scrapli replay collector\" ) self . channel_inputs = channel_inputs self . interact_events = interact_events self . paging_indicator = paging_indicator self . paging_escape_string = paging_escape_string self . collector_session_filename = collector_session_filename self . channel_log = BytesIO () # making the channel log unclose-able so we can retain the channel log even throughout # connections being closed self . channel_log . close = lambda : None # type: ignore if scrapli_connection : logger . debug ( \"scrapli connection provided\" ) self . scrapli_connection = scrapli_connection self . scrapli_connection . _base_channel_args . channel_log = self . channel_log if self . scrapli_connection . isalive (): # want to close it so we can reset the on open (paging stuff) self . scrapli_connection . close () else : logger . debug ( \"no scrapli connection provided, building one from kwargs\" ) if not kwargs . get ( \"platform\" ): msg = \"must provide 'platform' as a kwarg if you dont provide a connection object!\" logger . critical ( msg ) raise ScrapliReplayException ( msg ) if kwargs . pop ( \"channel_log\" , None ): user_warning ( title = \"Ignored argument!\" , message = \"channel_log arg provided, replacing with ScrapliCollector channel_log\" , ) self . scrapli_connection = Scrapli ( channel_log = self . channel_log , ** kwargs , # type: ignore ) self . scrapli_connection_original_timeout_transport = ( self . scrapli_connection . timeout_transport ) # update the channel to be an instance of the ScrapliCollectorChannel self . scrapli_connection . channel = ScrapliCollectorChannel ( transport = self . scrapli_connection . transport , base_channel_args = self . scrapli_connection . _base_channel_args , ) # store the \"normal\" default desired privilege level self . scrapli_connection_default_desired_privilege_level = ( self . scrapli_connection . default_desired_privilege_level ) # store and reset the on_open/on_close to None so we can manage when we want to disable # paging and such self . scrapli_connection_standard_on_open = self . scrapli_connection . on_open self . scrapli_connection_standard_on_close = self . scrapli_connection . on_close self . scrapli_connection . on_open = None self . scrapli_connection . on_close = None # bool to just indicate if we have ran the on open stuff self . on_open_enabled = False self . on_open_inputs : List [ str ] = [] self . on_close_inputs : List [ str ] = [] # flag to indicate if we have collected priv prompts yet self . collected_priv_prompts = False # Future: support recording any login auth/banner stuff too platform_privilege_levels = self . scrapli_connection . privilege_levels . keys () self . initial_privilege_level = \"\" self . privilege_level_prompts : Dict [ str , str ] = { privilege_level_name : \"\" for privilege_level_name in platform_privilege_levels } # commands captured from driver privilege levels for escalate/deescalate self . _privilege_escalate_inputs : List [ str ] = [] self . _privilege_deescalate_inputs : List [ str ] = [] self . _interact_privilege_escalations : List [ List [ Tuple [ str , str , bool ]]] = [] self . events : Dict [ str , Dict [ str , Dict [ str , Union [ StandardEvent , InteractiveEvent ]]]] = { privilege_level_name : { \"pre_on_open\" : {}, \"post_on_open\" : {}} for privilege_level_name in platform_privilege_levels } self . dumpable_events : Dict [ str , Dict [ str , Dict [ str , Any ]]] = { privilege_level_name : { \"pre_on_open\" : {}, \"post_on_open\" : {}} for privilege_level_name in platform_privilege_levels } # this would be similar to the events but for an unknown input, like we have in the v2 thing self . unknown_events : Dict [ str , Dict [ str , Optional [ StandardEvent ]]] = { privilege_level_name : { \"pre_on_open\" : None , \"post_on_open\" : None } for privilege_level_name in platform_privilege_levels } self . dumpable_unknown_events : Dict [ str , Dict [ str , Optional [ Any ]]] = { privilege_level_name : { \"pre_on_open\" : None , \"post_on_open\" : None } for privilege_level_name in platform_privilege_levels } # this is a list of all possible prompts -- because we are going to use send and expect we # need to be able to expect any prompt OR the paging pattern... so after open and we collect # the prompts for each priv level, we can build this list self . all_expected_patterns = [ self . paging_indicator ] self . _determine_privilege_inputs () def open ( self ) -> None : \"\"\" Open the Collector and the underlying scrapli connection Args: N/A Returns: None Raises: None \"\"\" self . scrapli_connection . open () if not self . initial_privilege_level : # only need to fetch this on the initial open, not for subsequent opens when we need # to reconnect! logger . debug ( \"no initial privilege level set, must be first open... setting initial privilege \" \"level\" ) self . initial_privilege_level = self . _get_current_privilege_level_name () def close ( self ) -> None : \"\"\" Close the Collector and the underlying scrapli connection Args: N/A Returns: None Raises: None \"\"\" self . scrapli_connection . close () def _determine_privilege_inputs ( self ) -> None : \"\"\" Private method to figure out what the privilege escalation/deescalation inputs are Args: N/A Returns: None Raises: None \"\"\" logger . debug ( \"building all privilege level inputs/interactions from scrapli driver\" ) self . _privilege_escalate_inputs = [ priv . escalate for priv in self . scrapli_connection . privilege_levels . values () if not priv . escalate_auth and priv . escalate ] self . _privilege_deescalate_inputs = [ priv . deescalate for priv in self . scrapli_connection . privilege_levels . values () if priv . deescalate ] interact_privilege_escalations_levels = [ priv for priv in self . scrapli_connection . privilege_levels . values () if priv . escalate_auth and priv . escalate_prompt ] self . _interact_privilege_escalations = [ [ ( priv . escalate , priv . escalate_prompt , False ), ( \"__AUTH_SECONDARY__\" , priv . pattern , True ), ] for priv in interact_privilege_escalations_levels ] def _get_current_privilege_level_name ( self , prompt : Optional [ str ] = None ) -> str : \"\"\" Convenience method to fetch current privilege level name from the current prompt Args: prompt: prompt pattern to use, if not supplied, we'll fetch current prompt Returns: str: string name of current privilege level Raises: N/A \"\"\" if not prompt : prompt = self . scrapli_connection . get_prompt () priv_name : str = self . scrapli_connection . _determine_current_priv ( prompt )[ 0 ] return priv_name def _collect_privilege_prompts ( self ) -> None : \"\"\" Private method to get all of the prompts for each priv of the underlying device Args: N/A Returns: None Raises: None \"\"\" for priv_level in self . privilege_level_prompts : logger . info ( f \"collecting prompt for priv level { priv_level } \" ) self . scrapli_connection . acquire_priv ( priv_level ) self . privilege_level_prompts [ priv_level ] = self . scrapli_connection . get_prompt () self . collected_priv_prompts = True def _extend_all_expected_prompts ( self ) -> None : \"\"\" Extend the \"all_expected_prompts\" to include all the captured privilege level prompts Args: N/A Returns: None Raises: ScrapliReplayException: if privilege patterns aren't collected before running this \"\"\" if not self . collected_priv_prompts : msg = ( \"attempting to build all expected prompts pattern, but have not collected privilege\" \" level prompts yet, failing\" ) logger . critical ( msg ) raise ScrapliReplayException ( msg ) self . all_expected_patterns . extend ( [ prompt for _ , prompt in self . privilege_level_prompts . items ()] ) @staticmethod def _strip_remaining_ansi ( raw_output : bytes ) -> str : \"\"\" Strip remaining ansi chars and decode bytes to string Unclear why as it seems like `_strip_ansi` in scrapli core channel should handle this, but some ansi characters do *not* get stripped out, handle them here. Note that this seems to be an EOS specific thing as the other \"core\" platforms dont plop ansi into the output. Args: raw_output: channel output to remove remaining ansi chars from Returns: : channel output w/ leading newline removed Raises: N/A \"\"\" if b \" \\x1b \" in raw_output : # genuinely dont know what the `>` one is... in theory the `=` one is some screen set # argument? raw_output = raw_output . replace ( b \" \\x1b =\" , b \"\" ) raw_output = raw_output . replace ( b \" \\x1b >\" , b \"\" ) channel_output = raw_output . decode () return channel_output @staticmethod def _strip_leading_newline ( channel_output : str ) -> str : \"\"\" Remove a single leading newline if present Args: channel_output: channel output to remove single leading newline from Returns: str: channel output w/ leading newline removed Raises: N/A \"\"\" if channel_output . startswith ( \" \\n \" ): channel_output = channel_output [ 1 :] return channel_output def _collect_on_open_inputs ( self ) -> None : \"\"\" Private method to figure out what the \"on_open\" commands are Args: N/A Returns: None Raises: None \"\"\" self . scrapli_connection . acquire_priv ( self . scrapli_connection_default_desired_privilege_level ) logger . info ( \"collecting on open inputs\" ) self . scrapli_connection . channel = cast ( ScrapliCollectorChannel , self . scrapli_connection . channel ) starting_write_log_count = len ( self . scrapli_connection . channel . captured_writes ) self . scrapli_connection_standard_on_open ( self . scrapli_connection ) # type: ignore ending_write_log_count = len ( self . scrapli_connection . channel . captured_writes ) write_log_slice = ending_write_log_count - starting_write_log_count on_open_writes = self . scrapli_connection . channel . captured_writes [ - write_log_slice :] # all we need to do here is to fetch the commands that were sent, then we can \"handle\" them # with the standard collection (since we already handle disconnects there), we can assume # with reasonable safety that each command will really come in \"pairs\" -- the command itself # and a return. after reversing the list we can just get every other list item on_open_writes . reverse () self . on_open_inputs = on_open_writes [ 1 :: 2 ] def _collect_on_close_inputs ( self ) -> None : \"\"\" Private method to figure out what the \"on_close\" commands are Args: N/A Returns: None Raises: None \"\"\" self . scrapli_connection . acquire_priv ( self . scrapli_connection_default_desired_privilege_level ) logger . info ( \"collecting on close inputs\" ) self . scrapli_connection . channel = cast ( ScrapliCollectorChannel , self . scrapli_connection . channel ) starting_write_log_count = len ( self . scrapli_connection . channel . captured_writes ) self . scrapli_connection_standard_on_close ( self . scrapli_connection ) # type: ignore ending_write_log_count = len ( self . scrapli_connection . channel . captured_writes ) write_log_slice = ending_write_log_count - starting_write_log_count on_close_writes = self . scrapli_connection . channel . captured_writes [ - write_log_slice :] # all we need to do here is to fetch the commands that were sent, then we can \"handle\" them # with the standard collection (since we already handle disconnects there), we can assume # with reasonable safety that each command will really come in \"pairs\" -- the command itself # and a return. after reversing the list we can just get every other list item on_close_writes . reverse () self . on_close_inputs = on_close_writes [ 1 :: 2 ] # the connection *should* have closed at this point, so we'll check that and reopen, because # we didnt do a \"normal\" close (at the driver level) we maybe cant check with \"isalive()\" try : self . scrapli_connection . get_prompt () except ScrapliConnectionError : logger . debug ( \"connection closed, re-opening\" ) self . open () def _collect_standard_event ( self , channel_input : str ) -> None : \"\"\" Private method to execute and record commands provided to the Collector Runs the commands at *all* priv levels so that we can build more context about how the device behaves Args: channel_input: input to send Returns: None Raises: None \"\"\" on_open_enabled_key = \"post_on_open\" if self . on_open_enabled else \"pre_on_open\" for priv_level in self . scrapli_connection . privilege_levels : logger . info ( f \"collecting input { channel_input } for priv level { priv_level } \" ) self . scrapli_connection . acquire_priv ( priv_level ) try : raw_output , _ = self . scrapli_connection . channel . send_input_and_read ( channel_input = channel_input , expected_outputs = self . all_expected_patterns , # especially nxos in vrouter is v v v slow.... read_duration = READ_DURATION , ) except ScrapliConnectionError : logger . debug ( \"connection closed connection, documenting and re-opening\" ) closes_connection = True channel_output = \"__CLOSES_CONNECTION__\" returns_prompt = False # because we use \"send_input_and_read\" if we lose the connection during this the # transport timeout will have been set to 2s or something during the send input # and read event, we want to make sure to reset it back to \"normal\" after this # failure self . scrapli_connection . timeout_transport = ( self . scrapli_connection_original_timeout_transport ) # reopen the connection so things can continue! self . open () else : closes_connection = False channel_output = self . _strip_remaining_ansi ( raw_output = raw_output ) returns_prompt = True if self . paging_indicator . encode () in raw_output : logger . debug ( \"encountered paging indicator, sending escape string\" ) self . scrapli_connection . channel . write ( channel_input = self . paging_escape_string ) self . scrapli_connection . channel . send_return () returns_prompt = False result_privilege_level = self . _get_current_privilege_level_name () final_channel_output = self . _strip_leading_newline ( channel_output = channel_output ) channel_input_event = StandardEvent ( channel_output = final_channel_output , result_privilege_level = result_privilege_level , returns_prompt = returns_prompt , closes_connection = closes_connection , ) self . events [ priv_level ][ on_open_enabled_key ][ channel_input ] = channel_input_event def _collect_interactive_event_hidden_input ( self , channel_input : str , channel_response : str ) -> bytes : \"\"\" Send \"hidden\" input during interactive event collection Args: channel_input: input to send channel_response: response to expect Returns: bytes: raw bytes read from channel Raises: None \"\"\" _channel_input = channel_input if channel_input == \"__AUTH_SECONDARY__\" : _channel_input = self . scrapli_connection . auth_secondary self . scrapli_connection . channel . write ( channel_input = _channel_input ) self . scrapli_connection . channel . send_return () bytes_channel_outputs = [ channel_output . encode () for channel_output in self . all_expected_patterns ] bytes_channel_outputs . append ( channel_response . encode ()) raw_output : bytes = self . scrapli_connection . channel . _read_until_prompt_or_time ( channel_outputs = bytes_channel_outputs , # especially nxos in vrouter is v v v slow.... read_duration = READ_DURATION , ) return raw_output def _collect_interactive_event_standard_input ( self , channel_input : str , channel_response : str ) -> bytes : \"\"\" Send \"standard\" input during interactive event collection Args: channel_input: input to send channel_response: response to expect Returns: bytes: raw bytes read from channel Raises: None \"\"\" all_patterns_and_expected_interact_prompt = copy ( self . all_expected_patterns ) all_patterns_and_expected_interact_prompt . append ( channel_response ) raw_output , _ = self . scrapli_connection . channel . send_input_and_read ( channel_input = channel_input , expected_outputs = all_patterns_and_expected_interact_prompt , # especially nxos in vrouter is v v v slow.... read_duration = READ_DURATION , ) if channel_input == \"\" : # if we just send a return, we'll end up w/ two newlines before the prompt or whatever # output we get, so let's remove the leading devices comms_return_char slice_length = len ( self . scrapli_connection . comms_return_char ) final_channel_output = raw_output [ slice_length :] return final_channel_output # type: ignore return raw_output # type: ignore def _collect_interactive_parse_channel_input ( self , channel_input : str , hidden_input : bool ) -> str : \"\"\" Parse the response to put in the StandardEvent Args: channel_input: input to send hidden_input: bool if channel_input was hidden Returns: str: channel input to put into collection dict Raises: None \"\"\" _channel_input = channel_input if hidden_input and channel_input == \"__AUTH_SECONDARY__\" : _channel_input = \"__AUTH_SECONDARY__\" elif hidden_input : _channel_input = \"__REDACTED__\" elif not channel_input : _channel_input = self . scrapli_connection . comms_return_char return _channel_input def _collect_interactive_event ( self , interact_event : List [ Tuple [ str , str , bool ]]) -> None : \"\"\" Private method to execute and record all interactive commands provided to the Collector Runs the commands at *all* priv levels so that we can build more context about how the device behaves Args: interact_event: interactive event to capture Returns: None Raises: None \"\"\" on_open_enabled_key = \"post_on_open\" if self . on_open_enabled else \"pre_on_open\" for priv_level in self . scrapli_connection . privilege_levels : self . scrapli_connection . acquire_priv ( priv_level ) logger . info ( f \"collecting interactive event { interact_event } for priv level { priv_level } \" ) interactive_event = InteractiveEvent ( event_steps = []) initiating_channel_input = interact_event [ 0 ][ 0 ] for interact_step in interact_event : channel_input = interact_step [ 0 ] channel_response = interact_step [ 1 ] try : hidden_input = interact_step [ 2 ] except IndexError : hidden_input = False if hidden_input : raw_output = self . _collect_interactive_event_hidden_input ( channel_input = channel_input , channel_response = channel_response ) else : raw_output = self . _collect_interactive_event_standard_input ( channel_input = channel_input , channel_response = channel_response ) returns_prompt = True if self . paging_indicator . encode () in raw_output : self . scrapli_connection . channel . write ( channel_input = self . paging_escape_string ) self . scrapli_connection . channel . send_return () returns_prompt = False _channel_input = self . _collect_interactive_parse_channel_input ( channel_input = channel_input , hidden_input = hidden_input ) final_channel_output = self . _strip_leading_newline ( channel_output = raw_output . decode () ) step = InteractStep ( channel_input = _channel_input , channel_output = final_channel_output , hidden_input = hidden_input , returns_prompt = returns_prompt , ) interactive_event . event_steps . append ( step ) # type: ignore if returns_prompt is False : # probably not likely to happen during interactive... but maybe? break if any ( pattern in raw_output . decode () for pattern in self . all_expected_patterns ): # we are done w/ the \"event\" because we are back at a prompt we know break interactive_event . result_privilege_level = self . _get_current_privilege_level_name () self . events [ priv_level ][ on_open_enabled_key ][ initiating_channel_input ] = interactive_event def _collect_unknown_events ( self ) -> None : \"\"\" Private method to execute and record \"unknown\" commands Runs the commands at *all* priv levels so that we can build more context about how the device behaves Args: N/A Returns: None Raises: None \"\"\" on_open_enabled_key = \"post_on_open\" if self . on_open_enabled else \"pre_on_open\" for priv_level in self . scrapli_connection . privilege_levels : self . scrapli_connection . acquire_priv ( priv_level ) logger . info ( f \"collecting unknown input for priv level { priv_level } \" ) try : raw_output , _ = self . scrapli_connection . channel . send_input_and_read ( channel_input = \"__UNKNOWN_INPUT__\" , expected_outputs = self . all_expected_patterns ) except ScrapliConnectionError : closes_connection = True channel_output = \"__CLOSES_CONNECTION__\" returns_prompt = False # reopen the connection so things can continue! self . open () else : closes_connection = False channel_output = self . _strip_remaining_ansi ( raw_output = raw_output ) returns_prompt = True if self . paging_indicator . encode () in raw_output : self . scrapli_connection . channel . write ( channel_input = self . paging_escape_string ) self . scrapli_connection . channel . send_return () returns_prompt = False result_privilege_level = self . _get_current_privilege_level_name () final_channel_output = self . _strip_leading_newline ( channel_output = channel_output ) channel_unknown_input_event = StandardEvent ( channel_output = final_channel_output , result_privilege_level = result_privilege_level , returns_prompt = returns_prompt , closes_connection = closes_connection , ) self . unknown_events [ priv_level ][ on_open_enabled_key ] = channel_unknown_input_event def _collect_priv_and_open_close ( self ) -> None : \"\"\" Collect privilege escalation/deescalation and on open/close inputs/outputs Args: N/A Returns: None Raises: N/A \"\"\" self . _collect_on_open_inputs () for on_open_input in self . on_open_inputs : self . _collect_standard_event ( channel_input = on_open_input ) self . _collect_on_close_inputs () for on_close_input in self . on_close_inputs : self . _collect_standard_event ( channel_input = on_close_input ) for privilege_escalate_input in self . _privilege_escalate_inputs : self . _collect_standard_event ( channel_input = privilege_escalate_input ) for privilege_deescalate_input in self . _privilege_deescalate_inputs : self . _collect_standard_event ( channel_input = privilege_deescalate_input ) for interact_privilege_event in self . _interact_privilege_escalations : self . _collect_interactive_event ( interact_event = interact_privilege_event ) def _collect ( self ) -> None : \"\"\" Private method to execute all the \"standard\" and \"interactive\" collections Args: N/A Returns: None Raises: None \"\"\" self . _collect_unknown_events () for channel_input in self . channel_inputs : self . _collect_standard_event ( channel_input = channel_input ) for interact_event in self . interact_events : self . _collect_interactive_event ( interact_event = interact_event ) def collect ( self ) -> None : \"\"\" Primary public collection method Args: N/A Returns: None Raises: None \"\"\" self . _collect_privilege_prompts () self . _extend_all_expected_prompts () self . _collect_priv_and_open_close () if isinstance ( self . scrapli_connection , EOSDriver ): # arista will leave paging enabled even after you exit a connection... kinda throws # things off! so we'll put it back... hate having one off things like this but not sure # there is another easy fix self . scrapli_connection . send_command ( command = \"no terminal length\" ) self . _collect () # close the connection, and reassign the \"normal\" on open so we can capture everything # with \"on_open\" things done (paging disabled and whatever else) self . close () self . scrapli_connection . on_open = self . scrapli_connection_standard_on_open self . scrapli_connection . on_close = self . scrapli_connection_standard_on_close self . open () self . on_open_enabled = True self . _collect_priv_and_open_close () self . _collect () def _serialize ( self ) -> None : \"\"\" Serialize the collected data so it can be dumped to yaml nicely Args: N/A Returns: None Raises: None \"\"\" logger . debug ( \"serializing collected inputs to be yaml friendly\" ) for privilege_level in self . events : for on_open_state in self . events [ privilege_level ]: for channel_input in self . events [ privilege_level ][ on_open_state ]: self . dumpable_events [ privilege_level ][ on_open_state ][ channel_input ] = asdict ( self . events [ privilege_level ][ on_open_state ][ channel_input ] ) self . dumpable_events [ privilege_level ][ on_open_state ][ channel_input ][ \"type\" ] = ( \"standard\" if isinstance ( self . events [ privilege_level ][ on_open_state ][ channel_input ], StandardEvent , ) else \"interactive\" ) for privilege_level in self . unknown_events : for on_open_state in self . unknown_events [ privilege_level ]: self . dumpable_unknown_events [ privilege_level ][ on_open_state ] = asdict ( self . unknown_events [ privilege_level ][ on_open_state ] ) def dump ( self ) -> None : \"\"\" Primary public dump method to dump collected data out to yaml Args: N/A Returns: None Raises: None \"\"\" self . _serialize () logger . debug ( \"dumping collected inputs to yaml\" ) dumpable_dict : Dict [ str , Any ] = {} dumpable_dict [ \"events\" ] = self . dumpable_events dumpable_dict [ \"unknown_events\" ] = self . dumpable_unknown_events dumpable_dict [ \"initial_privilege_level\" ] = self . initial_privilege_level dumpable_dict [ \"privilege_level_prompts\" ] = self . privilege_level_prompts dumpable_dict [ \"on_open_inputs\" ] = self . on_open_inputs with open ( self . collector_session_filename , \"w\" , encoding = \"utf-8\" ) as f : yaml = YAML () yaml . indent ( mapping = 2 , sequence = 4 , offset = 2 ) yaml . dump ( dumpable_dict , f ) __init__ ( channel_inputs : List [ str ], interact_events : List [ List [ Tuple [ str , str , bool ]]], paging_indicator : str , paging_escape_string : str = ' \\x1b ' , scrapli_connection : Optional [ NetworkDriver ] = None , collector_session_filename : str = 'scrapli_replay_collector_session.yaml' , ** kwargs : Dict [ str , Any ]) -> None \u00b6 Scrapli Collector Class Patches scrapli so that we can record the connection inputs and outputs from the channel Parameters: Name Type Description Default channel_inputs List [ str ] list of channel inputs to record required interact_events List [ List [ Tuple [ str , str , bool ]]] list of interact events to record required paging_indicator str string that indicates when the device is prompting for user input to continue paging the output required paging_escape_string str string to use to escape the paging prompt '\\x1b' scrapli_connection Optional [ NetworkDriver ] already instantiated scrapli connection -- you can pass this or just the kwargs necessary to instantiate one for you None collector_session_filename str name of file to save collector session output to 'scrapli_replay_collector_session.yaml' kwargs kwargs to instantiate scrapli connection, must include platform as this will instantiate the connection via Scrapli factory class! required Returns: Type Description None None Raises: Type Description ScrapliReplayException if no valid scrapli connection or connection data present Source code in server/collector.pydef __init__ ( self , channel_inputs : List [ str ], interact_events : List [ List [ Tuple [ str , str , bool ]]], paging_indicator : str , paging_escape_string : str = \" \\x1b \" , scrapli_connection : Optional [ NetworkDriver ] = None , collector_session_filename : str = \"scrapli_replay_collector_session.yaml\" , ** kwargs : Dict [ str , Any ], ) -> None : \"\"\" Scrapli Collector Class Patches scrapli so that we can record the connection inputs and outputs from the channel Args: channel_inputs: list of channel inputs to record interact_events: list of interact events to record paging_indicator: string that indicates when the device is prompting for user input to continue paging the output paging_escape_string: string to use to escape the paging prompt scrapli_connection: already instantiated scrapli connection -- you can pass this or just the kwargs necessary to instantiate one for you collector_session_filename: name of file to save collector session output to kwargs: kwargs to instantiate scrapli connection, *must* include platform as this will instantiate the connection via `Scrapli` factory class! Returns: None Raises: ScrapliReplayException: if no valid scrapli connection or connection data present \"\"\" logger . debug ( \"creating scrapli replay collector\" ) self . channel_inputs = channel_inputs self . interact_events = interact_events self . paging_indicator = paging_indicator self . paging_escape_string = paging_escape_string self . collector_session_filename = collector_session_filename self . channel_log = BytesIO () # making the channel log unclose-able so we can retain the channel log even throughout # connections being closed self . channel_log . close = lambda : None # type: ignore if scrapli_connection : logger . debug ( \"scrapli connection provided\" ) self . scrapli_connection = scrapli_connection self . scrapli_connection . _base_channel_args . channel_log = self . channel_log if self . scrapli_connection . isalive (): # want to close it so we can reset the on open (paging stuff) self . scrapli_connection . close () else : logger . debug ( \"no scrapli connection provided, building one from kwargs\" ) if not kwargs . get ( \"platform\" ): msg = \"must provide 'platform' as a kwarg if you dont provide a connection object!\" logger . critical ( msg ) raise ScrapliReplayException ( msg ) if kwargs . pop ( \"channel_log\" , None ): user_warning ( title = \"Ignored argument!\" , message = \"channel_log arg provided, replacing with ScrapliCollector channel_log\" , ) self . scrapli_connection = Scrapli ( channel_log = self . channel_log , ** kwargs , # type: ignore ) self . scrapli_connection_original_timeout_transport = ( self . scrapli_connection . timeout_transport ) # update the channel to be an instance of the ScrapliCollectorChannel self . scrapli_connection . channel = ScrapliCollectorChannel ( transport = self . scrapli_connection . transport , base_channel_args = self . scrapli_connection . _base_channel_args , ) # store the \"normal\" default desired privilege level self . scrapli_connection_default_desired_privilege_level = ( self . scrapli_connection . default_desired_privilege_level ) # store and reset the on_open/on_close to None so we can manage when we want to disable # paging and such self . scrapli_connection_standard_on_open = self . scrapli_connection . on_open self . scrapli_connection_standard_on_close = self . scrapli_connection . on_close self . scrapli_connection . on_open = None self . scrapli_connection . on_close = None # bool to just indicate if we have ran the on open stuff self . on_open_enabled = False self . on_open_inputs : List [ str ] = [] self . on_close_inputs : List [ str ] = [] # flag to indicate if we have collected priv prompts yet self . collected_priv_prompts = False # Future: support recording any login auth/banner stuff too platform_privilege_levels = self . scrapli_connection . privilege_levels . keys () self . initial_privilege_level = \"\" self . privilege_level_prompts : Dict [ str , str ] = { privilege_level_name : \"\" for privilege_level_name in platform_privilege_levels } # commands captured from driver privilege levels for escalate/deescalate self . _privilege_escalate_inputs : List [ str ] = [] self . _privilege_deescalate_inputs : List [ str ] = [] self . _interact_privilege_escalations : List [ List [ Tuple [ str , str , bool ]]] = [] self . events : Dict [ str , Dict [ str , Dict [ str , Union [ StandardEvent , InteractiveEvent ]]]] = { privilege_level_name : { \"pre_on_open\" : {}, \"post_on_open\" : {}} for privilege_level_name in platform_privilege_levels } self . dumpable_events : Dict [ str , Dict [ str , Dict [ str , Any ]]] = { privilege_level_name : { \"pre_on_open\" : {}, \"post_on_open\" : {}} for privilege_level_name in platform_privilege_levels } # this would be similar to the events but for an unknown input, like we have in the v2 thing self . unknown_events : Dict [ str , Dict [ str , Optional [ StandardEvent ]]] = { privilege_level_name : { \"pre_on_open\" : None , \"post_on_open\" : None } for privilege_level_name in platform_privilege_levels } self . dumpable_unknown_events : Dict [ str , Dict [ str , Optional [ Any ]]] = { privilege_level_name : { \"pre_on_open\" : None , \"post_on_open\" : None } for privilege_level_name in platform_privilege_levels } # this is a list of all possible prompts -- because we are going to use send and expect we # need to be able to expect any prompt OR the paging pattern... so after open and we collect # the prompts for each priv level, we can build this list self . all_expected_patterns = [ self . paging_indicator ] self . _determine_privilege_inputs () close () -> None \u00b6 Close the Collector and the underlying scrapli connection Returns: Type Description None None Source code in server/collector.py 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 def close ( self ) -> None : \"\"\" Close the Collector and the underlying scrapli connection Args: N/A Returns: None Raises: None \"\"\" self . scrapli_connection . close () collect () -> None \u00b6 Primary public collection method Returns: Type Description None None Source code in server/collector.py 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 def collect ( self ) -> None : \"\"\" Primary public collection method Args: N/A Returns: None Raises: None \"\"\" self . _collect_privilege_prompts () self . _extend_all_expected_prompts () self . _collect_priv_and_open_close () if isinstance ( self . scrapli_connection , EOSDriver ): # arista will leave paging enabled even after you exit a connection... kinda throws # things off! so we'll put it back... hate having one off things like this but not sure # there is another easy fix self . scrapli_connection . send_command ( command = \"no terminal length\" ) self . _collect () # close the connection, and reassign the \"normal\" on open so we can capture everything # with \"on_open\" things done (paging disabled and whatever else) self . close () self . scrapli_connection . on_open = self . scrapli_connection_standard_on_open self . scrapli_connection . on_close = self . scrapli_connection_standard_on_close self . open () self . on_open_enabled = True self . _collect_priv_and_open_close () self . _collect () dump () -> None \u00b6 Primary public dump method to dump collected data out to yaml Returns: Type Description None None Source code in server/collector.py 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 def dump ( self ) -> None : \"\"\" Primary public dump method to dump collected data out to yaml Args: N/A Returns: None Raises: None \"\"\" self . _serialize () logger . debug ( \"dumping collected inputs to yaml\" ) dumpable_dict : Dict [ str , Any ] = {} dumpable_dict [ \"events\" ] = self . dumpable_events dumpable_dict [ \"unknown_events\" ] = self . dumpable_unknown_events dumpable_dict [ \"initial_privilege_level\" ] = self . initial_privilege_level dumpable_dict [ \"privilege_level_prompts\" ] = self . privilege_level_prompts dumpable_dict [ \"on_open_inputs\" ] = self . on_open_inputs with open ( self . collector_session_filename , \"w\" , encoding = \"utf-8\" ) as f : yaml = YAML () yaml . indent ( mapping = 2 , sequence = 4 , offset = 2 ) yaml . dump ( dumpable_dict , f ) open () -> None \u00b6 Open the Collector and the underlying scrapli connection Returns: Type Description None None Source code in server/collector.py 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 def open ( self ) -> None : \"\"\" Open the Collector and the underlying scrapli connection Args: N/A Returns: None Raises: None \"\"\" self . scrapli_connection . open () if not self . initial_privilege_level : # only need to fetch this on the initial open, not for subsequent opens when we need # to reconnect! logger . debug ( \"no initial privilege level set, must be first open... setting initial privilege \" \"level\" ) self . initial_privilege_level = self . _get_current_privilege_level_name ()","title":"Collector"},{"location":"reference/server/collector/#server.collector.ScrapliCollector","text":"Source code in server/collector.pyclass ScrapliCollector : def __init__ ( self , channel_inputs : List [ str ], interact_events : List [ List [ Tuple [ str , str , bool ]]], paging_indicator : str , paging_escape_string : str = \" \\x1b \" , scrapli_connection : Optional [ NetworkDriver ] = None , collector_session_filename : str = \"scrapli_replay_collector_session.yaml\" , ** kwargs : Dict [ str , Any ], ) -> None : \"\"\" Scrapli Collector Class Patches scrapli so that we can record the connection inputs and outputs from the channel Args: channel_inputs: list of channel inputs to record interact_events: list of interact events to record paging_indicator: string that indicates when the device is prompting for user input to continue paging the output paging_escape_string: string to use to escape the paging prompt scrapli_connection: already instantiated scrapli connection -- you can pass this or just the kwargs necessary to instantiate one for you collector_session_filename: name of file to save collector session output to kwargs: kwargs to instantiate scrapli connection, *must* include platform as this will instantiate the connection via `Scrapli` factory class! Returns: None Raises: ScrapliReplayException: if no valid scrapli connection or connection data present \"\"\" logger . debug ( \"creating scrapli replay collector\" ) self . channel_inputs = channel_inputs self . interact_events = interact_events self . paging_indicator = paging_indicator self . paging_escape_string = paging_escape_string self . collector_session_filename = collector_session_filename self . channel_log = BytesIO () # making the channel log unclose-able so we can retain the channel log even throughout # connections being closed self . channel_log . close = lambda : None # type: ignore if scrapli_connection : logger . debug ( \"scrapli connection provided\" ) self . scrapli_connection = scrapli_connection self . scrapli_connection . _base_channel_args . channel_log = self . channel_log if self . scrapli_connection . isalive (): # want to close it so we can reset the on open (paging stuff) self . scrapli_connection . close () else : logger . debug ( \"no scrapli connection provided, building one from kwargs\" ) if not kwargs . get ( \"platform\" ): msg = \"must provide 'platform' as a kwarg if you dont provide a connection object!\" logger . critical ( msg ) raise ScrapliReplayException ( msg ) if kwargs . pop ( \"channel_log\" , None ): user_warning ( title = \"Ignored argument!\" , message = \"channel_log arg provided, replacing with ScrapliCollector channel_log\" , ) self . scrapli_connection = Scrapli ( channel_log = self . channel_log , ** kwargs , # type: ignore ) self . scrapli_connection_original_timeout_transport = ( self . scrapli_connection . timeout_transport ) # update the channel to be an instance of the ScrapliCollectorChannel self . scrapli_connection . channel = ScrapliCollectorChannel ( transport = self . scrapli_connection . transport , base_channel_args = self . scrapli_connection . _base_channel_args , ) # store the \"normal\" default desired privilege level self . scrapli_connection_default_desired_privilege_level = ( self . scrapli_connection . default_desired_privilege_level ) # store and reset the on_open/on_close to None so we can manage when we want to disable # paging and such self . scrapli_connection_standard_on_open = self . scrapli_connection . on_open self . scrapli_connection_standard_on_close = self . scrapli_connection . on_close self . scrapli_connection . on_open = None self . scrapli_connection . on_close = None # bool to just indicate if we have ran the on open stuff self . on_open_enabled = False self . on_open_inputs : List [ str ] = [] self . on_close_inputs : List [ str ] = [] # flag to indicate if we have collected priv prompts yet self . collected_priv_prompts = False # Future: support recording any login auth/banner stuff too platform_privilege_levels = self . scrapli_connection . privilege_levels . keys () self . initial_privilege_level = \"\" self . privilege_level_prompts : Dict [ str , str ] = { privilege_level_name : \"\" for privilege_level_name in platform_privilege_levels } # commands captured from driver privilege levels for escalate/deescalate self . _privilege_escalate_inputs : List [ str ] = [] self . _privilege_deescalate_inputs : List [ str ] = [] self . _interact_privilege_escalations : List [ List [ Tuple [ str , str , bool ]]] = [] self . events : Dict [ str , Dict [ str , Dict [ str , Union [ StandardEvent , InteractiveEvent ]]]] = { privilege_level_name : { \"pre_on_open\" : {}, \"post_on_open\" : {}} for privilege_level_name in platform_privilege_levels } self . dumpable_events : Dict [ str , Dict [ str , Dict [ str , Any ]]] = { privilege_level_name : { \"pre_on_open\" : {}, \"post_on_open\" : {}} for privilege_level_name in platform_privilege_levels } # this would be similar to the events but for an unknown input, like we have in the v2 thing self . unknown_events : Dict [ str , Dict [ str , Optional [ StandardEvent ]]] = { privilege_level_name : { \"pre_on_open\" : None , \"post_on_open\" : None } for privilege_level_name in platform_privilege_levels } self . dumpable_unknown_events : Dict [ str , Dict [ str , Optional [ Any ]]] = { privilege_level_name : { \"pre_on_open\" : None , \"post_on_open\" : None } for privilege_level_name in platform_privilege_levels } # this is a list of all possible prompts -- because we are going to use send and expect we # need to be able to expect any prompt OR the paging pattern... so after open and we collect # the prompts for each priv level, we can build this list self . all_expected_patterns = [ self . paging_indicator ] self . _determine_privilege_inputs () def open ( self ) -> None : \"\"\" Open the Collector and the underlying scrapli connection Args: N/A Returns: None Raises: None \"\"\" self . scrapli_connection . open () if not self . initial_privilege_level : # only need to fetch this on the initial open, not for subsequent opens when we need # to reconnect! logger . debug ( \"no initial privilege level set, must be first open... setting initial privilege \" \"level\" ) self . initial_privilege_level = self . _get_current_privilege_level_name () def close ( self ) -> None : \"\"\" Close the Collector and the underlying scrapli connection Args: N/A Returns: None Raises: None \"\"\" self . scrapli_connection . close () def _determine_privilege_inputs ( self ) -> None : \"\"\" Private method to figure out what the privilege escalation/deescalation inputs are Args: N/A Returns: None Raises: None \"\"\" logger . debug ( \"building all privilege level inputs/interactions from scrapli driver\" ) self . _privilege_escalate_inputs = [ priv . escalate for priv in self . scrapli_connection . privilege_levels . values () if not priv . escalate_auth and priv . escalate ] self . _privilege_deescalate_inputs = [ priv . deescalate for priv in self . scrapli_connection . privilege_levels . values () if priv . deescalate ] interact_privilege_escalations_levels = [ priv for priv in self . scrapli_connection . privilege_levels . values () if priv . escalate_auth and priv . escalate_prompt ] self . _interact_privilege_escalations = [ [ ( priv . escalate , priv . escalate_prompt , False ), ( \"__AUTH_SECONDARY__\" , priv . pattern , True ), ] for priv in interact_privilege_escalations_levels ] def _get_current_privilege_level_name ( self , prompt : Optional [ str ] = None ) -> str : \"\"\" Convenience method to fetch current privilege level name from the current prompt Args: prompt: prompt pattern to use, if not supplied, we'll fetch current prompt Returns: str: string name of current privilege level Raises: N/A \"\"\" if not prompt : prompt = self . scrapli_connection . get_prompt () priv_name : str = self . scrapli_connection . _determine_current_priv ( prompt )[ 0 ] return priv_name def _collect_privilege_prompts ( self ) -> None : \"\"\" Private method to get all of the prompts for each priv of the underlying device Args: N/A Returns: None Raises: None \"\"\" for priv_level in self . privilege_level_prompts : logger . info ( f \"collecting prompt for priv level { priv_level } \" ) self . scrapli_connection . acquire_priv ( priv_level ) self . privilege_level_prompts [ priv_level ] = self . scrapli_connection . get_prompt () self . collected_priv_prompts = True def _extend_all_expected_prompts ( self ) -> None : \"\"\" Extend the \"all_expected_prompts\" to include all the captured privilege level prompts Args: N/A Returns: None Raises: ScrapliReplayException: if privilege patterns aren't collected before running this \"\"\" if not self . collected_priv_prompts : msg = ( \"attempting to build all expected prompts pattern, but have not collected privilege\" \" level prompts yet, failing\" ) logger . critical ( msg ) raise ScrapliReplayException ( msg ) self . all_expected_patterns . extend ( [ prompt for _ , prompt in self . privilege_level_prompts . items ()] ) @staticmethod def _strip_remaining_ansi ( raw_output : bytes ) -> str : \"\"\" Strip remaining ansi chars and decode bytes to string Unclear why as it seems like `_strip_ansi` in scrapli core channel should handle this, but some ansi characters do *not* get stripped out, handle them here. Note that this seems to be an EOS specific thing as the other \"core\" platforms dont plop ansi into the output. Args: raw_output: channel output to remove remaining ansi chars from Returns: : channel output w/ leading newline removed Raises: N/A \"\"\" if b \" \\x1b \" in raw_output : # genuinely dont know what the `>` one is... in theory the `=` one is some screen set # argument? raw_output = raw_output . replace ( b \" \\x1b =\" , b \"\" ) raw_output = raw_output . replace ( b \" \\x1b >\" , b \"\" ) channel_output = raw_output . decode () return channel_output @staticmethod def _strip_leading_newline ( channel_output : str ) -> str : \"\"\" Remove a single leading newline if present Args: channel_output: channel output to remove single leading newline from Returns: str: channel output w/ leading newline removed Raises: N/A \"\"\" if channel_output . startswith ( \" \\n \" ): channel_output = channel_output [ 1 :] return channel_output def _collect_on_open_inputs ( self ) -> None : \"\"\" Private method to figure out what the \"on_open\" commands are Args: N/A Returns: None Raises: None \"\"\" self . scrapli_connection . acquire_priv ( self . scrapli_connection_default_desired_privilege_level ) logger . info ( \"collecting on open inputs\" ) self . scrapli_connection . channel = cast ( ScrapliCollectorChannel , self . scrapli_connection . channel ) starting_write_log_count = len ( self . scrapli_connection . channel . captured_writes ) self . scrapli_connection_standard_on_open ( self . scrapli_connection ) # type: ignore ending_write_log_count = len ( self . scrapli_connection . channel . captured_writes ) write_log_slice = ending_write_log_count - starting_write_log_count on_open_writes = self . scrapli_connection . channel . captured_writes [ - write_log_slice :] # all we need to do here is to fetch the commands that were sent, then we can \"handle\" them # with the standard collection (since we already handle disconnects there), we can assume # with reasonable safety that each command will really come in \"pairs\" -- the command itself # and a return. after reversing the list we can just get every other list item on_open_writes . reverse () self . on_open_inputs = on_open_writes [ 1 :: 2 ] def _collect_on_close_inputs ( self ) -> None : \"\"\" Private method to figure out what the \"on_close\" commands are Args: N/A Returns: None Raises: None \"\"\" self . scrapli_connection . acquire_priv ( self . scrapli_connection_default_desired_privilege_level ) logger . info ( \"collecting on close inputs\" ) self . scrapli_connection . channel = cast ( ScrapliCollectorChannel , self . scrapli_connection . channel ) starting_write_log_count = len ( self . scrapli_connection . channel . captured_writes ) self . scrapli_connection_standard_on_close ( self . scrapli_connection ) # type: ignore ending_write_log_count = len ( self . scrapli_connection . channel . captured_writes ) write_log_slice = ending_write_log_count - starting_write_log_count on_close_writes = self . scrapli_connection . channel . captured_writes [ - write_log_slice :] # all we need to do here is to fetch the commands that were sent, then we can \"handle\" them # with the standard collection (since we already handle disconnects there), we can assume # with reasonable safety that each command will really come in \"pairs\" -- the command itself # and a return. after reversing the list we can just get every other list item on_close_writes . reverse () self . on_close_inputs = on_close_writes [ 1 :: 2 ] # the connection *should* have closed at this point, so we'll check that and reopen, because # we didnt do a \"normal\" close (at the driver level) we maybe cant check with \"isalive()\" try : self . scrapli_connection . get_prompt () except ScrapliConnectionError : logger . debug ( \"connection closed, re-opening\" ) self . open () def _collect_standard_event ( self , channel_input : str ) -> None : \"\"\" Private method to execute and record commands provided to the Collector Runs the commands at *all* priv levels so that we can build more context about how the device behaves Args: channel_input: input to send Returns: None Raises: None \"\"\" on_open_enabled_key = \"post_on_open\" if self . on_open_enabled else \"pre_on_open\" for priv_level in self . scrapli_connection . privilege_levels : logger . info ( f \"collecting input { channel_input } for priv level { priv_level } \" ) self . scrapli_connection . acquire_priv ( priv_level ) try : raw_output , _ = self . scrapli_connection . channel . send_input_and_read ( channel_input = channel_input , expected_outputs = self . all_expected_patterns , # especially nxos in vrouter is v v v slow.... read_duration = READ_DURATION , ) except ScrapliConnectionError : logger . debug ( \"connection closed connection, documenting and re-opening\" ) closes_connection = True channel_output = \"__CLOSES_CONNECTION__\" returns_prompt = False # because we use \"send_input_and_read\" if we lose the connection during this the # transport timeout will have been set to 2s or something during the send input # and read event, we want to make sure to reset it back to \"normal\" after this # failure self . scrapli_connection . timeout_transport = ( self . scrapli_connection_original_timeout_transport ) # reopen the connection so things can continue! self . open () else : closes_connection = False channel_output = self . _strip_remaining_ansi ( raw_output = raw_output ) returns_prompt = True if self . paging_indicator . encode () in raw_output : logger . debug ( \"encountered paging indicator, sending escape string\" ) self . scrapli_connection . channel . write ( channel_input = self . paging_escape_string ) self . scrapli_connection . channel . send_return () returns_prompt = False result_privilege_level = self . _get_current_privilege_level_name () final_channel_output = self . _strip_leading_newline ( channel_output = channel_output ) channel_input_event = StandardEvent ( channel_output = final_channel_output , result_privilege_level = result_privilege_level , returns_prompt = returns_prompt , closes_connection = closes_connection , ) self . events [ priv_level ][ on_open_enabled_key ][ channel_input ] = channel_input_event def _collect_interactive_event_hidden_input ( self , channel_input : str , channel_response : str ) -> bytes : \"\"\" Send \"hidden\" input during interactive event collection Args: channel_input: input to send channel_response: response to expect Returns: bytes: raw bytes read from channel Raises: None \"\"\" _channel_input = channel_input if channel_input == \"__AUTH_SECONDARY__\" : _channel_input = self . scrapli_connection . auth_secondary self . scrapli_connection . channel . write ( channel_input = _channel_input ) self . scrapli_connection . channel . send_return () bytes_channel_outputs = [ channel_output . encode () for channel_output in self . all_expected_patterns ] bytes_channel_outputs . append ( channel_response . encode ()) raw_output : bytes = self . scrapli_connection . channel . _read_until_prompt_or_time ( channel_outputs = bytes_channel_outputs , # especially nxos in vrouter is v v v slow.... read_duration = READ_DURATION , ) return raw_output def _collect_interactive_event_standard_input ( self , channel_input : str , channel_response : str ) -> bytes : \"\"\" Send \"standard\" input during interactive event collection Args: channel_input: input to send channel_response: response to expect Returns: bytes: raw bytes read from channel Raises: None \"\"\" all_patterns_and_expected_interact_prompt = copy ( self . all_expected_patterns ) all_patterns_and_expected_interact_prompt . append ( channel_response ) raw_output , _ = self . scrapli_connection . channel . send_input_and_read ( channel_input = channel_input , expected_outputs = all_patterns_and_expected_interact_prompt , # especially nxos in vrouter is v v v slow.... read_duration = READ_DURATION , ) if channel_input == \"\" : # if we just send a return, we'll end up w/ two newlines before the prompt or whatever # output we get, so let's remove the leading devices comms_return_char slice_length = len ( self . scrapli_connection . comms_return_char ) final_channel_output = raw_output [ slice_length :] return final_channel_output # type: ignore return raw_output # type: ignore def _collect_interactive_parse_channel_input ( self , channel_input : str , hidden_input : bool ) -> str : \"\"\" Parse the response to put in the StandardEvent Args: channel_input: input to send hidden_input: bool if channel_input was hidden Returns: str: channel input to put into collection dict Raises: None \"\"\" _channel_input = channel_input if hidden_input and channel_input == \"__AUTH_SECONDARY__\" : _channel_input = \"__AUTH_SECONDARY__\" elif hidden_input : _channel_input = \"__REDACTED__\" elif not channel_input : _channel_input = self . scrapli_connection . comms_return_char return _channel_input def _collect_interactive_event ( self , interact_event : List [ Tuple [ str , str , bool ]]) -> None : \"\"\" Private method to execute and record all interactive commands provided to the Collector Runs the commands at *all* priv levels so that we can build more context about how the device behaves Args: interact_event: interactive event to capture Returns: None Raises: None \"\"\" on_open_enabled_key = \"post_on_open\" if self . on_open_enabled else \"pre_on_open\" for priv_level in self . scrapli_connection . privilege_levels : self . scrapli_connection . acquire_priv ( priv_level ) logger . info ( f \"collecting interactive event { interact_event } for priv level { priv_level } \" ) interactive_event = InteractiveEvent ( event_steps = []) initiating_channel_input = interact_event [ 0 ][ 0 ] for interact_step in interact_event : channel_input = interact_step [ 0 ] channel_response = interact_step [ 1 ] try : hidden_input = interact_step [ 2 ] except IndexError : hidden_input = False if hidden_input : raw_output = self . _collect_interactive_event_hidden_input ( channel_input = channel_input , channel_response = channel_response ) else : raw_output = self . _collect_interactive_event_standard_input ( channel_input = channel_input , channel_response = channel_response ) returns_prompt = True if self . paging_indicator . encode () in raw_output : self . scrapli_connection . channel . write ( channel_input = self . paging_escape_string ) self . scrapli_connection . channel . send_return () returns_prompt = False _channel_input = self . _collect_interactive_parse_channel_input ( channel_input = channel_input , hidden_input = hidden_input ) final_channel_output = self . _strip_leading_newline ( channel_output = raw_output . decode () ) step = InteractStep ( channel_input = _channel_input , channel_output = final_channel_output , hidden_input = hidden_input , returns_prompt = returns_prompt , ) interactive_event . event_steps . append ( step ) # type: ignore if returns_prompt is False : # probably not likely to happen during interactive... but maybe? break if any ( pattern in raw_output . decode () for pattern in self . all_expected_patterns ): # we are done w/ the \"event\" because we are back at a prompt we know break interactive_event . result_privilege_level = self . _get_current_privilege_level_name () self . events [ priv_level ][ on_open_enabled_key ][ initiating_channel_input ] = interactive_event def _collect_unknown_events ( self ) -> None : \"\"\" Private method to execute and record \"unknown\" commands Runs the commands at *all* priv levels so that we can build more context about how the device behaves Args: N/A Returns: None Raises: None \"\"\" on_open_enabled_key = \"post_on_open\" if self . on_open_enabled else \"pre_on_open\" for priv_level in self . scrapli_connection . privilege_levels : self . scrapli_connection . acquire_priv ( priv_level ) logger . info ( f \"collecting unknown input for priv level { priv_level } \" ) try : raw_output , _ = self . scrapli_connection . channel . send_input_and_read ( channel_input = \"__UNKNOWN_INPUT__\" , expected_outputs = self . all_expected_patterns ) except ScrapliConnectionError : closes_connection = True channel_output = \"__CLOSES_CONNECTION__\" returns_prompt = False # reopen the connection so things can continue! self . open () else : closes_connection = False channel_output = self . _strip_remaining_ansi ( raw_output = raw_output ) returns_prompt = True if self . paging_indicator . encode () in raw_output : self . scrapli_connection . channel . write ( channel_input = self . paging_escape_string ) self . scrapli_connection . channel . send_return () returns_prompt = False result_privilege_level = self . _get_current_privilege_level_name () final_channel_output = self . _strip_leading_newline ( channel_output = channel_output ) channel_unknown_input_event = StandardEvent ( channel_output = final_channel_output , result_privilege_level = result_privilege_level , returns_prompt = returns_prompt , closes_connection = closes_connection , ) self . unknown_events [ priv_level ][ on_open_enabled_key ] = channel_unknown_input_event def _collect_priv_and_open_close ( self ) -> None : \"\"\" Collect privilege escalation/deescalation and on open/close inputs/outputs Args: N/A Returns: None Raises: N/A \"\"\" self . _collect_on_open_inputs () for on_open_input in self . on_open_inputs : self . _collect_standard_event ( channel_input = on_open_input ) self . _collect_on_close_inputs () for on_close_input in self . on_close_inputs : self . _collect_standard_event ( channel_input = on_close_input ) for privilege_escalate_input in self . _privilege_escalate_inputs : self . _collect_standard_event ( channel_input = privilege_escalate_input ) for privilege_deescalate_input in self . _privilege_deescalate_inputs : self . _collect_standard_event ( channel_input = privilege_deescalate_input ) for interact_privilege_event in self . _interact_privilege_escalations : self . _collect_interactive_event ( interact_event = interact_privilege_event ) def _collect ( self ) -> None : \"\"\" Private method to execute all the \"standard\" and \"interactive\" collections Args: N/A Returns: None Raises: None \"\"\" self . _collect_unknown_events () for channel_input in self . channel_inputs : self . _collect_standard_event ( channel_input = channel_input ) for interact_event in self . interact_events : self . _collect_interactive_event ( interact_event = interact_event ) def collect ( self ) -> None : \"\"\" Primary public collection method Args: N/A Returns: None Raises: None \"\"\" self . _collect_privilege_prompts () self . _extend_all_expected_prompts () self . _collect_priv_and_open_close () if isinstance ( self . scrapli_connection , EOSDriver ): # arista will leave paging enabled even after you exit a connection... kinda throws # things off! so we'll put it back... hate having one off things like this but not sure # there is another easy fix self . scrapli_connection . send_command ( command = \"no terminal length\" ) self . _collect () # close the connection, and reassign the \"normal\" on open so we can capture everything # with \"on_open\" things done (paging disabled and whatever else) self . close () self . scrapli_connection . on_open = self . scrapli_connection_standard_on_open self . scrapli_connection . on_close = self . scrapli_connection_standard_on_close self . open () self . on_open_enabled = True self . _collect_priv_and_open_close () self . _collect () def _serialize ( self ) -> None : \"\"\" Serialize the collected data so it can be dumped to yaml nicely Args: N/A Returns: None Raises: None \"\"\" logger . debug ( \"serializing collected inputs to be yaml friendly\" ) for privilege_level in self . events : for on_open_state in self . events [ privilege_level ]: for channel_input in self . events [ privilege_level ][ on_open_state ]: self . dumpable_events [ privilege_level ][ on_open_state ][ channel_input ] = asdict ( self . events [ privilege_level ][ on_open_state ][ channel_input ] ) self . dumpable_events [ privilege_level ][ on_open_state ][ channel_input ][ \"type\" ] = ( \"standard\" if isinstance ( self . events [ privilege_level ][ on_open_state ][ channel_input ], StandardEvent , ) else \"interactive\" ) for privilege_level in self . unknown_events : for on_open_state in self . unknown_events [ privilege_level ]: self . dumpable_unknown_events [ privilege_level ][ on_open_state ] = asdict ( self . unknown_events [ privilege_level ][ on_open_state ] ) def dump ( self ) -> None : \"\"\" Primary public dump method to dump collected data out to yaml Args: N/A Returns: None Raises: None \"\"\" self . _serialize () logger . debug ( \"dumping collected inputs to yaml\" ) dumpable_dict : Dict [ str , Any ] = {} dumpable_dict [ \"events\" ] = self . dumpable_events dumpable_dict [ \"unknown_events\" ] = self . dumpable_unknown_events dumpable_dict [ \"initial_privilege_level\" ] = self . initial_privilege_level dumpable_dict [ \"privilege_level_prompts\" ] = self . privilege_level_prompts dumpable_dict [ \"on_open_inputs\" ] = self . on_open_inputs with open ( self . collector_session_filename , \"w\" , encoding = \"utf-8\" ) as f : yaml = YAML () yaml . indent ( mapping = 2 , sequence = 4 , offset = 2 ) yaml . dump ( dumpable_dict , f )","title":"ScrapliCollector"},{"location":"reference/server/collector/#server.collector.ScrapliCollector.__init__","text":"Scrapli Collector Class Patches scrapli so that we can record the connection inputs and outputs from the channel Parameters: Name Type Description Default channel_inputs List [ str ] list of channel inputs to record required interact_events List [ List [ Tuple [ str , str , bool ]]] list of interact events to record required paging_indicator str string that indicates when the device is prompting for user input to continue paging the output required paging_escape_string str string to use to escape the paging prompt '\\x1b' scrapli_connection Optional [ NetworkDriver ] already instantiated scrapli connection -- you can pass this or just the kwargs necessary to instantiate one for you None collector_session_filename str name of file to save collector session output to 'scrapli_replay_collector_session.yaml' kwargs kwargs to instantiate scrapli connection, must include platform as this will instantiate the connection via Scrapli factory class! required Returns: Type Description None None Raises: Type Description ScrapliReplayException if no valid scrapli connection or connection data present Source code in server/collector.pydef __init__ ( self , channel_inputs : List [ str ], interact_events : List [ List [ Tuple [ str , str , bool ]]], paging_indicator : str , paging_escape_string : str = \" \\x1b \" , scrapli_connection : Optional [ NetworkDriver ] = None , collector_session_filename : str = \"scrapli_replay_collector_session.yaml\" , ** kwargs : Dict [ str , Any ], ) -> None : \"\"\" Scrapli Collector Class Patches scrapli so that we can record the connection inputs and outputs from the channel Args: channel_inputs: list of channel inputs to record interact_events: list of interact events to record paging_indicator: string that indicates when the device is prompting for user input to continue paging the output paging_escape_string: string to use to escape the paging prompt scrapli_connection: already instantiated scrapli connection -- you can pass this or just the kwargs necessary to instantiate one for you collector_session_filename: name of file to save collector session output to kwargs: kwargs to instantiate scrapli connection, *must* include platform as this will instantiate the connection via `Scrapli` factory class! Returns: None Raises: ScrapliReplayException: if no valid scrapli connection or connection data present \"\"\" logger . debug ( \"creating scrapli replay collector\" ) self . channel_inputs = channel_inputs self . interact_events = interact_events self . paging_indicator = paging_indicator self . paging_escape_string = paging_escape_string self . collector_session_filename = collector_session_filename self . channel_log = BytesIO () # making the channel log unclose-able so we can retain the channel log even throughout # connections being closed self . channel_log . close = lambda : None # type: ignore if scrapli_connection : logger . debug ( \"scrapli connection provided\" ) self . scrapli_connection = scrapli_connection self . scrapli_connection . _base_channel_args . channel_log = self . channel_log if self . scrapli_connection . isalive (): # want to close it so we can reset the on open (paging stuff) self . scrapli_connection . close () else : logger . debug ( \"no scrapli connection provided, building one from kwargs\" ) if not kwargs . get ( \"platform\" ): msg = \"must provide 'platform' as a kwarg if you dont provide a connection object!\" logger . critical ( msg ) raise ScrapliReplayException ( msg ) if kwargs . pop ( \"channel_log\" , None ): user_warning ( title = \"Ignored argument!\" , message = \"channel_log arg provided, replacing with ScrapliCollector channel_log\" , ) self . scrapli_connection = Scrapli ( channel_log = self . channel_log , ** kwargs , # type: ignore ) self . scrapli_connection_original_timeout_transport = ( self . scrapli_connection . timeout_transport ) # update the channel to be an instance of the ScrapliCollectorChannel self . scrapli_connection . channel = ScrapliCollectorChannel ( transport = self . scrapli_connection . transport , base_channel_args = self . scrapli_connection . _base_channel_args , ) # store the \"normal\" default desired privilege level self . scrapli_connection_default_desired_privilege_level = ( self . scrapli_connection . default_desired_privilege_level ) # store and reset the on_open/on_close to None so we can manage when we want to disable # paging and such self . scrapli_connection_standard_on_open = self . scrapli_connection . on_open self . scrapli_connection_standard_on_close = self . scrapli_connection . on_close self . scrapli_connection . on_open = None self . scrapli_connection . on_close = None # bool to just indicate if we have ran the on open stuff self . on_open_enabled = False self . on_open_inputs : List [ str ] = [] self . on_close_inputs : List [ str ] = [] # flag to indicate if we have collected priv prompts yet self . collected_priv_prompts = False # Future: support recording any login auth/banner stuff too platform_privilege_levels = self . scrapli_connection . privilege_levels . keys () self . initial_privilege_level = \"\" self . privilege_level_prompts : Dict [ str , str ] = { privilege_level_name : \"\" for privilege_level_name in platform_privilege_levels } # commands captured from driver privilege levels for escalate/deescalate self . _privilege_escalate_inputs : List [ str ] = [] self . _privilege_deescalate_inputs : List [ str ] = [] self . _interact_privilege_escalations : List [ List [ Tuple [ str , str , bool ]]] = [] self . events : Dict [ str , Dict [ str , Dict [ str , Union [ StandardEvent , InteractiveEvent ]]]] = { privilege_level_name : { \"pre_on_open\" : {}, \"post_on_open\" : {}} for privilege_level_name in platform_privilege_levels } self . dumpable_events : Dict [ str , Dict [ str , Dict [ str , Any ]]] = { privilege_level_name : { \"pre_on_open\" : {}, \"post_on_open\" : {}} for privilege_level_name in platform_privilege_levels } # this would be similar to the events but for an unknown input, like we have in the v2 thing self . unknown_events : Dict [ str , Dict [ str , Optional [ StandardEvent ]]] = { privilege_level_name : { \"pre_on_open\" : None , \"post_on_open\" : None } for privilege_level_name in platform_privilege_levels } self . dumpable_unknown_events : Dict [ str , Dict [ str , Optional [ Any ]]] = { privilege_level_name : { \"pre_on_open\" : None , \"post_on_open\" : None } for privilege_level_name in platform_privilege_levels } # this is a list of all possible prompts -- because we are going to use send and expect we # need to be able to expect any prompt OR the paging pattern... so after open and we collect # the prompts for each priv level, we can build this list self . all_expected_patterns = [ self . paging_indicator ] self . _determine_privilege_inputs ()","title":"__init__()"},{"location":"reference/server/collector/#server.collector.ScrapliCollector.close","text":"Close the Collector and the underlying scrapli connection Returns: Type Description None None Source code in server/collector.py 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 def close ( self ) -> None : \"\"\" Close the Collector and the underlying scrapli connection Args: N/A Returns: None Raises: None \"\"\" self . scrapli_connection . close ()","title":"close()"},{"location":"reference/server/collector/#server.collector.ScrapliCollector.collect","text":"Primary public collection method Returns: Type Description None None Source code in server/collector.py 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 def collect ( self ) -> None : \"\"\" Primary public collection method Args: N/A Returns: None Raises: None \"\"\" self . _collect_privilege_prompts () self . _extend_all_expected_prompts () self . _collect_priv_and_open_close () if isinstance ( self . scrapli_connection , EOSDriver ): # arista will leave paging enabled even after you exit a connection... kinda throws # things off! so we'll put it back... hate having one off things like this but not sure # there is another easy fix self . scrapli_connection . send_command ( command = \"no terminal length\" ) self . _collect () # close the connection, and reassign the \"normal\" on open so we can capture everything # with \"on_open\" things done (paging disabled and whatever else) self . close () self . scrapli_connection . on_open = self . scrapli_connection_standard_on_open self . scrapli_connection . on_close = self . scrapli_connection_standard_on_close self . open () self . on_open_enabled = True self . _collect_priv_and_open_close () self . _collect ()","title":"collect()"},{"location":"reference/server/collector/#server.collector.ScrapliCollector.dump","text":"Primary public dump method to dump collected data out to yaml Returns: Type Description None None Source code in server/collector.py 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 def dump ( self ) -> None : \"\"\" Primary public dump method to dump collected data out to yaml Args: N/A Returns: None Raises: None \"\"\" self . _serialize () logger . debug ( \"dumping collected inputs to yaml\" ) dumpable_dict : Dict [ str , Any ] = {} dumpable_dict [ \"events\" ] = self . dumpable_events dumpable_dict [ \"unknown_events\" ] = self . dumpable_unknown_events dumpable_dict [ \"initial_privilege_level\" ] = self . initial_privilege_level dumpable_dict [ \"privilege_level_prompts\" ] = self . privilege_level_prompts dumpable_dict [ \"on_open_inputs\" ] = self . on_open_inputs with open ( self . collector_session_filename , \"w\" , encoding = \"utf-8\" ) as f : yaml = YAML () yaml . indent ( mapping = 2 , sequence = 4 , offset = 2 ) yaml . dump ( dumpable_dict , f )","title":"dump()"},{"location":"reference/server/collector/#server.collector.ScrapliCollector.open","text":"Open the Collector and the underlying scrapli connection Returns: Type Description None None Source code in server/collector.py 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 def open ( self ) -> None : \"\"\" Open the Collector and the underlying scrapli connection Args: N/A Returns: None Raises: None \"\"\" self . scrapli_connection . open () if not self . initial_privilege_level : # only need to fetch this on the initial open, not for subsequent opens when we need # to reconnect! logger . debug ( \"no initial privilege level set, must be first open... setting initial privilege \" \"level\" ) self . initial_privilege_level = self . _get_current_privilege_level_name ()","title":"open()"},{"location":"reference/server/server/","text":"scrapli_replay.server.server BaseSSHServerSession \u00b6 Bases: SSHServerSession Source code in server/server.pyclass BaseSSHServerSession ( SSHServerSession ): # type: ignore def __init__ ( self , collect_data : Dict [ str , Any ]) -> None : \"\"\" SSH Server Session class Inherits from asyncssh and provides some extra context/setup for the mock network devices Args: collect_data: dictionary of the collected data necessary to run a mock server Returns: None Raises: N/A \"\"\" logger . debug ( \"ssh session initiated\" ) self . _chan : SSHServerChannel [ Any ] self . _hide_input = False self . _interacting = False self . _interacting_event : Optional [ Dict [ str , Any ]] = None self . _interact_index = 0 self . _on_open_state = OnOpenState . PRE self . collect_data = collect_data self . _on_open_commands_list = self . collect_data [ \"on_open_inputs\" ] . copy () self . current_privilege_level = self . collect_data [ \"initial_privilege_level\" ] def connection_made ( self , chan : SSHServerChannel [ Any ]) -> None : \"\"\" SSH Connection made! Args: chan: channel editor object Returns: None Raises: N/A \"\"\" self . _chan = chan def shell_requested ( self ) -> bool : \"\"\" Handle shell requested; always return True Args: N/A Returns: bool: always True! Raises: N/A \"\"\" return True def _return_current_prompt ( self ) -> str : \"\"\" Return the current privilege level prompt Args: N/A Returns: str: prompt for current privilege level Raises: N/A \"\"\" privilege_level : str = self . collect_data [ \"privilege_level_prompts\" ][ self . current_privilege_level ] return privilege_level def session_started ( self ) -> None : \"\"\" SSH session started Initial SSH session started Args: N/A Returns: None Raises: N/A \"\"\" self . repaint_prompt () def repaint_prompt ( self ) -> None : \"\"\" Paint the prompt to the ssh channel Args: N/A Returns: None Raises: N/A \"\"\" logger . debug ( \"writing device prompt\" ) self . _chan . write ( self . _return_current_prompt ()) def interactive_event ( self , channel_input : str ) -> None : \"\"\" Handle \"interactive\" channel input Args: channel_input: input sent from the user on the channel Returns: None Raises: ScrapliReplayServerError: if we get None for self._interacting_data \"\"\" if not self . _interacting_event : raise ScrapliReplayServerError ( \"attempting to handle interactive event but not in interacting mode. this should\" \" never happen, definitely a bug\" ) if self . _hide_input : # un hide input! logger . debug ( \"re-enabling channel echo\" ) self . _chan . set_echo ( echo = True ) # type: ignore self . _hide_input = False event_step = self . _interacting_event [ \"event_steps\" ][ self . _interact_index ] if event_step [ \"hidden_input\" ]: if channel_input != \"scrapli\" : # if we have bad auth, basically we'll get stuck here forever... way easier than # trying to model/record all the different device types auth failures i think... logger . warning ( \"interactive event input is 'hidden' but input is not 'scrapli'\" ) self . _interact_index -= 1 event_step = self . _interacting_event [ \"event_steps\" ][ self . _interact_index ] elif channel_input != event_step [ \"channel_input\" ]: # bail out and send an invalid input message for the current priv level logger . warning ( \"interactive event input does not match recorded event\" ) self . _interacting = False self . _interacting_event = None self . _interact_index = 0 self . unknown_event () return self . _chan . write ( event_step [ \"channel_output\" ]) if self . _interact_index + 1 == len ( self . _interacting_event [ \"event_steps\" ]): # this is the last step, reset all the things logger . debug ( \"interactive event complete, resetting interacting mode\" ) self . current_privilege_level = self . _interacting_event [ \"result_privilege_level\" ] self . _interacting = False self . _interacting_event = None self . _interact_index = 0 return self . _interact_index += 1 if self . _interacting_event [ \"event_steps\" ][ self . _interact_index ][ \"hidden_input\" ]: # next event is \"hidden\"... so... hide it... logger . debug ( \"next interact event has hidden input, disabling channel echo\" ) self . _chan . set_echo ( echo = False ) # type: ignore self . _hide_input = True def standard_event ( self , channel_input : str , event : Dict [ str , Any ]) -> None : \"\"\" Handle \"normal\" command channel input Args: channel_input: input sent from the user on the channel event: the event data for the given input Returns: None Raises: N/A \"\"\" # i think if one of these is true both should always be... but just in case... if event [ \"channel_output\" ] == \"__CLOSES_CONNECTION__\" or event [ \"closes_connection\" ] is True : logger . debug ( \"channel input should close connection, closing...\" ) # write empty string to bump the connection closed message to a new line like a normal # device self . _chan . write ( \"\" ) self . eof_received () # reset privilege level and on open state self . current_privilege_level = self . collect_data [ \"initial_privilege_level\" ] self . _on_open_state = OnOpenState . PRE self . _on_open_commands_list = self . collect_data [ \"on_open_inputs\" ] . copy () return self . _chan . write ( event [ \"channel_output\" ]) self . current_privilege_level = event [ \"result_privilege_level\" ] # try to decide if on open things are \"done\" if channel_input in self . _on_open_commands_list : logger . debug ( \"an 'on open' command was received, popping from on open commands list\" ) self . _on_open_commands_list . pop ( self . _on_open_commands_list . index ( channel_input )) if not self . _on_open_commands_list : logger . debug ( \"an 'on open' commands all executed, setting on open state to 'POST'\" ) self . _on_open_state = OnOpenState . POST def unknown_event ( self ) -> None : \"\"\" Handle unknown channel input Args: N/A Returns: None Raises: N/A \"\"\" logger . debug ( \"an unknown event has been initiated\" ) event = self . collect_data [ \"unknown_events\" ][ self . current_privilege_level ][ self . _on_open_state . value ] self . _chan . write ( event [ \"channel_output\" ]) if event [ \"closes_connection\" ] is True : logger . debug ( \"channel input should close connection, closing...\" ) self . eof_received () self . current_privilege_level = event [ \"result_privilege_level\" ] def data_received ( self , data : str , datatype : Optional [ int ]) -> None : \"\"\" Handle data received on ssh channel Args: data: string of data sent to channel datatype: dunno! in base class though :) Returns: None Raises: N/A \"\"\" _ = datatype # in the future we can cutoff the inputs if it is over X width if disable width has not yet # been ran -- not needed now but could be cool; if we just send a return, we should NOT # strip that! channel_input = data if data == \" \\n \" else data . rstrip () logger . debug ( f \"received channel input: ' { channel_input } '\" ) if self . _interacting : logger . debug ( \"already in interacting mode, continuing with interact events\" ) self . interactive_event ( channel_input = channel_input ) return if channel_input == \" \\n \" : logger . debug ( \"channel input was return, just repaint prompt\" ) self . repaint_prompt () return current_event = self . collect_data [ \"events\" ][ self . current_privilege_level ][ self . _on_open_state . value ] . get ( channel_input ) if current_event : if current_event [ \"type\" ] == \"standard\" : logger . debug ( \"standard channel event\" ) self . standard_event ( channel_input = channel_input , event = current_event ) else : logger . debug ( \"interactive channel event\" ) # set to interacting mode, assign the current interactive event self . _interacting = True self . _interacting_event = current_event self . interactive_event ( channel_input = channel_input ) return logger . debug ( \"unknown channel event\" ) self . unknown_event () def eof_received ( self ) -> bool : \"\"\" Handle eof Args: N/A Returns: None Raises: N/A \"\"\" self . _chan . exit ( 0 ) return True def break_received ( self , msec : float ) -> bool : \"\"\" Handle break Args: msec: dunno, but in base class implementation :) Returns: None Raises: N/A \"\"\" self . eof_received () return True __init__ ( collect_data : Dict [ str , Any ]) -> None \u00b6 SSH Server Session class Inherits from asyncssh and provides some extra context/setup for the mock network devices Parameters: Name Type Description Default collect_data Dict [ str , Any ] dictionary of the collected data necessary to run a mock server required Returns: Type Description None None Source code in server/server.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def __init__ ( self , collect_data : Dict [ str , Any ]) -> None : \"\"\" SSH Server Session class Inherits from asyncssh and provides some extra context/setup for the mock network devices Args: collect_data: dictionary of the collected data necessary to run a mock server Returns: None Raises: N/A \"\"\" logger . debug ( \"ssh session initiated\" ) self . _chan : SSHServerChannel [ Any ] self . _hide_input = False self . _interacting = False self . _interacting_event : Optional [ Dict [ str , Any ]] = None self . _interact_index = 0 self . _on_open_state = OnOpenState . PRE self . collect_data = collect_data self . _on_open_commands_list = self . collect_data [ \"on_open_inputs\" ] . copy () self . current_privilege_level = self . collect_data [ \"initial_privilege_level\" ] break_received ( msec : float ) -> bool \u00b6 Handle break Parameters: Name Type Description Default msec float dunno, but in base class implementation :) required Returns: Type Description bool None Source code in server/server.py 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 def break_received ( self , msec : float ) -> bool : \"\"\" Handle break Args: msec: dunno, but in base class implementation :) Returns: None Raises: N/A \"\"\" self . eof_received () return True connection_made ( chan : SSHServerChannel [ Any ]) -> None \u00b6 SSH Connection made! Parameters: Name Type Description Default chan SSHServerChannel [ Any ] channel editor object required Returns: Type Description None None Source code in server/server.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def connection_made ( self , chan : SSHServerChannel [ Any ]) -> None : \"\"\" SSH Connection made! Args: chan: channel editor object Returns: None Raises: N/A \"\"\" self . _chan = chan data_received ( data : str , datatype : Optional [ int ]) -> None \u00b6 Handle data received on ssh channel Parameters: Name Type Description Default data str string of data sent to channel required datatype Optional [ int ] dunno! in base class though :) required Returns: Type Description None None Source code in server/server.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 def data_received ( self , data : str , datatype : Optional [ int ]) -> None : \"\"\" Handle data received on ssh channel Args: data: string of data sent to channel datatype: dunno! in base class though :) Returns: None Raises: N/A \"\"\" _ = datatype # in the future we can cutoff the inputs if it is over X width if disable width has not yet # been ran -- not needed now but could be cool; if we just send a return, we should NOT # strip that! channel_input = data if data == \" \\n \" else data . rstrip () logger . debug ( f \"received channel input: ' { channel_input } '\" ) if self . _interacting : logger . debug ( \"already in interacting mode, continuing with interact events\" ) self . interactive_event ( channel_input = channel_input ) return if channel_input == \" \\n \" : logger . debug ( \"channel input was return, just repaint prompt\" ) self . repaint_prompt () return current_event = self . collect_data [ \"events\" ][ self . current_privilege_level ][ self . _on_open_state . value ] . get ( channel_input ) if current_event : if current_event [ \"type\" ] == \"standard\" : logger . debug ( \"standard channel event\" ) self . standard_event ( channel_input = channel_input , event = current_event ) else : logger . debug ( \"interactive channel event\" ) # set to interacting mode, assign the current interactive event self . _interacting = True self . _interacting_event = current_event self . interactive_event ( channel_input = channel_input ) return logger . debug ( \"unknown channel event\" ) self . unknown_event () eof_received () -> bool \u00b6 Handle eof Returns: Type Description bool None Source code in server/server.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 def eof_received ( self ) -> bool : \"\"\" Handle eof Args: N/A Returns: None Raises: N/A \"\"\" self . _chan . exit ( 0 ) return True interactive_event ( channel_input : str ) -> None \u00b6 Handle \"interactive\" channel input Parameters: Name Type Description Default channel_input str input sent from the user on the channel required Returns: Type Description None None Raises: Type Description ScrapliReplayServerError if we get None for self._interacting_data Source code in server/server.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 def interactive_event ( self , channel_input : str ) -> None : \"\"\" Handle \"interactive\" channel input Args: channel_input: input sent from the user on the channel Returns: None Raises: ScrapliReplayServerError: if we get None for self._interacting_data \"\"\" if not self . _interacting_event : raise ScrapliReplayServerError ( \"attempting to handle interactive event but not in interacting mode. this should\" \" never happen, definitely a bug\" ) if self . _hide_input : # un hide input! logger . debug ( \"re-enabling channel echo\" ) self . _chan . set_echo ( echo = True ) # type: ignore self . _hide_input = False event_step = self . _interacting_event [ \"event_steps\" ][ self . _interact_index ] if event_step [ \"hidden_input\" ]: if channel_input != \"scrapli\" : # if we have bad auth, basically we'll get stuck here forever... way easier than # trying to model/record all the different device types auth failures i think... logger . warning ( \"interactive event input is 'hidden' but input is not 'scrapli'\" ) self . _interact_index -= 1 event_step = self . _interacting_event [ \"event_steps\" ][ self . _interact_index ] elif channel_input != event_step [ \"channel_input\" ]: # bail out and send an invalid input message for the current priv level logger . warning ( \"interactive event input does not match recorded event\" ) self . _interacting = False self . _interacting_event = None self . _interact_index = 0 self . unknown_event () return self . _chan . write ( event_step [ \"channel_output\" ]) if self . _interact_index + 1 == len ( self . _interacting_event [ \"event_steps\" ]): # this is the last step, reset all the things logger . debug ( \"interactive event complete, resetting interacting mode\" ) self . current_privilege_level = self . _interacting_event [ \"result_privilege_level\" ] self . _interacting = False self . _interacting_event = None self . _interact_index = 0 return self . _interact_index += 1 if self . _interacting_event [ \"event_steps\" ][ self . _interact_index ][ \"hidden_input\" ]: # next event is \"hidden\"... so... hide it... logger . debug ( \"next interact event has hidden input, disabling channel echo\" ) self . _chan . set_echo ( echo = False ) # type: ignore self . _hide_input = True repaint_prompt () -> None \u00b6 Paint the prompt to the ssh channel Returns: Type Description None None Source code in server/server.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def repaint_prompt ( self ) -> None : \"\"\" Paint the prompt to the ssh channel Args: N/A Returns: None Raises: N/A \"\"\" logger . debug ( \"writing device prompt\" ) self . _chan . write ( self . _return_current_prompt ()) session_started () -> None \u00b6 SSH session started Initial SSH session started Returns: Type Description None None Source code in server/server.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 def session_started ( self ) -> None : \"\"\" SSH session started Initial SSH session started Args: N/A Returns: None Raises: N/A \"\"\" self . repaint_prompt () shell_requested () -> bool \u00b6 Handle shell requested; always return True Returns: Name Type Description bool bool always True! Source code in server/server.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 def shell_requested ( self ) -> bool : \"\"\" Handle shell requested; always return True Args: N/A Returns: bool: always True! Raises: N/A \"\"\" return True standard_event ( channel_input : str , event : Dict [ str , Any ]) -> None \u00b6 Handle \"normal\" command channel input Parameters: Name Type Description Default channel_input str input sent from the user on the channel required event Dict [ str , Any ] the event data for the given input required Returns: Type Description None None Source code in server/server.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 def standard_event ( self , channel_input : str , event : Dict [ str , Any ]) -> None : \"\"\" Handle \"normal\" command channel input Args: channel_input: input sent from the user on the channel event: the event data for the given input Returns: None Raises: N/A \"\"\" # i think if one of these is true both should always be... but just in case... if event [ \"channel_output\" ] == \"__CLOSES_CONNECTION__\" or event [ \"closes_connection\" ] is True : logger . debug ( \"channel input should close connection, closing...\" ) # write empty string to bump the connection closed message to a new line like a normal # device self . _chan . write ( \"\" ) self . eof_received () # reset privilege level and on open state self . current_privilege_level = self . collect_data [ \"initial_privilege_level\" ] self . _on_open_state = OnOpenState . PRE self . _on_open_commands_list = self . collect_data [ \"on_open_inputs\" ] . copy () return self . _chan . write ( event [ \"channel_output\" ]) self . current_privilege_level = event [ \"result_privilege_level\" ] # try to decide if on open things are \"done\" if channel_input in self . _on_open_commands_list : logger . debug ( \"an 'on open' command was received, popping from on open commands list\" ) self . _on_open_commands_list . pop ( self . _on_open_commands_list . index ( channel_input )) if not self . _on_open_commands_list : logger . debug ( \"an 'on open' commands all executed, setting on open state to 'POST'\" ) self . _on_open_state = OnOpenState . POST unknown_event () -> None \u00b6 Handle unknown channel input Returns: Type Description None None Source code in server/server.py 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 def unknown_event ( self ) -> None : \"\"\" Handle unknown channel input Args: N/A Returns: None Raises: N/A \"\"\" logger . debug ( \"an unknown event has been initiated\" ) event = self . collect_data [ \"unknown_events\" ][ self . current_privilege_level ][ self . _on_open_state . value ] self . _chan . write ( event [ \"channel_output\" ]) if event [ \"closes_connection\" ] is True : logger . debug ( \"channel input should close connection, closing...\" ) self . eof_received () self . current_privilege_level = event [ \"result_privilege_level\" ] BaseServer \u00b6 Bases: SSHServer Source code in server/server.pyclass BaseServer ( SSHServer ): def __init__ ( self , session : Type [ SSHServerSession ], collect_data : str ): # type: ignore \"\"\" Base Server class Args: session: asyncssh server session collect_data: yaml of session to load Returns: None Raises: N/A \"\"\" self . session = session with open ( collect_data , \"r\" , encoding = \"utf-8\" ) as f : self . collect_data = YAML . load ( f ) def session_requested ( self ) -> SSHServerSession : # type: ignore \"\"\" Session requested; return ServerSession object `ServerSession` set in `run` to be the appropriate SSHServerSession type for a given platform, i.e. `IOSXESSHServerSession` Args: N/A Returns: SSHServerSession: SSHServerSession Raises: N/A \"\"\" return self . session ( collect_data = self . collect_data ) # type: ignore def begin_auth ( self , username : str ) -> bool : \"\"\" Begin auth; always returns True Args: username: username for auth Returns: bool: always True Raises: N/A \"\"\" return True def password_auth_supported ( self ) -> bool : \"\"\" Password auth supported; always return True Args: N/A Returns: bool: always True Raises: N/A \"\"\" return True def public_key_auth_supported ( self ) -> bool : \"\"\" Public key auth supported; always return True Args: N/A Returns: bool: always True Raises: N/A \"\"\" return True def validate_password ( self , username : str , password : str ) -> bool : \"\"\" Validate provided username/password Args: username: username to check for auth password: password to check for auth Returns: bool: True if user/password is correct (scrapli/scrapli) Raises: N/A \"\"\" if username == password == \"scrapli\" : return True return False def validate_public_key ( self , username : str , key : SSHKey ) -> bool : \"\"\" Validate provided public key Args: username: username to check for auth key: asyncssh RSAKey to check for auth Returns: bool: True if ssh key is correct Raises: N/A \"\"\" if ( username == \"scrapli\" and key . get_fingerprint () == \"SHA256:rb1CVtQCkWBAzm1AxV7xR7BLBawUwFUlUVFVu+QYQBM\" ): return True return False __init__ ( session : Type [ SSHServerSession ], collect_data : str ) \u00b6 Base Server class Parameters: Name Type Description Default session Type [ SSHServerSession ] asyncssh server session required collect_data str yaml of session to load required Returns: Type Description None Source code in server/server.py 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 def __init__ ( self , session : Type [ SSHServerSession ], collect_data : str ): # type: ignore \"\"\" Base Server class Args: session: asyncssh server session collect_data: yaml of session to load Returns: None Raises: N/A \"\"\" self . session = session with open ( collect_data , \"r\" , encoding = \"utf-8\" ) as f : self . collect_data = YAML . load ( f ) begin_auth ( username : str ) -> bool \u00b6 Begin auth; always returns True Parameters: Name Type Description Default username str username for auth required Returns: Name Type Description bool bool always True Source code in server/server.py 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 def begin_auth ( self , username : str ) -> bool : \"\"\" Begin auth; always returns True Args: username: username for auth Returns: bool: always True Raises: N/A \"\"\" return True password_auth_supported () -> bool \u00b6 Password auth supported; always return True Returns: Name Type Description bool bool always True Source code in server/server.py 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 def password_auth_supported ( self ) -> bool : \"\"\" Password auth supported; always return True Args: N/A Returns: bool: always True Raises: N/A \"\"\" return True public_key_auth_supported () -> bool \u00b6 Public key auth supported; always return True Returns: Name Type Description bool bool always True Source code in server/server.py 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 def public_key_auth_supported ( self ) -> bool : \"\"\" Public key auth supported; always return True Args: N/A Returns: bool: always True Raises: N/A \"\"\" return True session_requested () -> SSHServerSession \u00b6 Session requested; return ServerSession object ServerSession set in run to be the appropriate SSHServerSession type for a given platform, i.e. IOSXESSHServerSession Returns: Name Type Description SSHServerSession SSHServerSession SSHServerSession Source code in server/server.py 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 def session_requested ( self ) -> SSHServerSession : # type: ignore \"\"\" Session requested; return ServerSession object `ServerSession` set in `run` to be the appropriate SSHServerSession type for a given platform, i.e. `IOSXESSHServerSession` Args: N/A Returns: SSHServerSession: SSHServerSession Raises: N/A \"\"\" return self . session ( collect_data = self . collect_data ) # type: ignore validate_password ( username : str , password : str ) -> bool \u00b6 Validate provided username/password Parameters: Name Type Description Default username str username to check for auth required password str password to check for auth required Returns: Name Type Description bool bool True if user/password is correct (scrapli/scrapli) Source code in server/server.py 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 def validate_password ( self , username : str , password : str ) -> bool : \"\"\" Validate provided username/password Args: username: username to check for auth password: password to check for auth Returns: bool: True if user/password is correct (scrapli/scrapli) Raises: N/A \"\"\" if username == password == \"scrapli\" : return True return False validate_public_key ( username : str , key : SSHKey ) -> bool \u00b6 Validate provided public key Parameters: Name Type Description Default username str username to check for auth required key SSHKey asyncssh RSAKey to check for auth required Returns: Name Type Description bool bool True if ssh key is correct Source code in server/server.py 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 def validate_public_key ( self , username : str , key : SSHKey ) -> bool : \"\"\" Validate provided public key Args: username: username to check for auth key: asyncssh RSAKey to check for auth Returns: bool: True if ssh key is correct Raises: N/A \"\"\" if ( username == \"scrapli\" and key . get_fingerprint () == \"SHA256:rb1CVtQCkWBAzm1AxV7xR7BLBawUwFUlUVFVu+QYQBM\" ): return True return False start ( port : int = 2222 , collect_data : str = 'scrapli_replay.yaml' ) -> None async \u00b6 Temporary run server entrypoint Parameters: Name Type Description Default port int port to run the instance on 2222 collect_data str string path/name to collect data yaml file 'scrapli_replay.yaml' Returns: Type Description None None Source code in server/server.py 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 async def start ( port : int = 2222 , collect_data : str = \"scrapli_replay.yaml\" ) -> None : \"\"\" Temporary run server entrypoint Args: port: port to run the instance on collect_data: string path/name to collect data yaml file Returns: None Raises: N/A \"\"\" def server_factory () -> SSHServer : server = BaseServer ( session = BaseSSHServerSession , collect_data = collect_data ) return server await create_server ( server_factory , \"localhost\" , port , server_host_keys = [ BASE_SERVER_KEY ], )","title":"Server"},{"location":"reference/server/server/#server.server.BaseSSHServerSession","text":"Bases: SSHServerSession Source code in server/server.pyclass BaseSSHServerSession ( SSHServerSession ): # type: ignore def __init__ ( self , collect_data : Dict [ str , Any ]) -> None : \"\"\" SSH Server Session class Inherits from asyncssh and provides some extra context/setup for the mock network devices Args: collect_data: dictionary of the collected data necessary to run a mock server Returns: None Raises: N/A \"\"\" logger . debug ( \"ssh session initiated\" ) self . _chan : SSHServerChannel [ Any ] self . _hide_input = False self . _interacting = False self . _interacting_event : Optional [ Dict [ str , Any ]] = None self . _interact_index = 0 self . _on_open_state = OnOpenState . PRE self . collect_data = collect_data self . _on_open_commands_list = self . collect_data [ \"on_open_inputs\" ] . copy () self . current_privilege_level = self . collect_data [ \"initial_privilege_level\" ] def connection_made ( self , chan : SSHServerChannel [ Any ]) -> None : \"\"\" SSH Connection made! Args: chan: channel editor object Returns: None Raises: N/A \"\"\" self . _chan = chan def shell_requested ( self ) -> bool : \"\"\" Handle shell requested; always return True Args: N/A Returns: bool: always True! Raises: N/A \"\"\" return True def _return_current_prompt ( self ) -> str : \"\"\" Return the current privilege level prompt Args: N/A Returns: str: prompt for current privilege level Raises: N/A \"\"\" privilege_level : str = self . collect_data [ \"privilege_level_prompts\" ][ self . current_privilege_level ] return privilege_level def session_started ( self ) -> None : \"\"\" SSH session started Initial SSH session started Args: N/A Returns: None Raises: N/A \"\"\" self . repaint_prompt () def repaint_prompt ( self ) -> None : \"\"\" Paint the prompt to the ssh channel Args: N/A Returns: None Raises: N/A \"\"\" logger . debug ( \"writing device prompt\" ) self . _chan . write ( self . _return_current_prompt ()) def interactive_event ( self , channel_input : str ) -> None : \"\"\" Handle \"interactive\" channel input Args: channel_input: input sent from the user on the channel Returns: None Raises: ScrapliReplayServerError: if we get None for self._interacting_data \"\"\" if not self . _interacting_event : raise ScrapliReplayServerError ( \"attempting to handle interactive event but not in interacting mode. this should\" \" never happen, definitely a bug\" ) if self . _hide_input : # un hide input! logger . debug ( \"re-enabling channel echo\" ) self . _chan . set_echo ( echo = True ) # type: ignore self . _hide_input = False event_step = self . _interacting_event [ \"event_steps\" ][ self . _interact_index ] if event_step [ \"hidden_input\" ]: if channel_input != \"scrapli\" : # if we have bad auth, basically we'll get stuck here forever... way easier than # trying to model/record all the different device types auth failures i think... logger . warning ( \"interactive event input is 'hidden' but input is not 'scrapli'\" ) self . _interact_index -= 1 event_step = self . _interacting_event [ \"event_steps\" ][ self . _interact_index ] elif channel_input != event_step [ \"channel_input\" ]: # bail out and send an invalid input message for the current priv level logger . warning ( \"interactive event input does not match recorded event\" ) self . _interacting = False self . _interacting_event = None self . _interact_index = 0 self . unknown_event () return self . _chan . write ( event_step [ \"channel_output\" ]) if self . _interact_index + 1 == len ( self . _interacting_event [ \"event_steps\" ]): # this is the last step, reset all the things logger . debug ( \"interactive event complete, resetting interacting mode\" ) self . current_privilege_level = self . _interacting_event [ \"result_privilege_level\" ] self . _interacting = False self . _interacting_event = None self . _interact_index = 0 return self . _interact_index += 1 if self . _interacting_event [ \"event_steps\" ][ self . _interact_index ][ \"hidden_input\" ]: # next event is \"hidden\"... so... hide it... logger . debug ( \"next interact event has hidden input, disabling channel echo\" ) self . _chan . set_echo ( echo = False ) # type: ignore self . _hide_input = True def standard_event ( self , channel_input : str , event : Dict [ str , Any ]) -> None : \"\"\" Handle \"normal\" command channel input Args: channel_input: input sent from the user on the channel event: the event data for the given input Returns: None Raises: N/A \"\"\" # i think if one of these is true both should always be... but just in case... if event [ \"channel_output\" ] == \"__CLOSES_CONNECTION__\" or event [ \"closes_connection\" ] is True : logger . debug ( \"channel input should close connection, closing...\" ) # write empty string to bump the connection closed message to a new line like a normal # device self . _chan . write ( \"\" ) self . eof_received () # reset privilege level and on open state self . current_privilege_level = self . collect_data [ \"initial_privilege_level\" ] self . _on_open_state = OnOpenState . PRE self . _on_open_commands_list = self . collect_data [ \"on_open_inputs\" ] . copy () return self . _chan . write ( event [ \"channel_output\" ]) self . current_privilege_level = event [ \"result_privilege_level\" ] # try to decide if on open things are \"done\" if channel_input in self . _on_open_commands_list : logger . debug ( \"an 'on open' command was received, popping from on open commands list\" ) self . _on_open_commands_list . pop ( self . _on_open_commands_list . index ( channel_input )) if not self . _on_open_commands_list : logger . debug ( \"an 'on open' commands all executed, setting on open state to 'POST'\" ) self . _on_open_state = OnOpenState . POST def unknown_event ( self ) -> None : \"\"\" Handle unknown channel input Args: N/A Returns: None Raises: N/A \"\"\" logger . debug ( \"an unknown event has been initiated\" ) event = self . collect_data [ \"unknown_events\" ][ self . current_privilege_level ][ self . _on_open_state . value ] self . _chan . write ( event [ \"channel_output\" ]) if event [ \"closes_connection\" ] is True : logger . debug ( \"channel input should close connection, closing...\" ) self . eof_received () self . current_privilege_level = event [ \"result_privilege_level\" ] def data_received ( self , data : str , datatype : Optional [ int ]) -> None : \"\"\" Handle data received on ssh channel Args: data: string of data sent to channel datatype: dunno! in base class though :) Returns: None Raises: N/A \"\"\" _ = datatype # in the future we can cutoff the inputs if it is over X width if disable width has not yet # been ran -- not needed now but could be cool; if we just send a return, we should NOT # strip that! channel_input = data if data == \" \\n \" else data . rstrip () logger . debug ( f \"received channel input: ' { channel_input } '\" ) if self . _interacting : logger . debug ( \"already in interacting mode, continuing with interact events\" ) self . interactive_event ( channel_input = channel_input ) return if channel_input == \" \\n \" : logger . debug ( \"channel input was return, just repaint prompt\" ) self . repaint_prompt () return current_event = self . collect_data [ \"events\" ][ self . current_privilege_level ][ self . _on_open_state . value ] . get ( channel_input ) if current_event : if current_event [ \"type\" ] == \"standard\" : logger . debug ( \"standard channel event\" ) self . standard_event ( channel_input = channel_input , event = current_event ) else : logger . debug ( \"interactive channel event\" ) # set to interacting mode, assign the current interactive event self . _interacting = True self . _interacting_event = current_event self . interactive_event ( channel_input = channel_input ) return logger . debug ( \"unknown channel event\" ) self . unknown_event () def eof_received ( self ) -> bool : \"\"\" Handle eof Args: N/A Returns: None Raises: N/A \"\"\" self . _chan . exit ( 0 ) return True def break_received ( self , msec : float ) -> bool : \"\"\" Handle break Args: msec: dunno, but in base class implementation :) Returns: None Raises: N/A \"\"\" self . eof_received () return True","title":"BaseSSHServerSession"},{"location":"reference/server/server/#server.server.BaseSSHServerSession.__init__","text":"SSH Server Session class Inherits from asyncssh and provides some extra context/setup for the mock network devices Parameters: Name Type Description Default collect_data Dict [ str , Any ] dictionary of the collected data necessary to run a mock server required Returns: Type Description None None Source code in server/server.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def __init__ ( self , collect_data : Dict [ str , Any ]) -> None : \"\"\" SSH Server Session class Inherits from asyncssh and provides some extra context/setup for the mock network devices Args: collect_data: dictionary of the collected data necessary to run a mock server Returns: None Raises: N/A \"\"\" logger . debug ( \"ssh session initiated\" ) self . _chan : SSHServerChannel [ Any ] self . _hide_input = False self . _interacting = False self . _interacting_event : Optional [ Dict [ str , Any ]] = None self . _interact_index = 0 self . _on_open_state = OnOpenState . PRE self . collect_data = collect_data self . _on_open_commands_list = self . collect_data [ \"on_open_inputs\" ] . copy () self . current_privilege_level = self . collect_data [ \"initial_privilege_level\" ]","title":"__init__()"},{"location":"reference/server/server/#server.server.BaseSSHServerSession.break_received","text":"Handle break Parameters: Name Type Description Default msec float dunno, but in base class implementation :) required Returns: Type Description bool None Source code in server/server.py 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 def break_received ( self , msec : float ) -> bool : \"\"\" Handle break Args: msec: dunno, but in base class implementation :) Returns: None Raises: N/A \"\"\" self . eof_received () return True","title":"break_received()"},{"location":"reference/server/server/#server.server.BaseSSHServerSession.connection_made","text":"SSH Connection made! Parameters: Name Type Description Default chan SSHServerChannel [ Any ] channel editor object required Returns: Type Description None None Source code in server/server.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def connection_made ( self , chan : SSHServerChannel [ Any ]) -> None : \"\"\" SSH Connection made! Args: chan: channel editor object Returns: None Raises: N/A \"\"\" self . _chan = chan","title":"connection_made()"},{"location":"reference/server/server/#server.server.BaseSSHServerSession.data_received","text":"Handle data received on ssh channel Parameters: Name Type Description Default data str string of data sent to channel required datatype Optional [ int ] dunno! in base class though :) required Returns: Type Description None None Source code in server/server.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 def data_received ( self , data : str , datatype : Optional [ int ]) -> None : \"\"\" Handle data received on ssh channel Args: data: string of data sent to channel datatype: dunno! in base class though :) Returns: None Raises: N/A \"\"\" _ = datatype # in the future we can cutoff the inputs if it is over X width if disable width has not yet # been ran -- not needed now but could be cool; if we just send a return, we should NOT # strip that! channel_input = data if data == \" \\n \" else data . rstrip () logger . debug ( f \"received channel input: ' { channel_input } '\" ) if self . _interacting : logger . debug ( \"already in interacting mode, continuing with interact events\" ) self . interactive_event ( channel_input = channel_input ) return if channel_input == \" \\n \" : logger . debug ( \"channel input was return, just repaint prompt\" ) self . repaint_prompt () return current_event = self . collect_data [ \"events\" ][ self . current_privilege_level ][ self . _on_open_state . value ] . get ( channel_input ) if current_event : if current_event [ \"type\" ] == \"standard\" : logger . debug ( \"standard channel event\" ) self . standard_event ( channel_input = channel_input , event = current_event ) else : logger . debug ( \"interactive channel event\" ) # set to interacting mode, assign the current interactive event self . _interacting = True self . _interacting_event = current_event self . interactive_event ( channel_input = channel_input ) return logger . debug ( \"unknown channel event\" ) self . unknown_event ()","title":"data_received()"},{"location":"reference/server/server/#server.server.BaseSSHServerSession.eof_received","text":"Handle eof Returns: Type Description bool None Source code in server/server.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 def eof_received ( self ) -> bool : \"\"\" Handle eof Args: N/A Returns: None Raises: N/A \"\"\" self . _chan . exit ( 0 ) return True","title":"eof_received()"},{"location":"reference/server/server/#server.server.BaseSSHServerSession.interactive_event","text":"Handle \"interactive\" channel input Parameters: Name Type Description Default channel_input str input sent from the user on the channel required Returns: Type Description None None Raises: Type Description ScrapliReplayServerError if we get None for self._interacting_data Source code in server/server.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 def interactive_event ( self , channel_input : str ) -> None : \"\"\" Handle \"interactive\" channel input Args: channel_input: input sent from the user on the channel Returns: None Raises: ScrapliReplayServerError: if we get None for self._interacting_data \"\"\" if not self . _interacting_event : raise ScrapliReplayServerError ( \"attempting to handle interactive event but not in interacting mode. this should\" \" never happen, definitely a bug\" ) if self . _hide_input : # un hide input! logger . debug ( \"re-enabling channel echo\" ) self . _chan . set_echo ( echo = True ) # type: ignore self . _hide_input = False event_step = self . _interacting_event [ \"event_steps\" ][ self . _interact_index ] if event_step [ \"hidden_input\" ]: if channel_input != \"scrapli\" : # if we have bad auth, basically we'll get stuck here forever... way easier than # trying to model/record all the different device types auth failures i think... logger . warning ( \"interactive event input is 'hidden' but input is not 'scrapli'\" ) self . _interact_index -= 1 event_step = self . _interacting_event [ \"event_steps\" ][ self . _interact_index ] elif channel_input != event_step [ \"channel_input\" ]: # bail out and send an invalid input message for the current priv level logger . warning ( \"interactive event input does not match recorded event\" ) self . _interacting = False self . _interacting_event = None self . _interact_index = 0 self . unknown_event () return self . _chan . write ( event_step [ \"channel_output\" ]) if self . _interact_index + 1 == len ( self . _interacting_event [ \"event_steps\" ]): # this is the last step, reset all the things logger . debug ( \"interactive event complete, resetting interacting mode\" ) self . current_privilege_level = self . _interacting_event [ \"result_privilege_level\" ] self . _interacting = False self . _interacting_event = None self . _interact_index = 0 return self . _interact_index += 1 if self . _interacting_event [ \"event_steps\" ][ self . _interact_index ][ \"hidden_input\" ]: # next event is \"hidden\"... so... hide it... logger . debug ( \"next interact event has hidden input, disabling channel echo\" ) self . _chan . set_echo ( echo = False ) # type: ignore self . _hide_input = True","title":"interactive_event()"},{"location":"reference/server/server/#server.server.BaseSSHServerSession.repaint_prompt","text":"Paint the prompt to the ssh channel Returns: Type Description None None Source code in server/server.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def repaint_prompt ( self ) -> None : \"\"\" Paint the prompt to the ssh channel Args: N/A Returns: None Raises: N/A \"\"\" logger . debug ( \"writing device prompt\" ) self . _chan . write ( self . _return_current_prompt ())","title":"repaint_prompt()"},{"location":"reference/server/server/#server.server.BaseSSHServerSession.session_started","text":"SSH session started Initial SSH session started Returns: Type Description None None Source code in server/server.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 def session_started ( self ) -> None : \"\"\" SSH session started Initial SSH session started Args: N/A Returns: None Raises: N/A \"\"\" self . repaint_prompt ()","title":"session_started()"},{"location":"reference/server/server/#server.server.BaseSSHServerSession.shell_requested","text":"Handle shell requested; always return True Returns: Name Type Description bool bool always True! Source code in server/server.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 def shell_requested ( self ) -> bool : \"\"\" Handle shell requested; always return True Args: N/A Returns: bool: always True! Raises: N/A \"\"\" return True","title":"shell_requested()"},{"location":"reference/server/server/#server.server.BaseSSHServerSession.standard_event","text":"Handle \"normal\" command channel input Parameters: Name Type Description Default channel_input str input sent from the user on the channel required event Dict [ str , Any ] the event data for the given input required Returns: Type Description None None Source code in server/server.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 def standard_event ( self , channel_input : str , event : Dict [ str , Any ]) -> None : \"\"\" Handle \"normal\" command channel input Args: channel_input: input sent from the user on the channel event: the event data for the given input Returns: None Raises: N/A \"\"\" # i think if one of these is true both should always be... but just in case... if event [ \"channel_output\" ] == \"__CLOSES_CONNECTION__\" or event [ \"closes_connection\" ] is True : logger . debug ( \"channel input should close connection, closing...\" ) # write empty string to bump the connection closed message to a new line like a normal # device self . _chan . write ( \"\" ) self . eof_received () # reset privilege level and on open state self . current_privilege_level = self . collect_data [ \"initial_privilege_level\" ] self . _on_open_state = OnOpenState . PRE self . _on_open_commands_list = self . collect_data [ \"on_open_inputs\" ] . copy () return self . _chan . write ( event [ \"channel_output\" ]) self . current_privilege_level = event [ \"result_privilege_level\" ] # try to decide if on open things are \"done\" if channel_input in self . _on_open_commands_list : logger . debug ( \"an 'on open' command was received, popping from on open commands list\" ) self . _on_open_commands_list . pop ( self . _on_open_commands_list . index ( channel_input )) if not self . _on_open_commands_list : logger . debug ( \"an 'on open' commands all executed, setting on open state to 'POST'\" ) self . _on_open_state = OnOpenState . POST","title":"standard_event()"},{"location":"reference/server/server/#server.server.BaseSSHServerSession.unknown_event","text":"Handle unknown channel input Returns: Type Description None None Source code in server/server.py 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 def unknown_event ( self ) -> None : \"\"\" Handle unknown channel input Args: N/A Returns: None Raises: N/A \"\"\" logger . debug ( \"an unknown event has been initiated\" ) event = self . collect_data [ \"unknown_events\" ][ self . current_privilege_level ][ self . _on_open_state . value ] self . _chan . write ( event [ \"channel_output\" ]) if event [ \"closes_connection\" ] is True : logger . debug ( \"channel input should close connection, closing...\" ) self . eof_received () self . current_privilege_level = event [ \"result_privilege_level\" ]","title":"unknown_event()"},{"location":"reference/server/server/#server.server.BaseServer","text":"Bases: SSHServer Source code in server/server.pyclass BaseServer ( SSHServer ): def __init__ ( self , session : Type [ SSHServerSession ], collect_data : str ): # type: ignore \"\"\" Base Server class Args: session: asyncssh server session collect_data: yaml of session to load Returns: None Raises: N/A \"\"\" self . session = session with open ( collect_data , \"r\" , encoding = \"utf-8\" ) as f : self . collect_data = YAML . load ( f ) def session_requested ( self ) -> SSHServerSession : # type: ignore \"\"\" Session requested; return ServerSession object `ServerSession` set in `run` to be the appropriate SSHServerSession type for a given platform, i.e. `IOSXESSHServerSession` Args: N/A Returns: SSHServerSession: SSHServerSession Raises: N/A \"\"\" return self . session ( collect_data = self . collect_data ) # type: ignore def begin_auth ( self , username : str ) -> bool : \"\"\" Begin auth; always returns True Args: username: username for auth Returns: bool: always True Raises: N/A \"\"\" return True def password_auth_supported ( self ) -> bool : \"\"\" Password auth supported; always return True Args: N/A Returns: bool: always True Raises: N/A \"\"\" return True def public_key_auth_supported ( self ) -> bool : \"\"\" Public key auth supported; always return True Args: N/A Returns: bool: always True Raises: N/A \"\"\" return True def validate_password ( self , username : str , password : str ) -> bool : \"\"\" Validate provided username/password Args: username: username to check for auth password: password to check for auth Returns: bool: True if user/password is correct (scrapli/scrapli) Raises: N/A \"\"\" if username == password == \"scrapli\" : return True return False def validate_public_key ( self , username : str , key : SSHKey ) -> bool : \"\"\" Validate provided public key Args: username: username to check for auth key: asyncssh RSAKey to check for auth Returns: bool: True if ssh key is correct Raises: N/A \"\"\" if ( username == \"scrapli\" and key . get_fingerprint () == \"SHA256:rb1CVtQCkWBAzm1AxV7xR7BLBawUwFUlUVFVu+QYQBM\" ): return True return False","title":"BaseServer"},{"location":"reference/server/server/#server.server.BaseServer.__init__","text":"Base Server class Parameters: Name Type Description Default session Type [ SSHServerSession ] asyncssh server session required collect_data str yaml of session to load required Returns: Type Description None Source code in server/server.py 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 def __init__ ( self , session : Type [ SSHServerSession ], collect_data : str ): # type: ignore \"\"\" Base Server class Args: session: asyncssh server session collect_data: yaml of session to load Returns: None Raises: N/A \"\"\" self . session = session with open ( collect_data , \"r\" , encoding = \"utf-8\" ) as f : self . collect_data = YAML . load ( f )","title":"__init__()"},{"location":"reference/server/server/#server.server.BaseServer.begin_auth","text":"Begin auth; always returns True Parameters: Name Type Description Default username str username for auth required Returns: Name Type Description bool bool always True Source code in server/server.py 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 def begin_auth ( self , username : str ) -> bool : \"\"\" Begin auth; always returns True Args: username: username for auth Returns: bool: always True Raises: N/A \"\"\" return True","title":"begin_auth()"},{"location":"reference/server/server/#server.server.BaseServer.password_auth_supported","text":"Password auth supported; always return True Returns: Name Type Description bool bool always True Source code in server/server.py 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 def password_auth_supported ( self ) -> bool : \"\"\" Password auth supported; always return True Args: N/A Returns: bool: always True Raises: N/A \"\"\" return True","title":"password_auth_supported()"},{"location":"reference/server/server/#server.server.BaseServer.public_key_auth_supported","text":"Public key auth supported; always return True Returns: Name Type Description bool bool always True Source code in server/server.py 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 def public_key_auth_supported ( self ) -> bool : \"\"\" Public key auth supported; always return True Args: N/A Returns: bool: always True Raises: N/A \"\"\" return True","title":"public_key_auth_supported()"},{"location":"reference/server/server/#server.server.BaseServer.session_requested","text":"Session requested; return ServerSession object ServerSession set in run to be the appropriate SSHServerSession type for a given platform, i.e. IOSXESSHServerSession Returns: Name Type Description SSHServerSession SSHServerSession SSHServerSession Source code in server/server.py 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 def session_requested ( self ) -> SSHServerSession : # type: ignore \"\"\" Session requested; return ServerSession object `ServerSession` set in `run` to be the appropriate SSHServerSession type for a given platform, i.e. `IOSXESSHServerSession` Args: N/A Returns: SSHServerSession: SSHServerSession Raises: N/A \"\"\" return self . session ( collect_data = self . collect_data ) # type: ignore","title":"session_requested()"},{"location":"reference/server/server/#server.server.BaseServer.validate_password","text":"Validate provided username/password Parameters: Name Type Description Default username str username to check for auth required password str password to check for auth required Returns: Name Type Description bool bool True if user/password is correct (scrapli/scrapli) Source code in server/server.py 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 def validate_password ( self , username : str , password : str ) -> bool : \"\"\" Validate provided username/password Args: username: username to check for auth password: password to check for auth Returns: bool: True if user/password is correct (scrapli/scrapli) Raises: N/A \"\"\" if username == password == \"scrapli\" : return True return False","title":"validate_password()"},{"location":"reference/server/server/#server.server.BaseServer.validate_public_key","text":"Validate provided public key Parameters: Name Type Description Default username str username to check for auth required key SSHKey asyncssh RSAKey to check for auth required Returns: Name Type Description bool bool True if ssh key is correct Source code in server/server.py 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 def validate_public_key ( self , username : str , key : SSHKey ) -> bool : \"\"\" Validate provided public key Args: username: username to check for auth key: asyncssh RSAKey to check for auth Returns: bool: True if ssh key is correct Raises: N/A \"\"\" if ( username == \"scrapli\" and key . get_fingerprint () == \"SHA256:rb1CVtQCkWBAzm1AxV7xR7BLBawUwFUlUVFVu+QYQBM\" ): return True return False","title":"validate_public_key()"},{"location":"reference/server/server/#server.server.start","text":"Temporary run server entrypoint Parameters: Name Type Description Default port int port to run the instance on 2222 collect_data str string path/name to collect data yaml file 'scrapli_replay.yaml' Returns: Type Description None None Source code in server/server.py 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 async def start ( port : int = 2222 , collect_data : str = \"scrapli_replay.yaml\" ) -> None : \"\"\" Temporary run server entrypoint Args: port: port to run the instance on collect_data: string path/name to collect data yaml file Returns: None Raises: N/A \"\"\" def server_factory () -> SSHServer : server = BaseServer ( session = BaseSSHServerSession , collect_data = collect_data ) return server await create_server ( server_factory , \"localhost\" , port , server_host_keys = [ BASE_SERVER_KEY ], )","title":"start()"},{"location":"user_guide/basic_usage/","text":"Basic Usage \u00b6 What do you need to get done!?! \u00b6 First things first: what do you need to get done? scrapli replay contains two similar yet very different testing tools. The first, is the pytest plugin -- a plugin to mark tests with. This plugin will record scrapli session inputs and outputs and save them, that way you can store these test sessions and re-use them (without needing a \"live\" device) in your CI setup. The second, is a \"collector\", and a \"server\" that allow you to build semi-interactive SSH servers that you can connect to for testing purposes. This allows you to have \"mock\"/\"fake\"/\"dummy\" SSH server(s) that look and feel like \"real\" network devices -- as with the pytest plugin, this could be useful in CI, or it could just be handy for offline testing. As you'd expect, if you are writing tests and wanting to have some reasonable assurances that your code that interacts with scrapli is doing what you think it should be doing, then you probably want to use the pytest plugin! If you just want to have a mock SSH server to play with, then the collector/server may be interesting to you. Pytest Plugin \u00b6 Overview and Use Case \u00b6 As shown in the quickstart guide, getting going with the pytest plugin is fairly straightforward -- tests that contain scrapli operations can be marked with the scrapli_replay marker, causing scrapli replay to automatically wrap this test and record or replay sessions within the test. In order for scrapli replay to do this, there is one big caveat: the scrapli connection must be opened within the test ! Projects like pytest-vcr don't have this requirement because the sessions are stateless HTTP(s) sessions -- this is of course not the case for Telnet/SSH where we have more or less a stateful connection object. This may sound like a limiting factor for scrapli replay and perhaps it is, however it is relatively easy to work with as you'll see below! Here is a very simple example of a class that creates a scrapli connection and has some methods to do stuff: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import re from scrapli import Scrapli class Example : def __init__ ( self ): self . conn = Scrapli ( host = \"c3560\" , platform = \"cisco_iosxe\" , ssh_config_file = True , auth_strict_key = False ) # dont do this! dont have side affects in init, but helps demonstrate things! self . conn . open () def do_stuff ( self ): \"\"\"Get the version from the device\"\"\" version_result = self . conn . send_command ( command = \"show version | i Software\" ) if version_result . failed is True : return \"__FAILURE__\" version_result_string = version_result . result version_result_match = re . findall ( pattern = r \"Version ([a-z0-9\\.\\(\\)]*)\" , string = version_result_string , flags = re . I ) if not version_result_match : return \"__FAILURE__\" return version_result_match [ 0 ] Let's pretend we want to write some tests for the do_stuff method of this example class. We probably want to have at least three test cases for this method: Testing a failed result from the initial show command Testing a success event where we properly get and parse the version string Testing a failed parsing of the version string For cases one and three we probably don't want or need scrapli replay -- we could simply patch the send_command method of scrapli, returning bad data -- either a bad scrapli Response object, or a Response object with data that will cause our regex to fail. For case number 2, however, we could also patch scrapli and return correct data, this would validate that our function, when given appropriate outputs from scrapli, does what it should do. This would be a valuable test. With scrapli replay, however, we can take this a bit further! We can now create a test case that records actual device inputs and outputs and saves that data in a scrapli replay session. Subsequent tests can then replay that input and output data. Rather than just testing that our regex works w/ some patched response data we can now very simply test not only that, but also scrapli -- ensuring that scrapli is behaving as you would expect! How it Works \u00b6 Before jumping into how to use scrapli replay, it's worth spending a bit of time to understand how it works. At a high level, scrapli replay is a Pytest plugin that you can \"mark\" tests with. By marking a test you are effectively \"wrapping\" that test in the scrapli replay ScrapliReplay class. The pytest plugin then uses the ScrapliReplay class as a context manager, yielding to your test within the context manager. For tests that are marked asyncio we simply use the async context manager capability instead of the synchronous version. This selection of sync vs async happens transparently to you -- you just need to mark your tests with the asyncio marker if they are asyncio (which you had to do anyway, so no biggie!). While the ScrapliReplay context manager is active (while your test is running) ScrapliReplay patches the open method of scrapli and a ConnectionProfile is recorded (host/user/is using password/auth bypass/etc.). This ConnectionProfile is stored as part of the scrapli replay session data -- allowing us to validate that during subsequent test runs the connection information has not changed (if it has we raise an exception to fail the test). After the ConnectionProfile is recorded, the scrapli Channel (or AsyncChannel ) read and write methods are patched (replaced) with scrapli replay read/write methods. If the current test iteration is in \"record\" mode, we patch with the \"record\" read/write, otherwise we patch with the \"replay\" read/write -- these methods do what they sound like! Recording or replaying session data. At completion of your test, when the context manager is closing the session will be dumped to a yaml file in your session output directory (by default this is a folder located with your test file). Due to the fact that scrapli replay uses the open method of scrapli in order to fetch connection data and also to patch the channel objects, there is a requirement that the test actually opens the connection. This sounds perhaps limiting, and probably it is somewhat, however you can fairly easily work around this by having a fixture that returns an object with the connection already opened -- this fixture currently must be scoped to the function level. This will hopefully be improved in further scrapli replay releases to allow us to cache session-wide fixtures. How to Use it \u00b6 As shown in the quickstart, using scrapli replay is fairly straightforward -- simply mark a test with the correct marker. The complication generally will come from needing to have the connection opened within that test being wrapped -- this section will showcase some basic ways to use scrapli replay, as well as how we can handle the connection opening problem. Working with the example class from the overview section, let's handle test case number 2. To start, we can do this with the patching method -- without scrapli replay: 1 2 3 4 5 6 7 8 9 10 11 12 from scrapli.response import Response def test_example_do_stuff_patching ( monkeypatch , example_instance ): \"\"\"Test Example.do_stuff\"\"\" def patched_send_command ( cls , command ): r = Response ( host = \"localhost\" , channel_input = command ) r . record_response ( b \"Software Version 15.2(4)E7\" ) return r monkeypatch . setattr ( \"scrapli.driver.network.sync_driver.NetworkDriver.send_command\" , patched_send_command ) assert example_instance . do_stuff () == \"15.2(4)E7\" This works reasonably well, and properly tests our regex does indeed find the version string; of course you could actually return a real device output instead of the abbreviated output here as well -- that would make things a bit more \"real\". This is nice, but it does not test any scrapli behavior at all as scrapli is completely patched out of the test. There must be a better way! Let's now re-write this test using scrapli replay: 1 2 3 4 5 6 7 import pytest from example import Example # <- this is assuming directory structure as in the \"examples/simple_test_case\" example! @pytest . mark . scrapli_replay def test_example_do_stuff_no_fixture (): \"\"\"Test Example.do_stuff\"\"\" assert Example () . do_stuff () == \"15.2(4)E7\" No patching?! Amazing! So... what is going on here? The Example class (from the snippet way above here) is created, which causes the scrapli connection to open, then we call the do_stuff method which fetches the version and parses it with some regex. Scrapli replay is \"aware\" of this test due to the marker -- this basically means that this test is living inside of a scrapli replay context manager... you can think of it as something like this: 1 2 with ScrapliReplay : test () An oversimplified example, but not by much! If you run this example (from the examples dir in the repo) the first time the test is ran, scrapli will actually connect to your device and record the output. This of course means that you need proper credentials/access in order to get this first recording done -- using ssh keys/config file so that you don't need to store any user/creds in your test is a great way to deal with this. At the end of the test, scrapli replay will dump the \"session\" data out to a yaml file in a new folder called \"scrapli_replay_sessions\" that was created in the same directory of your test file (you can change this, see the options section!). This \"session\" file looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 connection_profile : host : c3560 port : 22 auth_username : '' auth_password : false auth_private_key : '' auth_private_key_passphrase : false auth_bypass : false transport : system auth_secondary : false interactions : - channel_output : \"Warning: Permanently added 'c3560,172.31.254.1' (RSA) to the\\ \\ list of known hosts.\\n\\nC3560CX#\" expected_channel_input : \"\\n\" expected_channel_input_redacted : false - channel_output : \"\\nC3560CX#\" expected_channel_input : terminal length 0 expected_channel_input_redacted : false - channel_output : terminal length 0 expected_channel_input : \"\\n\" expected_channel_input_redacted : false - channel_output : \"\\nC3560CX#\" expected_channel_input : terminal width 512 expected_channel_input_redacted : false - channel_output : terminal width 512 expected_channel_input : \"\\n\" expected_channel_input_redacted : false - channel_output : \"\\nC3560CX#\" expected_channel_input : show version | i Software expected_channel_input_redacted : false - channel_output : show version | i Software expected_channel_input : \"\\n\" expected_channel_input_redacted : false - channel_output : \"\\nCisco IOS Software, C3560CX Software (C3560CX-UNIVERSALK9-M),\\ \\ Version 15.2(4)E7, RELEASE SOFTWARE (fc2)\\nC3560CX#\" expected_channel_input : expected_channel_input_redacted : false As you can see, connection details are stored (but never credentials) -- in the event of password authentication the password is not stored and is marked as \"REDACTED\" in the interactions output. Running the test again you'll notice that its even faster than scrapli normally is! Why? Because there is no actual connection going out to the device, the connection will just be automatically replayed from this session data! Now if you have a billion tests to write, or you are needing to pass lots of inputs in order to create your scrapli connection objects in every single test... that wouldn't be very fun! In cases like this it would be a great idea to put either the scrapli connection object, or the device containing the connection object into a fixture and allowing pytest to pass that fixture into each test function. Here is a simple example of a fixture for our example setup: 1 2 3 4 5 6 7 8 import pytest from example import Example @pytest . fixture ( scope = \"function\" ) def example_instance (): \"\"\"Simple fixture to return Example instance\"\"\" yield Example () And... a test taking advantage of this fixture: 1 2 3 4 @pytest . mark . scrapli_replay def test_example_do_stuff_with_fixture ( example_instance ): \"\"\"Test Example.do_stuff\"\"\" assert example_instance . do_stuff () == \"15.2(4)E7\" It is important to note that the fixture scope must be set to function -- again, this is because scrapli replay requires the connection to be opened within the test it is wrapping in order to properly record the connection profile and patch the read/write methods! Pytest Plugin Options \u00b6 scrapli replay supports a handful of arguments to modify its behavior, currently, these are configurable via the pytest cli -- in the future they will likely be configurable by a dedicated fixture as well. The available options are: Mode \u00b6 The \"replay\" mode setting manages how scrapli replay handles replaying or recording sessions. This setting has the following options: replay: the default mode; if no session exists scrapli replay will record/create one, otherwise it will \"replay\" existing sessions (meaning you dont need to connect to a device) record: probably not needed often, does at it says -- records things. If a session exists it will auto switch to replay mode (meaning not overwrite the session) overwrite: overwrite existing all sessions always This option is configurable with the --scrapli-replay-mode switch: 1 python -m pytest tests --scrapli-replay-mode overwrite Directory \u00b6 By default, scrapli replay stores the recorded sessions in a directory in the same folder as the test that is being executed. This is modifiable with the --scrapli-replay-directory switch: 1 python -m pytest tests --scrapli-replay-directory /my/cool/session/dir Overwrite \u00b6 If you need to overwrite only certain test session data, you can do so by using the --scrapli-replay-overwrite switch. This argument accepts a comma separated list of test names of which to overwrite the session data. 1 python -m pytest tests --scrapli-replay-overwrite test1,test2,test3 Disable \u00b6 You can disable entirely the scrapli replay functionality -- meaning your tests will run \"normally\" without any of the scrapli replay patching/session work happening. This is done with the --scrapli-replay-disable flag. 1 python -m pytest tests --scrapli-replay-disable Block Network \u00b6 Finally, you can \"block\" network connections -- this will cause any connection with a valid recorded session to be \"replay\"'d as normal, but any tests that would require recording a session will be skipped. The --scrapli-replay-block-network flag controls this. 1 python -m pytest tests --scrapli-replay-block-network Collector and Server \u00b6 Overview \u00b6 The scrapli replay \"collector\" and \"server\" functionality is useful for creating mock ssh servers that are \"semi-interactive\". You can provide any number of commands (not configs! more on this in a bit) that you would like to collect from a device, and the collector will run the provided commands at all privilege levels, and with and without \"on_open\" functionality being executed (generally this means with and without paging being disabled). The collector will also collect any on open commands, on close commands, all privilege escalation/deescalation commands, and \"unknown\" or invalid command output from every privilege level. Just like the pytest plugin, the scrapli replay collector will output the collected data to a yaml file. This yaml file is then consumed by the scrapli replay server. The server itself is an asyncssh server that does its best to look and feel just like the real device that you collected the data from. Collector \u00b6 As outlined in the overview section, the collector.... collects things! The collector tries to collect as much info from the device as is practical, with the ultimate goal of being able to allow the server to look pretty close to a real device. Before continuing, it is important to note that currently the collector can only be used with network devices -- meaning it must be used with a scrapli platform that extends the NetworkDriver class; moreover it must be used with a synchronous transport. There will likely not be any asyncio support for the collector (it doesn't seem to be very valuable to add asyncio support... please open an issue if you disagree!). To get started with the collector is fairly straight forward, simply create a collector class, passing in the commands you wish to collect, some details about \"paging\" (more on this in a sec), and the kwargs necessary to create the scrapli connection to collect from: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from scrapli_replay.server.collector import ScrapliCollector scrapli_kwargs = { \"host\" : \"localhost\" , \"port\" : 24022 , \"ssh_config_file\" : False , \"auth_strict_key\" : False , \"auth_username\" : \"vrnetlab\" , \"auth_password\" : \"VR-netlab9\" , \"auth_secondary\" : \"VR-netlab9\" , \"platform\" : \"arista_eos\" , } collector = ScrapliCollector ( channel_inputs = [ \"show version\" , \"show run\" ], interact_events = [ [( \"clear logg\" , \"Clear logging buffer [confirm]\" , False ), ( \"\" , \"switch#\" , False )] ], paging_indicator = \"--More--\" , paging_escape_string = \" \\x1b \" , ** scrapli_kwargs , ) If you are familiar with scrapli connections, the above snippet should look fairly similar! In addition to the scrapli connection data we see a few extra things: channel_inputs -- a list of \"inputs\" you wish to send to the device for recording. Each of these inputs will be run at every privilege level of the device, and before and after executing the \"on_open\" function (if applicable) interact_events -- similar to \"normal\" scrapli, a list of lists of tuples of \"interact events\" to record at each privilege level (and before/after on_open) paging_indicator -- this is what it sounds like -- a string that lets us know if the device has paginated output data paging_escape_string -- a string to send to \"cancel\" a command output if paging is encountered -- typically an escape, or a q works for most devices Note -- you can also pass an existing scrapli connection to the scrapli_connection argument if you prefer (instead of the kwargs needed to create a connection)! Once a collector object has been created, you can open the connection and simply run the collect method, followed by the dump method: 1 2 3 4 collector . open () collector . collect () collector . close () collector . dump () The session data will be dumped to a yaml file called \"scrapli_replay_collector_session.yaml\" (configurable with the collector_session_filename argument) in your current directory. Once you have a session stored, you can run the \"server\" to create a semi-interactive ssh server! Note -- unless you have real dns server(s) setup, and you can resolve things, you should disable domain-lookup -- if you don't the timeouts may (will!?) get exceeded and it will cause collection to fail in confusing ways. Server \u00b6 Starting the scrapli replay server is simple! 1 2 3 4 5 6 7 8 9 10 11 12 import asyncio from scrapli_replay.server.server import start async def main () -> None : await start ( port = 2001 , collect_data = \"scrapli_replay_collector_session.yaml\" ) if __name__ == \"__main__\" : loop = asyncio . get_event_loop () loop . run_until_complete ( main ()) loop . run_forever () You can pass whatever port you wish for the port argument, and the collect_data must be the collected data from the collector. Once the server is running you should be able to SSH to the server on the provided port just as if it were a \"real\" device! The username and password will always be \"scrapli\" regardless of what the credentials were for the collected server -- this is done so we never have to deal with or think about storing credentials. There are several big caveats to be aware of! Credentials: username/password (including for \"enable\" password) will always be \"scrapli\", as mentioned this is to keep things simple and not deal with storing any credential data Configs: configuration things are not supported and probably won't ever be. It would be a lot of work to keep track of when/if a user sends a config and what the resulting configuration would look like. The remaining major caveats are all around the \"paging\" behavior of the mock server(s). Before diving into these caveats, it is worth knowing a little bit about how scrapli behaves in general. Typical scrapli connections are opened, and an \"on_open\" function is executed -- this function normally disables pagination on a device, this is done so scrapli never has to deal with prompts like \"--More--\" during the output of a command. The collector/server stores the commands that are executed in the \"on_open\" function, and assumes that these commands disable pagination for the given device (this is true for all core platforms, so it must be true, right? :)). With that out of the way: Disabling pagination requires all \"on_open\" commands to be executed: if the \"on_open\" command for your platform contains \"terminal length 0\" and \"terminal width 512\", both commands must be seen before the server will disable pagination. If you send just \"terminal length 0\" (even though this disables pagination on IOSXE/etc.) but have not also sent \"terminal width 512\" the server will show you paginated output! Re-enabling pagination/logging in/out: You cannot re-enable pagination on the server, the only way to do this is to exit/re-connect. This is because the collector has no way to know what commands are actually doing/what commands disable/re-enable pagination (and we would never re-enable pagination in scrapli anyway!). With all the caveats out of the way, let's check out a mock server: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 $ ssh localhost -p 2001 -l scrapli Warning: Permanently added '[localhost]:2222' (RSA) to the list of known hosts. Password: C3560CX#show version Cisco IOS Software, C3560CX Software (C3560CX-UNIVERSALK9-M), Version 15.2(4)E7, RELEASE SOFTWARE (fc2) Technical Support: http://www.cisco.com/techsupport Copyright (c) 1986-2018 by Cisco Systems, Inc. Compiled Tue 18-Sep-18 13:20 by prod_rel_team ROM: Bootstrap program is C3560CX boot loader BOOTLDR: C3560CX Boot Loader (C3560CX-HBOOT-M) Version 15.2(4r)E5, RELEASE SOFTWARE (fc4) C3560CX uptime is 1 week, 3 days, 2 hours, 55 minutes System returned to ROM by power-on System restarted at 07:13:48 PST Thu Jan 14 2021 System image file is \"flash:c3560cx-universalk9-mz.152-4.E7.bin\" Last reload reason: power-on This product contains cryptographic features and is subject to United States and local country laws governing import, export, transfer and use. Delivery of Cisco cryptographic products does not imply third-party authority to import, export, distribute or use encryption. Importers, exporters, distributors and users are responsible for --More-- C3560CX# In the above output we connect to the mock server (with username/password of \"scrapli\") and execute the \"show version\" command -- as paging has not been disabled we get the lovely \"--More--\" pagination indicator. Simply sending another return here gets us back to our prompt. Continuing on... let's try to disable paging: 1 2 3 4 5 6 7 8 9 10 11 12 << SNIP >> This product contains cryptographic features and is subject to United States and local country laws governing import, export, transfer and use. Delivery of Cisco cryptographic products does not imply third-party authority to import, export, distribute or use encryption. Importers, exporters, distributors and users are responsible for --More-- C3560CX#terminal length 0 C3560CX#terminal width 511 % Unknown command or computer name, or unable to find computer address C3560CX#terminal width 512 C3560CX# Whoops - you can see that sending \"terminal width 511\" (instead of the \"correct\" command from the \"on_open\" function \"terminal width 512\") caused the server to send us an \"Unknown command\" output -- similar to if you sent an bad command on a \"real\" switch. Now that we have paging disabled, we can try the \"show version\" command again: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 << SNIP >> This product contains cryptographic features and is subject to United States and local country laws governing import, export, transfer and use. Delivery of Cisco cryptographic products does not imply third-party authority to import, export, distribute or use encryption. Importers, exporters, distributors and users are responsible for --More-- C3560CX#terminal length 0 C3560CX#terminal width 511 % Unknown command or computer name, or unable to find computer address C3560CX#terminal width 512 C3560CX#show version Cisco IOS Software, C3560CX Software (C3560CX-UNIVERSALK9-M), Version 15.2(4)E7, RELEASE SOFTWARE (fc2) Technical Support: http://www.cisco.com/techsupport Copyright (c) 1986-2018 by Cisco Systems, Inc. Compiled Tue 18-Sep-18 13:20 by prod_rel_team ROM: Bootstrap program is C3560CX boot loader BOOTLDR: C3560CX Boot Loader (C3560CX-HBOOT-M) Version 15.2(4r)E5, RELEASE SOFTWARE (fc4) C3560CX uptime is 1 week, 3 days, 2 hours, 55 minutes System returned to ROM by power-on System restarted at 07:13:48 PST Thu Jan 14 2021 System image file is \"flash:c3560cx-universalk9-mz.152-4.E7.bin\" Last reload reason: power-on This product contains cryptographic features and is subject to United States and local country laws governing import, export, transfer and use. Delivery of Cisco cryptographic products does not imply third-party authority to import, export, distribute or use encryption. Importers, exporters, distributors and users are responsible for compliance with U.S. and local country laws. By using this product you agree to comply with applicable laws and regulations. If you are unable to comply with U.S. and local laws, return this product immediately. A summary of U.S. laws governing Cisco cryptographic products may be found at: http://www.cisco.com/wwl/export/crypto/tool/stqrg.html If you require further assistance please contact us by sending email to export@cisco.com. License Level: ipservices License Type: Permanent Right-To-Use Next reload license Level: ipservices cisco WS-C3560CX-8PC-S (APM86XXX) processor (revision A0) with 524288K bytes of memory. Processor board ID FOC1911Y0NH Last reset from power-on 3 Virtual Ethernet interfaces 12 Gigabit Ethernet interfaces The password-recovery mechanism is enabled. 512K bytes of flash-simulated non-volatile configuration memory. Base ethernet MAC Address : C8:00:84:B2:E9:80 Motherboard assembly number : 73-16471-04 Power supply part number : 341-0675-01 Motherboard serial number : FOC190608U7 Power supply serial number : DCB190430Z0 Model revision number : A0 Motherboard revision number : A0 Model number : WS-C3560CX-8PC-S System serial number : FOC1911Y0NH Top Assembly Part Number : 68-5359-01 Top Assembly Revision Number : A0 Version ID : V01 CLEI Code Number : CMM1400DRA Hardware Board Revision Number : 0x02 Switch Ports Model SW Version SW Image ------ ----- ----- ---------- ---------- * 1 12 WS-C3560CX-8PC-S 15.2(4)E7 C3560CX-UNIVERSALK9-M Configuration register is 0xF C3560CX# That looks about right! How about config mode? 1 2 3 4 5 6 7 C3560CX#configure terminal Enter configuration commands, one per line. End with CNTL/Z. C3560CX(config)#show version ^ % Invalid input detected at '^' marker. C3560CX(config)# Sending a \"show\" command in config mode fails like you'd expect too. This is because we \"collected\" all the requested inputs at every privilege level. We can't send configs really because we didn't collect any and collector/server is not built to deal with configs anyway. Ok, back down to exec? 1 2 3 4 5 6 7 8 9 C3560CX(config)#show version ^ % Invalid input detected at '^' marker. C3560CX(config)#end C3560CX#disable C3560CX>enable Password: C3560CX# Down to exec no problem, and back up to privilege exec -- remember that the password is \"scrapli\"! Thats about it for scrapli replay server -- the hope is that this can be useful for folks to do a bit of offline testing of basic scrapli (or whatever else really) scripts!","title":"Basic Usage"},{"location":"user_guide/basic_usage/#basic-usage","text":"","title":"Basic Usage"},{"location":"user_guide/basic_usage/#what-do-you-need-to-get-done","text":"First things first: what do you need to get done? scrapli replay contains two similar yet very different testing tools. The first, is the pytest plugin -- a plugin to mark tests with. This plugin will record scrapli session inputs and outputs and save them, that way you can store these test sessions and re-use them (without needing a \"live\" device) in your CI setup. The second, is a \"collector\", and a \"server\" that allow you to build semi-interactive SSH servers that you can connect to for testing purposes. This allows you to have \"mock\"/\"fake\"/\"dummy\" SSH server(s) that look and feel like \"real\" network devices -- as with the pytest plugin, this could be useful in CI, or it could just be handy for offline testing. As you'd expect, if you are writing tests and wanting to have some reasonable assurances that your code that interacts with scrapli is doing what you think it should be doing, then you probably want to use the pytest plugin! If you just want to have a mock SSH server to play with, then the collector/server may be interesting to you.","title":"What do you need to get done!?!"},{"location":"user_guide/basic_usage/#pytest-plugin","text":"","title":"Pytest Plugin"},{"location":"user_guide/basic_usage/#overview-and-use-case","text":"As shown in the quickstart guide, getting going with the pytest plugin is fairly straightforward -- tests that contain scrapli operations can be marked with the scrapli_replay marker, causing scrapli replay to automatically wrap this test and record or replay sessions within the test. In order for scrapli replay to do this, there is one big caveat: the scrapli connection must be opened within the test ! Projects like pytest-vcr don't have this requirement because the sessions are stateless HTTP(s) sessions -- this is of course not the case for Telnet/SSH where we have more or less a stateful connection object. This may sound like a limiting factor for scrapli replay and perhaps it is, however it is relatively easy to work with as you'll see below! Here is a very simple example of a class that creates a scrapli connection and has some methods to do stuff: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import re from scrapli import Scrapli class Example : def __init__ ( self ): self . conn = Scrapli ( host = \"c3560\" , platform = \"cisco_iosxe\" , ssh_config_file = True , auth_strict_key = False ) # dont do this! dont have side affects in init, but helps demonstrate things! self . conn . open () def do_stuff ( self ): \"\"\"Get the version from the device\"\"\" version_result = self . conn . send_command ( command = \"show version | i Software\" ) if version_result . failed is True : return \"__FAILURE__\" version_result_string = version_result . result version_result_match = re . findall ( pattern = r \"Version ([a-z0-9\\.\\(\\)]*)\" , string = version_result_string , flags = re . I ) if not version_result_match : return \"__FAILURE__\" return version_result_match [ 0 ] Let's pretend we want to write some tests for the do_stuff method of this example class. We probably want to have at least three test cases for this method: Testing a failed result from the initial show command Testing a success event where we properly get and parse the version string Testing a failed parsing of the version string For cases one and three we probably don't want or need scrapli replay -- we could simply patch the send_command method of scrapli, returning bad data -- either a bad scrapli Response object, or a Response object with data that will cause our regex to fail. For case number 2, however, we could also patch scrapli and return correct data, this would validate that our function, when given appropriate outputs from scrapli, does what it should do. This would be a valuable test. With scrapli replay, however, we can take this a bit further! We can now create a test case that records actual device inputs and outputs and saves that data in a scrapli replay session. Subsequent tests can then replay that input and output data. Rather than just testing that our regex works w/ some patched response data we can now very simply test not only that, but also scrapli -- ensuring that scrapli is behaving as you would expect!","title":"Overview and Use Case"},{"location":"user_guide/basic_usage/#how-it-works","text":"Before jumping into how to use scrapli replay, it's worth spending a bit of time to understand how it works. At a high level, scrapli replay is a Pytest plugin that you can \"mark\" tests with. By marking a test you are effectively \"wrapping\" that test in the scrapli replay ScrapliReplay class. The pytest plugin then uses the ScrapliReplay class as a context manager, yielding to your test within the context manager. For tests that are marked asyncio we simply use the async context manager capability instead of the synchronous version. This selection of sync vs async happens transparently to you -- you just need to mark your tests with the asyncio marker if they are asyncio (which you had to do anyway, so no biggie!). While the ScrapliReplay context manager is active (while your test is running) ScrapliReplay patches the open method of scrapli and a ConnectionProfile is recorded (host/user/is using password/auth bypass/etc.). This ConnectionProfile is stored as part of the scrapli replay session data -- allowing us to validate that during subsequent test runs the connection information has not changed (if it has we raise an exception to fail the test). After the ConnectionProfile is recorded, the scrapli Channel (or AsyncChannel ) read and write methods are patched (replaced) with scrapli replay read/write methods. If the current test iteration is in \"record\" mode, we patch with the \"record\" read/write, otherwise we patch with the \"replay\" read/write -- these methods do what they sound like! Recording or replaying session data. At completion of your test, when the context manager is closing the session will be dumped to a yaml file in your session output directory (by default this is a folder located with your test file). Due to the fact that scrapli replay uses the open method of scrapli in order to fetch connection data and also to patch the channel objects, there is a requirement that the test actually opens the connection. This sounds perhaps limiting, and probably it is somewhat, however you can fairly easily work around this by having a fixture that returns an object with the connection already opened -- this fixture currently must be scoped to the function level. This will hopefully be improved in further scrapli replay releases to allow us to cache session-wide fixtures.","title":"How it Works"},{"location":"user_guide/basic_usage/#how-to-use-it","text":"As shown in the quickstart, using scrapli replay is fairly straightforward -- simply mark a test with the correct marker. The complication generally will come from needing to have the connection opened within that test being wrapped -- this section will showcase some basic ways to use scrapli replay, as well as how we can handle the connection opening problem. Working with the example class from the overview section, let's handle test case number 2. To start, we can do this with the patching method -- without scrapli replay: 1 2 3 4 5 6 7 8 9 10 11 12 from scrapli.response import Response def test_example_do_stuff_patching ( monkeypatch , example_instance ): \"\"\"Test Example.do_stuff\"\"\" def patched_send_command ( cls , command ): r = Response ( host = \"localhost\" , channel_input = command ) r . record_response ( b \"Software Version 15.2(4)E7\" ) return r monkeypatch . setattr ( \"scrapli.driver.network.sync_driver.NetworkDriver.send_command\" , patched_send_command ) assert example_instance . do_stuff () == \"15.2(4)E7\" This works reasonably well, and properly tests our regex does indeed find the version string; of course you could actually return a real device output instead of the abbreviated output here as well -- that would make things a bit more \"real\". This is nice, but it does not test any scrapli behavior at all as scrapli is completely patched out of the test. There must be a better way! Let's now re-write this test using scrapli replay: 1 2 3 4 5 6 7 import pytest from example import Example # <- this is assuming directory structure as in the \"examples/simple_test_case\" example! @pytest . mark . scrapli_replay def test_example_do_stuff_no_fixture (): \"\"\"Test Example.do_stuff\"\"\" assert Example () . do_stuff () == \"15.2(4)E7\" No patching?! Amazing! So... what is going on here? The Example class (from the snippet way above here) is created, which causes the scrapli connection to open, then we call the do_stuff method which fetches the version and parses it with some regex. Scrapli replay is \"aware\" of this test due to the marker -- this basically means that this test is living inside of a scrapli replay context manager... you can think of it as something like this: 1 2 with ScrapliReplay : test () An oversimplified example, but not by much! If you run this example (from the examples dir in the repo) the first time the test is ran, scrapli will actually connect to your device and record the output. This of course means that you need proper credentials/access in order to get this first recording done -- using ssh keys/config file so that you don't need to store any user/creds in your test is a great way to deal with this. At the end of the test, scrapli replay will dump the \"session\" data out to a yaml file in a new folder called \"scrapli_replay_sessions\" that was created in the same directory of your test file (you can change this, see the options section!). This \"session\" file looks like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 connection_profile : host : c3560 port : 22 auth_username : '' auth_password : false auth_private_key : '' auth_private_key_passphrase : false auth_bypass : false transport : system auth_secondary : false interactions : - channel_output : \"Warning: Permanently added 'c3560,172.31.254.1' (RSA) to the\\ \\ list of known hosts.\\n\\nC3560CX#\" expected_channel_input : \"\\n\" expected_channel_input_redacted : false - channel_output : \"\\nC3560CX#\" expected_channel_input : terminal length 0 expected_channel_input_redacted : false - channel_output : terminal length 0 expected_channel_input : \"\\n\" expected_channel_input_redacted : false - channel_output : \"\\nC3560CX#\" expected_channel_input : terminal width 512 expected_channel_input_redacted : false - channel_output : terminal width 512 expected_channel_input : \"\\n\" expected_channel_input_redacted : false - channel_output : \"\\nC3560CX#\" expected_channel_input : show version | i Software expected_channel_input_redacted : false - channel_output : show version | i Software expected_channel_input : \"\\n\" expected_channel_input_redacted : false - channel_output : \"\\nCisco IOS Software, C3560CX Software (C3560CX-UNIVERSALK9-M),\\ \\ Version 15.2(4)E7, RELEASE SOFTWARE (fc2)\\nC3560CX#\" expected_channel_input : expected_channel_input_redacted : false As you can see, connection details are stored (but never credentials) -- in the event of password authentication the password is not stored and is marked as \"REDACTED\" in the interactions output. Running the test again you'll notice that its even faster than scrapli normally is! Why? Because there is no actual connection going out to the device, the connection will just be automatically replayed from this session data! Now if you have a billion tests to write, or you are needing to pass lots of inputs in order to create your scrapli connection objects in every single test... that wouldn't be very fun! In cases like this it would be a great idea to put either the scrapli connection object, or the device containing the connection object into a fixture and allowing pytest to pass that fixture into each test function. Here is a simple example of a fixture for our example setup: 1 2 3 4 5 6 7 8 import pytest from example import Example @pytest . fixture ( scope = \"function\" ) def example_instance (): \"\"\"Simple fixture to return Example instance\"\"\" yield Example () And... a test taking advantage of this fixture: 1 2 3 4 @pytest . mark . scrapli_replay def test_example_do_stuff_with_fixture ( example_instance ): \"\"\"Test Example.do_stuff\"\"\" assert example_instance . do_stuff () == \"15.2(4)E7\" It is important to note that the fixture scope must be set to function -- again, this is because scrapli replay requires the connection to be opened within the test it is wrapping in order to properly record the connection profile and patch the read/write methods!","title":"How to Use it"},{"location":"user_guide/basic_usage/#pytest-plugin-options","text":"scrapli replay supports a handful of arguments to modify its behavior, currently, these are configurable via the pytest cli -- in the future they will likely be configurable by a dedicated fixture as well. The available options are:","title":"Pytest Plugin Options"},{"location":"user_guide/basic_usage/#mode","text":"The \"replay\" mode setting manages how scrapli replay handles replaying or recording sessions. This setting has the following options: replay: the default mode; if no session exists scrapli replay will record/create one, otherwise it will \"replay\" existing sessions (meaning you dont need to connect to a device) record: probably not needed often, does at it says -- records things. If a session exists it will auto switch to replay mode (meaning not overwrite the session) overwrite: overwrite existing all sessions always This option is configurable with the --scrapli-replay-mode switch: 1 python -m pytest tests --scrapli-replay-mode overwrite","title":"Mode"},{"location":"user_guide/basic_usage/#directory","text":"By default, scrapli replay stores the recorded sessions in a directory in the same folder as the test that is being executed. This is modifiable with the --scrapli-replay-directory switch: 1 python -m pytest tests --scrapli-replay-directory /my/cool/session/dir","title":"Directory"},{"location":"user_guide/basic_usage/#overwrite","text":"If you need to overwrite only certain test session data, you can do so by using the --scrapli-replay-overwrite switch. This argument accepts a comma separated list of test names of which to overwrite the session data. 1 python -m pytest tests --scrapli-replay-overwrite test1,test2,test3","title":"Overwrite"},{"location":"user_guide/basic_usage/#disable","text":"You can disable entirely the scrapli replay functionality -- meaning your tests will run \"normally\" without any of the scrapli replay patching/session work happening. This is done with the --scrapli-replay-disable flag. 1 python -m pytest tests --scrapli-replay-disable","title":"Disable"},{"location":"user_guide/basic_usage/#block-network","text":"Finally, you can \"block\" network connections -- this will cause any connection with a valid recorded session to be \"replay\"'d as normal, but any tests that would require recording a session will be skipped. The --scrapli-replay-block-network flag controls this. 1 python -m pytest tests --scrapli-replay-block-network","title":"Block Network"},{"location":"user_guide/basic_usage/#collector-and-server","text":"","title":"Collector and Server"},{"location":"user_guide/basic_usage/#overview","text":"The scrapli replay \"collector\" and \"server\" functionality is useful for creating mock ssh servers that are \"semi-interactive\". You can provide any number of commands (not configs! more on this in a bit) that you would like to collect from a device, and the collector will run the provided commands at all privilege levels, and with and without \"on_open\" functionality being executed (generally this means with and without paging being disabled). The collector will also collect any on open commands, on close commands, all privilege escalation/deescalation commands, and \"unknown\" or invalid command output from every privilege level. Just like the pytest plugin, the scrapli replay collector will output the collected data to a yaml file. This yaml file is then consumed by the scrapli replay server. The server itself is an asyncssh server that does its best to look and feel just like the real device that you collected the data from.","title":"Overview"},{"location":"user_guide/basic_usage/#collector","text":"As outlined in the overview section, the collector.... collects things! The collector tries to collect as much info from the device as is practical, with the ultimate goal of being able to allow the server to look pretty close to a real device. Before continuing, it is important to note that currently the collector can only be used with network devices -- meaning it must be used with a scrapli platform that extends the NetworkDriver class; moreover it must be used with a synchronous transport. There will likely not be any asyncio support for the collector (it doesn't seem to be very valuable to add asyncio support... please open an issue if you disagree!). To get started with the collector is fairly straight forward, simply create a collector class, passing in the commands you wish to collect, some details about \"paging\" (more on this in a sec), and the kwargs necessary to create the scrapli connection to collect from: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from scrapli_replay.server.collector import ScrapliCollector scrapli_kwargs = { \"host\" : \"localhost\" , \"port\" : 24022 , \"ssh_config_file\" : False , \"auth_strict_key\" : False , \"auth_username\" : \"vrnetlab\" , \"auth_password\" : \"VR-netlab9\" , \"auth_secondary\" : \"VR-netlab9\" , \"platform\" : \"arista_eos\" , } collector = ScrapliCollector ( channel_inputs = [ \"show version\" , \"show run\" ], interact_events = [ [( \"clear logg\" , \"Clear logging buffer [confirm]\" , False ), ( \"\" , \"switch#\" , False )] ], paging_indicator = \"--More--\" , paging_escape_string = \" \\x1b \" , ** scrapli_kwargs , ) If you are familiar with scrapli connections, the above snippet should look fairly similar! In addition to the scrapli connection data we see a few extra things: channel_inputs -- a list of \"inputs\" you wish to send to the device for recording. Each of these inputs will be run at every privilege level of the device, and before and after executing the \"on_open\" function (if applicable) interact_events -- similar to \"normal\" scrapli, a list of lists of tuples of \"interact events\" to record at each privilege level (and before/after on_open) paging_indicator -- this is what it sounds like -- a string that lets us know if the device has paginated output data paging_escape_string -- a string to send to \"cancel\" a command output if paging is encountered -- typically an escape, or a q works for most devices Note -- you can also pass an existing scrapli connection to the scrapli_connection argument if you prefer (instead of the kwargs needed to create a connection)! Once a collector object has been created, you can open the connection and simply run the collect method, followed by the dump method: 1 2 3 4 collector . open () collector . collect () collector . close () collector . dump () The session data will be dumped to a yaml file called \"scrapli_replay_collector_session.yaml\" (configurable with the collector_session_filename argument) in your current directory. Once you have a session stored, you can run the \"server\" to create a semi-interactive ssh server! Note -- unless you have real dns server(s) setup, and you can resolve things, you should disable domain-lookup -- if you don't the timeouts may (will!?) get exceeded and it will cause collection to fail in confusing ways.","title":"Collector"},{"location":"user_guide/basic_usage/#server","text":"Starting the scrapli replay server is simple! 1 2 3 4 5 6 7 8 9 10 11 12 import asyncio from scrapli_replay.server.server import start async def main () -> None : await start ( port = 2001 , collect_data = \"scrapli_replay_collector_session.yaml\" ) if __name__ == \"__main__\" : loop = asyncio . get_event_loop () loop . run_until_complete ( main ()) loop . run_forever () You can pass whatever port you wish for the port argument, and the collect_data must be the collected data from the collector. Once the server is running you should be able to SSH to the server on the provided port just as if it were a \"real\" device! The username and password will always be \"scrapli\" regardless of what the credentials were for the collected server -- this is done so we never have to deal with or think about storing credentials. There are several big caveats to be aware of! Credentials: username/password (including for \"enable\" password) will always be \"scrapli\", as mentioned this is to keep things simple and not deal with storing any credential data Configs: configuration things are not supported and probably won't ever be. It would be a lot of work to keep track of when/if a user sends a config and what the resulting configuration would look like. The remaining major caveats are all around the \"paging\" behavior of the mock server(s). Before diving into these caveats, it is worth knowing a little bit about how scrapli behaves in general. Typical scrapli connections are opened, and an \"on_open\" function is executed -- this function normally disables pagination on a device, this is done so scrapli never has to deal with prompts like \"--More--\" during the output of a command. The collector/server stores the commands that are executed in the \"on_open\" function, and assumes that these commands disable pagination for the given device (this is true for all core platforms, so it must be true, right? :)). With that out of the way: Disabling pagination requires all \"on_open\" commands to be executed: if the \"on_open\" command for your platform contains \"terminal length 0\" and \"terminal width 512\", both commands must be seen before the server will disable pagination. If you send just \"terminal length 0\" (even though this disables pagination on IOSXE/etc.) but have not also sent \"terminal width 512\" the server will show you paginated output! Re-enabling pagination/logging in/out: You cannot re-enable pagination on the server, the only way to do this is to exit/re-connect. This is because the collector has no way to know what commands are actually doing/what commands disable/re-enable pagination (and we would never re-enable pagination in scrapli anyway!). With all the caveats out of the way, let's check out a mock server: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 $ ssh localhost -p 2001 -l scrapli Warning: Permanently added '[localhost]:2222' (RSA) to the list of known hosts. Password: C3560CX#show version Cisco IOS Software, C3560CX Software (C3560CX-UNIVERSALK9-M), Version 15.2(4)E7, RELEASE SOFTWARE (fc2) Technical Support: http://www.cisco.com/techsupport Copyright (c) 1986-2018 by Cisco Systems, Inc. Compiled Tue 18-Sep-18 13:20 by prod_rel_team ROM: Bootstrap program is C3560CX boot loader BOOTLDR: C3560CX Boot Loader (C3560CX-HBOOT-M) Version 15.2(4r)E5, RELEASE SOFTWARE (fc4) C3560CX uptime is 1 week, 3 days, 2 hours, 55 minutes System returned to ROM by power-on System restarted at 07:13:48 PST Thu Jan 14 2021 System image file is \"flash:c3560cx-universalk9-mz.152-4.E7.bin\" Last reload reason: power-on This product contains cryptographic features and is subject to United States and local country laws governing import, export, transfer and use. Delivery of Cisco cryptographic products does not imply third-party authority to import, export, distribute or use encryption. Importers, exporters, distributors and users are responsible for --More-- C3560CX# In the above output we connect to the mock server (with username/password of \"scrapli\") and execute the \"show version\" command -- as paging has not been disabled we get the lovely \"--More--\" pagination indicator. Simply sending another return here gets us back to our prompt. Continuing on... let's try to disable paging: 1 2 3 4 5 6 7 8 9 10 11 12 << SNIP >> This product contains cryptographic features and is subject to United States and local country laws governing import, export, transfer and use. Delivery of Cisco cryptographic products does not imply third-party authority to import, export, distribute or use encryption. Importers, exporters, distributors and users are responsible for --More-- C3560CX#terminal length 0 C3560CX#terminal width 511 % Unknown command or computer name, or unable to find computer address C3560CX#terminal width 512 C3560CX# Whoops - you can see that sending \"terminal width 511\" (instead of the \"correct\" command from the \"on_open\" function \"terminal width 512\") caused the server to send us an \"Unknown command\" output -- similar to if you sent an bad command on a \"real\" switch. Now that we have paging disabled, we can try the \"show version\" command again: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 << SNIP >> This product contains cryptographic features and is subject to United States and local country laws governing import, export, transfer and use. Delivery of Cisco cryptographic products does not imply third-party authority to import, export, distribute or use encryption. Importers, exporters, distributors and users are responsible for --More-- C3560CX#terminal length 0 C3560CX#terminal width 511 % Unknown command or computer name, or unable to find computer address C3560CX#terminal width 512 C3560CX#show version Cisco IOS Software, C3560CX Software (C3560CX-UNIVERSALK9-M), Version 15.2(4)E7, RELEASE SOFTWARE (fc2) Technical Support: http://www.cisco.com/techsupport Copyright (c) 1986-2018 by Cisco Systems, Inc. Compiled Tue 18-Sep-18 13:20 by prod_rel_team ROM: Bootstrap program is C3560CX boot loader BOOTLDR: C3560CX Boot Loader (C3560CX-HBOOT-M) Version 15.2(4r)E5, RELEASE SOFTWARE (fc4) C3560CX uptime is 1 week, 3 days, 2 hours, 55 minutes System returned to ROM by power-on System restarted at 07:13:48 PST Thu Jan 14 2021 System image file is \"flash:c3560cx-universalk9-mz.152-4.E7.bin\" Last reload reason: power-on This product contains cryptographic features and is subject to United States and local country laws governing import, export, transfer and use. Delivery of Cisco cryptographic products does not imply third-party authority to import, export, distribute or use encryption. Importers, exporters, distributors and users are responsible for compliance with U.S. and local country laws. By using this product you agree to comply with applicable laws and regulations. If you are unable to comply with U.S. and local laws, return this product immediately. A summary of U.S. laws governing Cisco cryptographic products may be found at: http://www.cisco.com/wwl/export/crypto/tool/stqrg.html If you require further assistance please contact us by sending email to export@cisco.com. License Level: ipservices License Type: Permanent Right-To-Use Next reload license Level: ipservices cisco WS-C3560CX-8PC-S (APM86XXX) processor (revision A0) with 524288K bytes of memory. Processor board ID FOC1911Y0NH Last reset from power-on 3 Virtual Ethernet interfaces 12 Gigabit Ethernet interfaces The password-recovery mechanism is enabled. 512K bytes of flash-simulated non-volatile configuration memory. Base ethernet MAC Address : C8:00:84:B2:E9:80 Motherboard assembly number : 73-16471-04 Power supply part number : 341-0675-01 Motherboard serial number : FOC190608U7 Power supply serial number : DCB190430Z0 Model revision number : A0 Motherboard revision number : A0 Model number : WS-C3560CX-8PC-S System serial number : FOC1911Y0NH Top Assembly Part Number : 68-5359-01 Top Assembly Revision Number : A0 Version ID : V01 CLEI Code Number : CMM1400DRA Hardware Board Revision Number : 0x02 Switch Ports Model SW Version SW Image ------ ----- ----- ---------- ---------- * 1 12 WS-C3560CX-8PC-S 15.2(4)E7 C3560CX-UNIVERSALK9-M Configuration register is 0xF C3560CX# That looks about right! How about config mode? 1 2 3 4 5 6 7 C3560CX#configure terminal Enter configuration commands, one per line. End with CNTL/Z. C3560CX(config)#show version ^ % Invalid input detected at '^' marker. C3560CX(config)# Sending a \"show\" command in config mode fails like you'd expect too. This is because we \"collected\" all the requested inputs at every privilege level. We can't send configs really because we didn't collect any and collector/server is not built to deal with configs anyway. Ok, back down to exec? 1 2 3 4 5 6 7 8 9 C3560CX(config)#show version ^ % Invalid input detected at '^' marker. C3560CX(config)#end C3560CX#disable C3560CX>enable Password: C3560CX# Down to exec no problem, and back up to privilege exec -- remember that the password is \"scrapli\"! Thats about it for scrapli replay server -- the hope is that this can be useful for folks to do a bit of offline testing of basic scrapli (or whatever else really) scripts!","title":"Server"},{"location":"user_guide/installation/","text":"Installation \u00b6 Standard Installation \u00b6 As outlined in the quick start, you should be able to pip install scrapli replay \"normally\": 1 pip install scrapli-replay Installing current master branch \u00b6 To install from the source repositories master branch: 1 pip install git+https://github.com/scrapli/scrapli_replay Installing current develop branch \u00b6 To install from this repositories develop branch: 1 pip install -e git+https://github.com/scrapli/scrapli_replay.git@develop#egg=scrapli_replay Installation from Source \u00b6 To install from source: 1 2 3 git clone https://github.com/scrapli/scrapli_replay cd scrapli_replay python setup.py install","title":"Installation"},{"location":"user_guide/installation/#installation","text":"","title":"Installation"},{"location":"user_guide/installation/#standard-installation","text":"As outlined in the quick start, you should be able to pip install scrapli replay \"normally\": 1 pip install scrapli-replay","title":"Standard Installation"},{"location":"user_guide/installation/#installing-current-master-branch","text":"To install from the source repositories master branch: 1 pip install git+https://github.com/scrapli/scrapli_replay","title":"Installing current master branch"},{"location":"user_guide/installation/#installing-current-develop-branch","text":"To install from this repositories develop branch: 1 pip install -e git+https://github.com/scrapli/scrapli_replay.git@develop#egg=scrapli_replay","title":"Installing current develop branch"},{"location":"user_guide/installation/#installation-from-source","text":"To install from source: 1 2 3 git clone https://github.com/scrapli/scrapli_replay cd scrapli_replay python setup.py install","title":"Installation from Source"},{"location":"user_guide/project_details/","text":"Project Details \u00b6 What is scrapli replay \u00b6 scrapli replay is a set of tools to help you test scrapli programs more easily. scrapli replay is very heavily influenced by the VCR.py library, and the associated pytest plugin pytest_vcr . scrapli replay's primary function is to provide a similar testing experience for Telnet/SSH/NETCONF programs as these great tools do for HTTP/HTTPs programs. scrapli replay also contains tooling to help you \"dynamically\" build \"interactive\" SSH servers based on real life SSH devices -- again, the purpose of this is to help you more easily test things offline, in CI environments, or just have something safe to mess around with. There are quotes around \"dynamically\" and \"interactive\" as these are perhaps loaded terms! \"dynamically\" meaning the scrapli replay \"collector\" can connect to, and collect output from a real life SSH server. The scrapli replay \"server\" is then able to load the collected data and operate as a mock SSH server -- any commands that you collected are able to be \"played back\" in an \"interactive\" fashion. Check out the basic usage guide for more info -- and some examples -- to make things more clear! Related Scrapli Libraries \u00b6 scrapli replay is really just test tooling built around the scrapli family of libraries -- and as such is not really directly useful for connecting to devices and getting things done. If you are interested in getting things done, check out the related scrapli libraries below: scrapli scrapli_netconf scrapli_community scrapli_cfg nornir_scrapli","title":"Project Details"},{"location":"user_guide/project_details/#project-details","text":"","title":"Project Details"},{"location":"user_guide/project_details/#what-is-scrapli-replay","text":"scrapli replay is a set of tools to help you test scrapli programs more easily. scrapli replay is very heavily influenced by the VCR.py library, and the associated pytest plugin pytest_vcr . scrapli replay's primary function is to provide a similar testing experience for Telnet/SSH/NETCONF programs as these great tools do for HTTP/HTTPs programs. scrapli replay also contains tooling to help you \"dynamically\" build \"interactive\" SSH servers based on real life SSH devices -- again, the purpose of this is to help you more easily test things offline, in CI environments, or just have something safe to mess around with. There are quotes around \"dynamically\" and \"interactive\" as these are perhaps loaded terms! \"dynamically\" meaning the scrapli replay \"collector\" can connect to, and collect output from a real life SSH server. The scrapli replay \"server\" is then able to load the collected data and operate as a mock SSH server -- any commands that you collected are able to be \"played back\" in an \"interactive\" fashion. Check out the basic usage guide for more info -- and some examples -- to make things more clear!","title":"What is scrapli replay"},{"location":"user_guide/project_details/#related-scrapli-libraries","text":"scrapli replay is really just test tooling built around the scrapli family of libraries -- and as such is not really directly useful for connecting to devices and getting things done. If you are interested in getting things done, check out the related scrapli libraries below: scrapli scrapli_netconf scrapli_community scrapli_cfg nornir_scrapli","title":"Related Scrapli Libraries"},{"location":"user_guide/quickstart/","text":"Quick Start Guide \u00b6 Installation \u00b6 In most cases installation via pip is the simplest and best way to install scrapli replay. See here for advanced installation details. 1 pip install scrapli-replay A Simple Example (Pytest) \u00b6 Simply mark your tests containing scrapli code with the scrapli_replay marker: 1 2 3 4 @pytest . mark . scrapli_replay def test_something_else (): with IOSXEDriver ( ** MY_DEVICE ) as conn : result = conn . send_command ( \"show run | i hostname\" )","title":"Quick Start Guide"},{"location":"user_guide/quickstart/#quick-start-guide","text":"","title":"Quick Start Guide"},{"location":"user_guide/quickstart/#installation","text":"In most cases installation via pip is the simplest and best way to install scrapli replay. See here for advanced installation details. 1 pip install scrapli-replay","title":"Installation"},{"location":"user_guide/quickstart/#a-simple-example-pytest","text":"Simply mark your tests containing scrapli code with the scrapli_replay marker: 1 2 3 4 @pytest . mark . scrapli_replay def test_something_else (): with IOSXEDriver ( ** MY_DEVICE ) as conn : result = conn . send_command ( \"show run | i hostname\" )","title":"A Simple Example (Pytest)"},{"location":"user_guide/versioning/","text":"Versioning \u00b6 Please see the scrapli \"core\" here documentation for versioning information.","title":"Versioning"},{"location":"user_guide/versioning/#versioning","text":"Please see the scrapli \"core\" here documentation for versioning information.","title":"Versioning"}]}